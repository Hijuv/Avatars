{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"ChatGPT Auto-Continue ‚è©","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["*://chat.openai.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":["raw.githubusercontent.com","greasyfork.org"],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":true}},"storage":{"ts":1713949253015,"data":{}},"enabled":true,"position":1,"file_url":"https://update.greasyfork.org/scripts/466789/ChatGPT%20Auto-Continue%20%E2%8F%A9.user.js","uuid":"d2fec430-b7fb-4e41-ab0a-9956933ef1ef","source":"// ==UserScript==
// @name                ChatGPT Auto-Continue ⏩
// @name:af             ChatGPT Auto-Aangaan ⏩
// @name:am             ChatGPT Auto-ተጨባጭ ማሳያ ⏩
// @name:ar             ChatGPT الاستمرار التلقائي ⏩
// @name:az             ChatGPT Avtomatik Davam et ⏩
// @name:be             ChatGPT Аўтаматычнае Працягванне ⏩
// @name:bg             ChatGPT Автоматично Продължаване ⏩
// @name:bn             ChatGPT স্বয়ংক্রিয় চালিয়ে যাওয়া ⏩
// @name:bo             ChatGPT རེད་འཐུམ་བཅོས་པ། ⏩
// @name:bs             ChatGPT Automatski Nastavi ⏩
// @name:ca             ChatGPT Auto-Continua ⏩
// @name:ceb            ChatGPT Auto-Padayon ⏩
// @name:ckb            ChatGPT دهستكاری خۆکار ⏩
// @name:cs             ChatGPT Automatické Pokračování ⏩
// @name:cy             ChatGPT Auto-Parhau ⏩
// @name:da             ChatGPT Auto-Fortsæt ⏩
// @name:de             ChatGPT Automatisches Fortfahren ⏩
// @name:dv             ChatGPT އައިނާދު ހިސާބަތް ⏩
// @name:dz             ChatGPT རེད་འཐུམ་གཅིག་ཁྱེར། ⏩
// @name:el             ChatGPT Αυτόματη Συνέχιση ⏩
// @name:eo             ChatGPT Aŭtomata Daŭrigado ⏩
// @name:es             ChatGPT Auto-Continuar ⏩
// @name:et             ChatGPT Automaatne Jätkamine ⏩
// @name:eu             ChatGPT Auto-Jarraitu ⏩
// @name:fa             ChatGPT ادامه خودکار ⏩
// @name:fi             ChatGPT Automaattinen Jatkaminen ⏩
// @name:fo             ChatGPT Auto-Verða ⏩
// @name:fr             ChatGPT Auto-Continuer ⏩
// @name:fr-CA          ChatGPT Auto-Continuer ⏩
// @name:gd             ChatGPT Auto-Leantainn ⏩
// @name:gl             ChatGPT Auto-Continuar ⏩
// @name:gu             ChatGPT સ્વચાલિત-ચાલુ રાખો ⏩
// @name:haw            ChatGPT Auto-Kōkua ⏩
// @name:he             ChatGPT המשך אוטומטי ⏩
// @name:hi             ChatGPT स्वचालित-प्रचालित रखें ⏩
// @name:hr             ChatGPT Auto-Nastavi ⏩
// @name:ht             ChatGPT Otomatik Kontinye ⏩
// @name:hu             ChatGPT Automatikus Folytatás ⏩
// @name:hy             ChatGPT Ինքնաշխատում Շարունակումը ⏩
// @name:id             ChatGPT Lanjut Otomatis ⏩
// @name:is             ChatGPT Sjálfvirk Framhald ⏩
// @name:it             ChatGPT Auto-Continua ⏩
// @name:ja             ChatGPT 自動継続 ⏩
// @name:jv             ChatGPT Lanjut Otomatis ⏩
// @name:ka             ChatGPT ავტომატური გაგრძელება ⏩
// @name:kab            ChatGPT Yemmeslayen Avrid n Tizwaru ⏩
// @name:kk             ChatGPT Автоматты Жалғастыру ⏩
// @name:km             ChatGPT បន្តទៅមកដល់ដោយស្វ័យប្រវត្តិ ⏩
// @name:kn             ChatGPT ಸ್ವಯಂಚಾಲಿತ ಮುಂದುವರಿಕೆ ⏩
// @name:ko             ChatGPT 자동 계속 ⏩
// @name:ku             ChatGPT Berdewamkirina Auto ⏩
// @name:ky             ChatGPT Автоматтык Жалгастыруу ⏩
// @name:la             ChatGPT Auto-Continuare ⏩
// @name:lb             ChatGPT Auto-Weiderginn ⏩
// @name:lo             ChatGPT ດຽວນີ້ບໍ່ຮອດຄວາມເລີຍ ⏩
// @name:lt             ChatGPT Automatinis Tęsti ⏩
// @name:lv             ChatGPT Automātiska Turpināšana ⏩
// @name:mg             ChatGPT Miverina Automatically ⏩
// @name:mi             ChatGPT Whakareri Tūmau ⏩
// @name:mk             ChatGPT Автоматско Продолжување ⏩
// @name:ml             ChatGPT ഓട്ടോ-തുടരുക ⏩
// @name:mn             ChatGPT Автомат Үргэлжлүүлэх ⏩
// @name:ms             ChatGPT Auto-Sambung ⏩
// @name:mt             ChatGPT Awto-Kontinwa ⏩
// @name:my             ChatGPT အလိုအလျောက်-ဆက်လက်လုပ်ကိုင်တယ် ⏩
// @name:ne             ChatGPT स्वचालित-तत्परता ⏩
// @name:nl             ChatGPT Auto-Doorgaan ⏩
// @name:no             ChatGPT Auto-Fortsette ⏩
// @name:ny             ChatGPT Auto-Endeleza ⏩
// @name:pa             ChatGPT ਸਵੈ-ਚਲੋ ⏩
// @name:pap            ChatGPT Sigui Automátikamente ⏩
// @name:pl             ChatGPT Automatyczne Kontynuowanie ⏩
// @name:ps             ChatGPT خپلکار تسلیم ⏩
// @name:pt             ChatGPT Auto-Continuar ⏩
// @name:ro             ChatGPT Auto-Continuare ⏩
// @name:ru             ChatGPT Авто-Продолжение ⏩
// @name:rw             ChatGPT Kugerageza Auto ⏩
// @name:si             ChatGPT ස්වයංක්‍රීය-දියවැඩියාව ⏩
// @name:sk             ChatGPT Auto-Pokračovať ⏩
// @name:sl             ChatGPT Samodejno Nadaljuj ⏩
// @name:sm             ChatGPT Aunoa'i-Taulaga ⏩
// @name:so             ChatGPT Isdhaaf Caruureed ⏩
// @name:sr             ChatGPT Аутоматски Настави ⏩
// @name:sv             ChatGPT Auto-Fortsätt ⏩
// @name:sw             ChatGPT Kusonga Kiotomatiki ⏩
// @name:ta             ChatGPT தானியங்கி தொடர்ந்து செல்லுங்கள் ⏩
// @name:te             ChatGPT ఆటో-కంటిన్యూ ⏩
// @name:tg             ChatGPT Давомоти автоматӣ ⏩
// @name:th             ChatGPT ดำเนินการต่ออย่างอัตโนมัติ ⏩
// @name:ti             ChatGPT ኣበይቲ ድሕሪ ተረኺቡ ⏩
// @name:tk             ChatGPT Avtomatik Dowam etmek ⏩
// @name:to             ChatGPT Tonu-'Aofa ⏩
// @name:tpi            ChatGPT Otomatik Kontinyu ⏩
// @name:tr             ChatGPT Otomatik Devam ⏩
// @name:uk             ChatGPT Автоматичне Продовження ⏩
// @name:ur             ChatGPT خودکار جاری رکھیں ⏩
// @name:uz             ChatGPT Avtomatik Davom ⏩
// @name:vi             ChatGPT Tự Động Tiếp Tục ⏩
// @name:xh             ChatGPT Ukuphela Okuqukethweyo ⏩
// @name:yi             ChatGPT אַווטאָ-קאַנטיניוירן ⏩
// @name:zh             ChatGPT 自动继续 ⏩
// @name:zh-CN          ChatGPT 自动继续 ⏩
// @name:zh-HK          ChatGPT 自動繼續 ⏩
// @name:zh-SG          ChatGPT 自动继续 ⏩
// @name:zh-TW          ChatGPT 自動繼續 ⏩
// @name:zu             ChatGPT Ngokugcwele Ukuphela ⏩
// @description         ⚡ Automatically continue generating multiple ChatGPT responses
// @description:af      ⚡ Outomaties voortgaan met die opwekking van meerdere ChatGPT-antwoorde
// @description:am      ⚡ እንዴትስ እንዲደርስ ያለብሳል የተወሰነ ምርጫዎች ለChatGPT
// @description:ar      ⚡ استمر في توليد استجابات متعددة لـ ChatGPT تلقائيًا
// @description:az      ⚡ ChatGPT cavablarını avtomatik olaraq çoxaldmağa davam edin
// @description:be      ⚡ Аўтаматычна працягвайце генерацыю некалькіх адказаў ChatGPT
// @description:bem     ⚡ Tontonkanyani kupitika kuwambo wanthu wokha-wokha wa ChatGPT
// @description:bg      ⚡ Продължете автоматично да генерирате множество отговори от ChatGPT
// @description:bn      ⚡ ChatGPT প্রতিক্রিয়া উত্পাদন অটোমেটিকভাবে চালিয়ে যান
// @description:bo      ⚡ ཡིག་ཆ་འཚོལ་ལག་སྤྱོད་རོགས་བྱུང་གནང་ནུས་པའི་ChatGPTལྕེབ་གསོར་བརྡ་འཕྲོ་ཤོག་ནང་བསྐྱོད་པ།
// @description:bs      ⚡ Nastavite automatski generirati više odgovora ChatGPT-a
// @description:ca      ⚡ Continua generant automàticament múltiples respostes de ChatGPT
// @description:ceb     ⚡ Magpadayon sa pag-generate og daghang mga Tugbang sa ChatGPT nga Otomatik
// @description:ckb     ⚡ بەردەوامبوون بە سەرجەم وەڵامەکانی ChatGPT
// @description:cs      ⚡ Automaticky pokračujte v generování více odpovědí ChatGPT
// @description:cy      ⚡ Parhewch i gynhyrchu nifer o ymatebion ChatGPT yn awtomatig
// @description:da      ⚡ Forsæt automatisk med at generere flere ChatGPT-responser
// @description:de      ⚡ Generieren Sie automatisch mehrere ChatGPT-Antworten weiterhin
// @description:dv      ⚡ އައުތީ ހުންނަވާ މެއިންމު ChatGPT އަޕް ކޮންޓެއް ބަދަލުކުރުމުގެ ރަނގަޅަ
// @description:dz      ⚡ འཕྲོས་མེད་པར་དུག་ཞིབ་པ་བསྐུགས་པར་ཡོད་མི་ChatGPTལྕེབ་གསོར་བརྡ་འཕྲོ་ཤོག་ནང་བསྐྱོད་པ།
// @description:el      ⚡ Συνεχίστε αυτόματα να δημιουργείτε πολλαπλές απαντήσεις ChatGPT
// @description:eo      ⚡ Daŭrigu aŭtomate generi plurajn respondojn ChatGPT
// @description:es      ⚡ Continúa generando automáticamente múltiples respuestas de ChatGPT
// @description:et      ⚡ Jätkake automaatselt mitme ChatGPT-vastuse genereerimist
// @description:eu      ⚡ Jarraitu automatikoki ChatGPT erantzun anitzak sortzen
// @description:fa      ⚡ ادامه تولید خودکار چندین پاسخ ChatGPT
// @description:fi      ⚡ Jatka automaattisesti useiden ChatGPT-vastausten generointia
// @description:fo      ⚡ Halda áfram við at framleiða fleiri ChatGPT svar
// @description:fr      ⚡ Continuez automatiquement à générer plusieurs réponses ChatGPT
// @description:fr-CA   ⚡ Continuez automatiquement à générer plusieurs réponses ChatGPT
// @description:gd      ⚡ Lean air adhart a' gabhail air adhart na freagairtean ChatGPT le bhith a' riochdachadh nas mòr
// @description:gl      ⚡ Continúa xerando automaticamente múltiples respostas de ChatGPT
// @description:gu      ⚡ આપોઆપ વધતા ચાર્જો આપતી કરો ChatGPT પ્રતિભાઓ
// @description:haw     ⚡ E mālama i ka hōʻoluʻolu ʻana i nā pane ʻelua a i ʻole iā ChatGPT
// @description:he      ⚡ המשך ליצור באופן אוטומטי מספר תגובות ChatGPT
// @description:hi      ⚡ स्वचालित रूप से बहुत सारे ChatGPT प्रतिक्रियाएँ उत्पन्न करना जारी रखें
// @description:hr      ⚡ Automatski nastavite generirati više ChatGPT odgovora
// @description:ht      ⚡ Kontinye otomatikman kontinye jenerasyon plizyè repons ChatGPT
// @description:hu      ⚡ Folytassa automatikusan több ChatGPT-válasz generálását
// @description:hy      ⚡ Շարունակեք ավտոմատ ստեղծել մեկից ավելի ChatGPT պատասխաններ
// @description:id      ⚡ Lanjutkan secara otomatis menghasilkan beberapa respons ChatGPT
// @description:is      ⚡ Halda áfram að framleiða fjölda ChatGPT-svara sjálfkrafa
// @description:it      ⚡ Continua automaticamente a generare più risposte di ChatGPT
// @description:ja      ⚡ ChatGPTの複数の応答を自動的に継続的に生成し続ける
// @description:jv      ⚡ Terus ngasilake balasan multipel ChatGPT kasebut otomatis
// @description:ka      ⚡ გაგრძელეთ ავტომატურად გენერირებას რამდენიმე ChatGPT პასუხის
// @description:kab     ⚡ Sekcem seg yilmeẓyen deg usefru n tufat ChatGPT
// @description:kk      ⚡ ChatGPT-ның бірнеше жауаптарын автоматты түрде жалғастыруға жалғастырыңыз
// @description:km      ⚡ បន្តទៀតហើយបន្តការបង្កើតចម្លើយជាច្រើននៃ ChatGPT ដោយស្វ័យប្រវត្តិ
// @description:kn      ⚡ ಸ್ವಯಂಚಾಲಿತವಾಗಿ ChatGPT ಪ್ರತಿಕ್ರಿಯೆಗಳನ್ನು ಮುಂದುವರಿಸಿ
// @description:ko      ⚡ ChatGPT 응답을 자동으로 계속 생성하세요
// @description:ku      ⚡ Parvekirina otomatîk a berdevkêya çêkirina gelek bersivên ChatGPT
// @description:ky      ⚡ Тууралуу даярдалган көптөгөн ChatGPT каражаттарын жалгастыр
// @description:la      ⚡ Automatica continua generatio plurium responsionum ChatGPT
// @description:lb      ⚡ Fuert mat der Automatiséierung vum generéieren vun méi ChatGPT Äntwerten
// @description:lo      ⚡ ຕະຫຼາດໃນການຜະລິດທັງເຫລົ່າຂອງການສ້າງຄໍາອະທິບາຍຂອງ ChatGPT
// @description:lt      ⚡ Tęskite automatiškai generuoti daugelį ChatGPT atsakymų
// @description:lv      ⚡ Turpiniet automātiski ģenerēt vairākas ChatGPT atbildes
// @description:mg      ⚡ Mihatra ny famokarana an-taonana momba ny fijery maromaro amin'ny ChatGPT
// @description:mi      ⚡ Whakapau tonu i te whakaputa i ngā whakahoki ā-ipurangi maha mō te ChatGPT
// @description:mk      ⚡ Настани се автоматски да генерираш повеќе одговори на ChatGPT
// @description:ml      ⚡ ChatGPT പ്രതികരണങ്ങൾക്ക് സ്വയംഭാവതന്നെ തുടങ്ങുക
// @description:mn      ⚡ ChatGPT хариултуудыг автоматаар үүсгэнэ үү
// @description:ms      ⚡ Terus menghasilkan beberapa respons ChatGPT secara automatik
// @description:mt      ⚡ Kompluta b'mod awtomatiku jipproduċi iktar risposti tal-ChatGPT
// @description:my      ⚡ ချောတောင်းကိုလည်း ChatGPT အတွက် အလိုအလျောက် ထပ်တိုးထားသည်ကိုနှိပ်ပါ
// @description:ne      ⚡ क्याटजीपीटी प्रतिक्रियाहरूलाई स्वतः सार्नुहोस्
// @description:nl      ⚡ Ga automatisch door met het genereren van meerdere ChatGPT-reacties
// @description:no      ⚡ Fortsett automatisk med å generere flere ChatGPT-responser
// @description:ny      ⚡ Kwezalitsa mabuku achinsinsi amakono apamwamba a ChatGPT
// @description:pa      ⚡ ਆਪਣੇ ਆਪ ਕਈ ChatGPT ਜਵਾਬਾਂ ਨੂੰ ਜਾਰੀ ਰੱਖਣ ਦੇ ਨਾਲ ਜਾਰੀ ਰੱਖੋ
// @description:pap     ⚡ Kontinua generando automaticamente varios respondenan di ChatGPT
// @description:pl      ⚡ Kontynuuj automatyczne generowanie wielu odpowiedzi ChatGPT
// @description:ps      ⚡ په خپله خوښه خپور شه کړه چې د ChatGPT پاسخونه وویشتل
// @description:pt      ⚡ Continue gerando automaticamente várias respostas do ChatGPT
// @description:pt-BR   ⚡ Continue gerando automaticamente várias respostas do ChatGPT
// @description:rn      ⚡ Komeza automatik kugenera ibyanditswe byinshi bya ChatGPT
// @description:ro      ⚡ Continuați să generați automat mai multe răspunsuri ChatGPT
// @description:ru      ⚡ Продолжайте автоматически генерировать несколько ответов ChatGPT
// @description:rw      ⚡ Angana gusuzumira kongera amakuru adahindurwa ya ChatGPT
// @description:sg      ⚡ Kwâandâ mbele mbanzi mêlêba mêvâmba ya tâ ChatGPT
// @description:si      ⚡ ChatGPT හි බහුතරක් ස්වයංක්රීයව පවතී
// @description:sk      ⚡ Automaticky pokračujte v generovaní viacerých odpovedí ChatGPT
// @description:sl      ⚡ Samodejno nadaljujte z generiranjem več odgovorov ChatGPT
// @description:sm      ⚡ Alofa faauaogaina ona faaaogāina ni tali i le mafaufau ChatGPT
// @description:sn      ⚡ Enda kusvika pachigadzirwa chekugadzirisa vashandisi vairambidzwi vechi ChatGPT
// @description:so      ⚡ Sii wadnaansho badan oo ChatGPT ka heli
// @description:sr      ⚡ Настави аутоматски да генеришеш више ChatGPT одговора
// @description:sv      ⚡ Fortsätt att automatiskt generera flera ChatGPT-svar
// @description:sw      ⚡ Endelea kuzalisha majibu mengi ya ChatGPT kiotomatiki
// @description:ta      ⚡ தானியங்கி மீண்டும் பல விளக்கங்களை உருவாக்கத் தொடர்ந்துவிடுங்கள் ChatGPT
// @description:te      ⚡ ఆటోమేటిక్గా మరియు మరిన్ని ChatGPT సమాధానాలను రచించండి
// @description:tg      ⚡ Идомаи автоматӣ барои иҷод кардани чанд ҷавоби ChatGPT
// @description:th      ⚡ ดำเนินการสร้างคำตอบหลาย ๆ ของ ChatGPT อัตโนมัติ
// @description:ti      ⚡ ደቂቃዎት የሚጠፋ ኮድ ብቻ በኮስታኒክስ በሚገባ ጥሩ ጥያቄዎች ይሰጣል
// @description:tk      ⚡ Tölegiňizde ChatGPT-e hasapla otomatik toplum
// @description:tn      ⚡ Koisa ha maele a ChatGPT ho ngola ho tlaleletsa
// @description:to      ⚡ Tonu ki hono fakahoko ki he fakafofonga ha nonga ai he ChatGPT
// @description:tpi     ⚡ Kontinyu genaratim planti respons bilong ChatGPT bi autometik
// @description:tr      ⚡ Otomatik olarak çoklu ChatGPT yanıtları üretmeye devam edin
// @description:uk      ⚡ Продовжуйте автоматично генерувати багато відповідей ChatGPT
// @description:ur      ⚡ ChatGPT جو جوابات خودکار طور پر تیار کرنا جاری رکھیں
// @description:uz      ⚡ Ko'plab ChatGPT javoblarni avtomatik ravishda yaratishni davom ettirish
// @description:vi      ⚡ Tiếp tục tạo ra nhiều câu trả lời ChatGPT một cách tự động
// @description:xh      ⚡ Qhubeka ukuqhuba okuqukethweyo lwezibalo eziningi zikaChatGPT
// @description:yi      ⚡ פֿאָרטזעצן ווײַטער גענערירן מיינערע אַנטוואָרטן פֿון ChatGPT אַװטאָמאַטיש
// @description:zh      ⚡ 自动继续生成多个 ChatGPT 响应
// @description:zh-CN   ⚡ 自动继续生成多个 ChatGPT 响应
// @description:zh-HK   ⚡ 自動繼續生成多個 ChatGPT 響應
// @description:zh-SG   ⚡ 自动继续生成多个 ChatGPT 响应
// @description:zh-TW   ⚡ 自動繼續生成多個 ChatGPT 響應
// @description:zu      ⚡ Terus menghasilkan imibuzo eminingi ye-ChatGPT ngokwesizulu
// @author              Adam Lui
// @namespace           https://github.com/adamlui
// @version             2024.4.4
// @license             MIT
// @match               *://chat.openai.com/*
// @icon                https://raw.githubusercontent.com/adamlui/userscripts/master/chatgpt/media/icons/openai-favicon48.png
// @icon64              https://raw.githubusercontent.com/adamlui/userscripts/master/chatgpt/media/icons/openai-favicon64.png
// @require             https://cdn.jsdelivr.net/npm/@kudoai/chatgpt.js@2.6.8/dist/chatgpt.min.js#sha256-veeaKpmLF7CZ6kxNfn8SMjD36ijLffGCzel9G4ykpPI=
// @connect             raw.githubusercontent.com
// @connect             greasyfork.org
// @grant               GM_setValue
// @grant               GM_getValue
// @grant               GM_registerMenuCommand
// @grant               GM_unregisterMenuCommand
// @grant               GM_openInTab
// @grant               GM.xmlHttpRequest
// @noframes
// @homepageURL         https://github.com/adamlui/chatgpt-auto-continue
// @supportURL          https://github.com/adamlui/chatgpt-auto-continue/issues
// @downloadURL https://update.greasyfork.org/scripts/466789/ChatGPT%20Auto-Continue%20%E2%8F%A9.user.js
// @updateURL https://update.greasyfork.org/scripts/466789/ChatGPT%20Auto-Continue%20%E2%8F%A9.meta.js
// ==/UserScript==

// NOTE: This script relies on the powerful chatgpt.js library @ https://chatgpt.js.org (c) 2023–2024 KudoAI & contributors under the MIT license.

(async () => {

    // Init config
    const config = {
        appName: 'ChatGPT Auto-Continue', appSymbol: '≫',
        keyPrefix: 'chatGPTautoContinue', userLanguage: chatgpt.getUserLanguage(),
        gitHubURL: 'https://github.com/adamlui/chatgpt-auto-continue',
        greasyForkURL: 'https://greasyfork.org/scripts/466789-chatgpt-auto-continue' }
    config.updateURL = config.greasyForkURL.replace('https://', 'https://update.')
        .replace(/(\d+)-?([a-zA-Z-]*)$/, (_, id, name) => `${ id }/${ !name ? 'script' : name }.meta.js`)
    config.supportURL = config.gitHubURL + '/issues/new'
    config.assetHostURL = config.gitHubURL.replace('github.com', 'raw.githubusercontent.com') + '/main/'
    loadSetting('notifDisabled')

    // Define messages
    const msgsLoaded = new Promise(resolve => {
        const msgHostDir = config.assetHostURL + 'greasemonkey/_locales/',
              msgLocaleDir = ( config.userLanguage ? config.userLanguage.replace('-', '_') : 'en' ) + '/'
        let msgHref = msgHostDir + msgLocaleDir + 'messages.json', msgXHRtries = 0
        GM.xmlHttpRequest({ method: 'GET', url: msgHref, onload: onLoad })
        function onLoad(response) {
            try { // to return localized messages.json
                const messages = new Proxy(JSON.parse(response.responseText), {
                    get(target, prop) { // remove need to ref nested keys
                        if (typeof target[prop] == 'object' && target[prop] !== null && 'message' in target[prop]) {
                            return target[prop].message
                }}}) ; resolve(messages)
            } catch (err) { // if 404
                msgXHRtries++ ; if (msgXHRtries === 3) return // try up to 3X (original/region-stripped/EN) only
                msgHref = config.userLanguage.includes('-') && msgXHRtries === 1 ? // if regional lang on 1st try...
                    msgHref.replace(/([^_]*)_[^/]*(\/.*)/, '$1$2') // ...strip region before retrying
                        : ( msgHostDir + 'en/messages.json' ) // else use default English messages
                GM.xmlHttpRequest({ method: 'GET', url: msgHref, onload: onLoad })
            }
        }
    }) ; const messages = await msgsLoaded

    // Init/register menu
    let menuIDs = [], state = { symbol: ['✔️', '❌'], word: ['ON', 'OFF'],
                                separator: getUserscriptManager() == 'Tampermonkey' ? ' — ' : ': ' }
    registerMenu() // create browser toolbar menu

    // Stylize alerts
    if (!document.getElementById('chatgpt-alert-override-style')) {
        const chatgptAlertStyle = document.createElement('style')
        chatgptAlertStyle.id = 'chatgpt-alert-override-style'
        chatgptAlertStyle.innerText = '.chatgpt-modal button {'
                + 'font-size: 0.77rem ; text-transform: uppercase ;'
                + 'border-radius: 0 !important ; padding: 5px !important ; min-width: 102px }'
            + '.modal-buttons { margin-left: -13px !important }'
        document.head.append(chatgptAlertStyle)
    }

    // Observe DOM for need to continue generating response
    await chatgpt.isLoaded()
    const continueObserver = new MutationObserver(mutations => mutations.forEach(mutation => {
        if (mutation.attributeName == 'style' && mutation.target.style.opacity == '1') {
            chatgpt.getContinueGeneratingButton().click()
            notify(messages.notif_chatAutoContinued || 'Chat Auto-Continued', 'bottom-right')
    }}))
    continueObserver.observe(document.querySelector('main'), { attributes: true, subtree: true })

    // Notify of status on load
    if (!config.notifDisabled) notify(( messages.mode_autoContinue || 'Auto-Continue' ) + ': ON')

    // Define SCRIPT functions

    function loadSetting(...keys) { keys.forEach(key => config[key] = GM_getValue(config.keyPrefix + '_' + key, false)) }
    function saveSetting(key, value) { GM_setValue(config.keyPrefix + '_' + key, value) ; config[key] = value }
    function safeWindowOpen(url) { window.open(url, '_blank', 'noopener') } // to prevent backdoor vulnerabilities
    function getUserscriptManager() { try { return GM_info.scriptHandler } catch (err) { return 'other' }}

    // Define MENU functions

    function registerMenu() {
        menuIDs = [] // empty to store newly registered cmds for removal while preserving order

        // Add command to hide/show notifications on load
        const mnLabel = state.symbol[+config.notifDisabled] + ' '
                      + ( messages.menuLabel_modeNotifs || 'Mode Notifications' )
                      + state.separator + state.word[+config.notifDisabled]
        menuIDs.push(GM_registerMenuCommand(mnLabel, function() {
            saveSetting('notifDisabled', !config.notifDisabled)
            notify(messages.menuLabel_modeNotifs + ': ' + state.word[+config.notifDisabled])
            for (const id of menuIDs) { GM_unregisterMenuCommand(id) } registerMenu() // refresh menu
        }))

        // Add command to launch About modal
        const aboutLabel = `💡 ${ messages.menuLabel_about || 'About' } ${ messages.appName || config.appName }`
        menuIDs.push(GM_registerMenuCommand(aboutLabel, launchAboutModal))
    }

    function launchAboutModal() {

        // Show alert
        const chatgptJSver = (/chatgpt-([\d.]+)\.min/.exec(GM_info.script.header) || [null, ''])[1],
              headingStyle = 'font-size: 1.15rem',
              pStyle = 'position: relative ; left: 3px',
              pBrStyle = 'position: relative ; left: 4px ',
              aStyle = 'color: ' + ( chatgpt.isDarkMode() ? '#c67afb' : '#8325c4' ) // purple
        const aboutAlertID = alert(
            messages.appName || config.appName, // title
            `<span style="${ headingStyle }"><b>🏷️ <i>${ messages.about_version || 'Version' }</i></b>: </span>`
                + `<span style="${ pStyle }">${ GM_info.script.version }</span>\n`
            + `<span style="${ headingStyle }"><b>⚡ <i>${ messages.about_poweredBy || 'Powered by' }</i></b>: </span>`
                + `<span style="${ pStyle }"><a style="${ aStyle }" href="https://chatgpt.js.org" target="_blank" rel="noopener">`
                + 'chatgpt.js</a>' + ( chatgptJSver ? ( ' v' + chatgptJSver ) : '' ) + '</span>\n'
            + `<span style="${ headingStyle }"><b>📜 <i>${ messages.about_sourceCode || 'Source code' }</i></b>:</span>\n`
                + `<span style="${ pBrStyle }"><a href="${ config.gitHubURL }" target="_blank" rel="nopener">`
                + config.gitHubURL + '</a></span>',
            [ // buttons
                function checkForUpdates() { updateCheck() },
                function getSupport() { safeWindowOpen(config.supportURL) },
                function leaveAReview() { safeWindowOpen(config.greasyForkURL + '/feedback#post-discussion') },
                function moreChatGPTapps() { safeWindowOpen('https://github.com/adamlui/chatgpt-apps') }
            ], '', 478 // set width
        )

        // Re-format buttons to include emoji + localized label + hide Dismiss button
        for (const button of document.getElementById(aboutAlertID).querySelectorAll('button')) {
            if (/updates/i.test(button.textContent)) button.textContent = (
                '🚀 ' + ( messages.buttonLabel_updateCheck || 'Check for Updates' ))
            else if (/support/i.test(button.textContent)) button.textContent = (
                '🧠 ' + ( messages.buttonLabel_getSupport || 'Get Support' ))
            else if (/review/i.test(button.textContent)) button.textContent = (
                '⭐ ' + ( messages.buttonLabel_leaveReview || 'Leave a Review' ))
            else if (/apps/i.test(button.textContent)) button.textContent = (
                '🤖 ' + ( messages.buttonLabel_moreApps || 'More ChatGPT Apps' ))
            else button.style.display = 'none' // hide Dismiss button
        }
    }

    function updateCheck() {

        // Fetch latest meta
        const currentVer = GM_info.script.version
        GM.xmlHttpRequest({
            method: 'GET', url: config.updateURL + '?t=' + Date.now(),
            headers: { 'Cache-Control': 'no-cache' },
            onload: response => { const updateAlertWidth = 377

                // Compare versions
                const latestVer = /@version +(.*)/.exec(response.responseText)[1]
                for (let i = 0 ; i < 4 ; i++) { // loop thru subver's
                    const currentSubVer = parseInt(currentVer.split('.')[i], 10) || 0,
                          latestSubVer = parseInt(latestVer.split('.')[i], 10) || 0
                    if (currentSubVer > latestSubVer) break // out of comparison since not outdated
                    else if (latestSubVer > currentSubVer) { // if outdated

                        // Alert to update
                        const updateAlertID = alert(( messages.alert_updateAvail || 'Update available' ) + '! 🚀', // title
                            ( messages.alert_newerVer || 'An update to' ) + ' ' // msg
                                + ( messages.appName || config.appName ) + ' '
                                + `(v ${ latestVer }) ${ messages.alert_isAvail || 'is available' }!   `
                                + '<a target="_blank" rel="noopener" style="font-size: 0.7rem" '
                                    + 'href="' + config.gitHubURL + '/commits/main/greasemonkey/'
                                    + config.updateURL.replace(/.*\/(.*)meta\.js/, '$1user.js') + '" '
                                    + `> ${ messages.link_viewChanges || 'View changes' }</a>`,
                            function update() { // button
                                GM_openInTab(config.updateURL.replace('meta.js', 'user.js') + '?t=' + Date.now(),
                                    { active: true, insert: true } // focus, make adjacent
                                ).onclose = () => location.reload() },
                            '', updateAlertWidth
                        )

                        // Localize button labels if needed
                        if (!config.userLanguage.startsWith('en')) {
                            const updateAlert = document.querySelector(`[id="${ updateAlertID }"]`),
                                  updateBtns = updateAlert.querySelectorAll('button')
                            updateBtns[1].textContent = messages.buttonLabel_update || 'Update'
                            updateBtns[0].textContent = messages.buttonLabel_dismiss || 'Dismiss'
                        }

                        return
                }}

                // Alert to no update, return to About alert
                alert(( messages.alert_upToDate || 'Up-to-date' ) + '!', // title
                    `${ messages.appName || 'ChatGPT Widescreen Mode' } (v${ currentVer }) ` // msg
                        + ( messages.alert_isUpToDate || 'is up-to-date' ) + '!',
                    '', '', updateAlertWidth
                )
                launchAboutModal()
    }})}

    // Define FEEDBACK functions

    function notify(msg, position = '', notifDuration = '', shadow = '') {
        chatgpt.notify(`${ config.appSymbol } ${ msg }`, position, notifDuration, shadow || chatgpt.isDarkMode() ? '' : 'shadow') }

    function alert(title = '', msg = '', btns = '', checkbox = '', width = '') {
        return chatgpt.alert(`${ config.appSymbol } ${ title }`, msg, btns, checkbox, width )}

})()
","requires":[{"meta":{"name":"chatgpt.min.js","url":"https://cdn.jsdelivr.net/npm/@kudoai/chatgpt.js@2.6.8/dist/chatgpt.min.js#sha256-veeaKpmLF7CZ6kxNfn8SMjD36ijLffGCzel9G4ykpPI=","sri":{"type":"sha256","value":"bde79a2a998b17b099ea4c4d7e7f123230f7ea28cb7df182cde97d1b8ca4a4f2"},"ts":1713949253349,"mimetype":"text/javascript"},"source":"const h={assets:"https://raw.githubusercontent.com/KudoAI/chatgpt.js/main",openAI:{session:"https://chat.openai.com/api/auth/session",chats:"https://chat.openai.com/backend-api/conversations",chat:"https://chat.openai.com/backend-api/conversation",share_create:"https://chat.openai.com/backend-api/share/create",share:"https://chat.openai.com/backend-api/share",instructions:"https://chat.openai.com/backend-api/user_system_messages"}},e=(localStorage.alertQueue=JSON.stringify([]),localStorage.notifyProps=JSON.stringify({queue:{topRight:[],bottomRight:[],bottomLeft:[],topLeft:[]},lastNthAudio:0}),navigator.userAgent.includes("Chrome")&&"undefined"!=typeof unsafeWindow),t=navigator.userAgent.includes("Firefox")&&"undefined"!=typeof unsafeWindow,y=t&&"Tampermonkey"==GM_info.scriptHandler;let x;e||t&&!y||(async()=>{var e=new Promise(o=>{const r=navigator.languages[0]||navigator.language||navigator.browserLanguage||navigator.systemLanguage||navigator.userLanguage||"",s=h.assets+"/data/_locales/",e=(r?r.replace("-","_"):"en")+"/";let a=s+e+"messages.json",i=0;!function t(){const n=new XMLHttpRequest;n.open("GET",a),n.send(),n.onload=()=>{try{var e=new Proxy(JSON.parse(n.responseText),{get(e,t){if("object"==typeof e[t]&&null!==e[t]&&"message"in e[t])return e[t].message}});o(e)}catch(e){3===++i&&o({}),a=r.includes("-")&&1===i?a.replace(/([^_]*)_[^/]*(\/.*)/,"$1$2"):s+"en/messages.json",t()}},n.onerror=()=>{o({})}}()});x=await e})();const C={openAIaccessToken:{},actAs:function(a){return new Promise((o,r)=>{const s=new XMLHttpRequest;s.open("GET","https://raw.githubusercontent.com/KudoAI/chat-prompts/main/dist/personas.min.json",!0),s.send(),s.onload=()=>{if(200!==s.status)return r("🤖 chatgpt.js >> Request failed. Cannot retrieve prompts data.");var e=JSON.parse(s.responseText).personas;if(a){var t=e.find(e=>e.title.toLowerCase()==a.toLowerCase());if(!t)return r(`🤖 chatgpt.js >> Persona '${a}' was not found!`);C.send(t.prompt,"click"),console.info(`Loading ${a} persona...`),C.isIdle().then(()=>{console.info("Persona activated!")})}else{console.log("\n%c🤖 chatgpt.js personas\n","font-family: sans-serif ; font-size: xxx-large ; font-weight: bold");for(const n of e)console.log("%c"+n.title,"font-family: monospace ; font-size: larger ;")}return o()}})},activateDarkMode:function(){document.documentElement.classList.replace("light","dark"),document.documentElement.style.colorScheme="dark",localStorage.setItem("theme","dark")},activateLightMode:function(){document.documentElement.classList.replace("dark","light"),document.documentElement.style.colorScheme="light",localStorage.setItem("theme","light")},alert:function(e,t,n,o,r){const s=C.isDarkMode()?"dark":"light",a=C.browser.isMobile(),i=document.createElement("div"),c=(i.id=Math.floor(1e6*C.randomFloat())+Date.now(),i.classList.add("chatgpt-modal"),document.createElement("div")),l=document.createElement("h2"),u=document.createElement("p");var d=20231203;let f=document.querySelector("#chatgpt-modal-style");(!f||parseInt(f.getAttribute("last-updated"),10)<d)&&(f||((f=document.createElement("style")).id="chatgpt-modal-style",f.setAttribute("last-updated",d.toString()),document.head.append(f)),f.innerText=".chatgpt-modal {position: fixed ; top: 0 ; left: 0 ; width: 100% ; height: 100% ;background-color: rgba(67, 70, 72, 0) ;transition: background-color 0.05s ease ;display: flex ; justify-content: center ; align-items: center ; z-index: 9999 }.chatgpt-modal > div {opacity: 0 ; transform: translateX(-2px) translateY(5px) ; max-width: 75vw ; word-wrap: break-word ;transition: opacity 0.1s cubic-bezier(.165,.84,.44,1), transform 0.2s cubic-bezier(.165,.84,.44,1) ;"+`background-color: ${"dark"==s?"black":"white"} ;`+("dark"!=s?"border: 1px solid rgba(0, 0, 0, 0.3) ;":"")+"padding: 20px ; margin: 12px 23px ; border-radius: 15px ; box-shadow: 0 30px 60px rgba(0, 0, 0, .12) ; -webkit-user-select: none ; -moz-user-select: none ; -ms-user-select: none ; user-select: none ; }.chatgpt-modal h2 { margin-bottom: 9px }"+`.chatgpt-modal a { color: ${"dark"==s?"#00cfff":"#1e9ebb"}}`+".chatgpt-modal.animated > div { opacity: 1 ; transform: translateX(0) translateY(0) }@keyframes alert-zoom-fade-out { 0% { opacity: 1 ; transform: scale(1) }50% { opacity: 0.25 ; transform: scale(1.05) }100% { opacity: 0 ; transform: scale(1.35) }}.modal-buttons { display: flex ; justify-content: flex-end ; margin: 20px -5px -3px 0 ;"+(a?"flex-direction: column-reverse":"")+"}.chatgpt-modal button {"+`margin-left: ${a?0:10}px ; padding: ${a?15:4}px 18px ; border-radius: 15px ;`+(a?"margin-top: 5px ; margin-bottom: 3px ;":"")+`border: 1px solid ${"dark"==s?"white":"black"}}`+".primary-modal-btn {"+`border: 1px solid ${"dark"==s?"white":"black"} ;`+`background: ${"dark"==s?"white":"black"} ;`+`color: ${"dark"==s?"black":"white"}}`+".chatgpt-modal button:hover { color: #3d5d71 ; border-color: #6d9cb9 ;background-color: "+("dark"==s?"#00cfff":"#9cdaff")+";box-shadow: 2px 1px "+("dark"==s?"54px #00cfff":"30px #9cdaff")+"}.modal-close-btn {cursor: pointer ; width: 20px ; height: 20px ; float: right ; position: relative ; right: -2px }.modal-close-btn svg { margin: 5px 5px }"+`.modal-close-btn:hover { background-color: #f2f2f2${"dark"==s?"00":""}}`+".chatgpt-modal .checkbox-group { display: flex ; margin-top: -18px }.chatgpt-modal .checkbox-group label {font-size: .7rem ; margin: -.04rem 0 0px .3rem ;"+`color: ${"dark"==s?"#e1e1e1":"#1e1e1e"}}`+'.chatgpt-modal input[type="checkbox"] { transform: scale(0.7) ;'+`border: 1px solid ${"dark"==s?"white":"black"}}`+'.chatgpt-modal input[type="checkbox"]:checked {'+`border: 1px solid ${"dark"==s?"white":"black"} ;`+'background-color: black ; position: inherit }.chatgpt-modal input[type="checkbox"]:focus { outline: none ; box-shadow: none }'),l.innerText=e||"",u.innerText=t||"",this.renderHTML(u);const g=document.createElement("div");g.classList.add("modal-buttons"),n&&(n=Array.isArray(n)?n:[n]).forEach(e=>{var t=document.createElement("button");t.textContent=e.name.replace(/[_-]\w/g,e=>e.slice(1).toUpperCase()).replace(/([A-Z])/g," $1").replace(/^\w/,e=>e.toUpperCase()),t.addEventListener("click",()=>{v(),e()}),g.insertBefore(t,g.firstChild)});d=document.createElement("button"),d.textContent=n?"Dismiss":"OK",g.insertBefore(d,g.firstChild),g.lastChild.classList.add("primary-modal-btn"),e=document.createElement("div");if(o){e.classList.add("checkbox-group");const b=o,w=document.createElement("input");w.type="checkbox",w.addEventListener("change",b);t=document.createElement("label");t.addEventListener("click",()=>{w.checked=!w.checked,b()}),t.textContent=b.name.charAt(0).toUpperCase()+b.name.slice(1).replace(/([A-Z])/g,(e,t)=>" "+t.toLowerCase()).replace(/\b(\w+)nt\b/gi,"$1n't").trim(),e.append(w),e.append(t)}n=document.createElement("div"),n.title=x?.tooltip_close||"Close",n.classList.add("modal-close-btn"),o=document.createElementNS("http://www.w3.org/2000/svg","svg"),o.setAttribute("height","10px"),o.setAttribute("viewBox","0 0 14 14"),o.setAttribute("fill","none"),t=document.createElementNS("http://www.w3.org/2000/svg","path");t.setAttribute("fill-rule","evenodd"),t.setAttribute("clip-rule","evenodd"),t.setAttribute("fill",C.isDarkMode()?"white":"black"),t.setAttribute("d","M13.7071 1.70711C14.0976 1.31658 14.0976 0.683417 13.7071 0.292893C13.3166 -0.0976312 12.6834 -0.0976312 12.2929 0.292893L7 5.58579L1.70711 0.292893C1.31658 -0.0976312 0.683417 -0.0976312 0.292893 0.292893C-0.0976312 0.683417 -0.0976312 1.31658 0.292893 1.70711L5.58579 7L0.292893 12.2929C-0.0976312 12.6834 -0.0976312 13.3166 0.292893 13.7071C0.683417 14.0976 1.31658 14.0976 1.70711 13.7071L7 8.41421L12.2929 13.7071C12.6834 14.0976 13.3166 14.0976 13.7071 13.7071C14.0976 13.3166 14.0976 12.6834 13.7071 12.2929L8.41421 7L13.7071 1.70711Z"),o.append(t),n.append(o),[n,l,u,g,e].forEach(e=>{c.append(e)}),c.style.width=`${r||458}px`,i.append(c),document.body.append(i);let p=JSON.parse(localStorage.alertQueue);p.push(i.id),localStorage.alertQueue=JSON.stringify(p),i.style.display="none",1===p.length&&(i.style.display="",setTimeout(()=>{i.style.backgroundColor=`rgba(67, 70, 72, ${"dark"==s?.62:0})`,i.classList.add("animated")},100));const m=e=>{(e.target==e.currentTarget||e.target instanceof SVGPathElement)&&v()},h=e=>{if([13,27].includes(e.keyCode))for(const n of p){var t=document.getElementById(n);if(t&&"none"!==t.style.display)return void(27===e.keyCode?v():13===e.keyCode&&(t=t.querySelector(".modal-buttons").lastChild)&&(t.click(),e.preventDefault()))}},y=[i,n,o,d],v=(y.forEach(e=>{e.addEventListener("click",m)}),document.addEventListener("keydown",h),()=>{i.style.backgroundColor="transparent",c.style.animation="alert-zoom-fade-out 0.075s ease-out",setTimeout(()=>{if(i.remove(),(p=JSON.parse(localStorage.alertQueue)).shift(),localStorage.alertQueue=JSON.stringify(p),y.forEach(e=>{e.removeEventListener("click",m)}),document.removeEventListener("keydown",h),0<p.length){const e=document.getElementById(p[0]);setTimeout(()=>{e.style.display="",setTimeout(()=>{e.classList.add("animated")},100)},500)}},50)});return i.id},askAndGetReply:async function(e){return C.send(e),await C.isIdle(),C.getChatData("active","msg","chatgpt","latest")},autoRefresh:{activate:function(e){if(this.isActive)console.log("↻ ChatGPT >> ["+C.autoRefresh.nowTimeStamp()+"] Auto refresh already active!");else{const n=this,o=(this.toggle.refreshFrame(),t=>{var e=Math.max(2,Math.floor(21*C.randomFloat()-10));n.isActive=setTimeout(()=>{var e=document.querySelector('script[src*="_ssgManifest.js"]');document.querySelector("#refresh-frame").src=e.src+"?"+Date.now(),console.log("↻ ChatGPT >> ["+n.nowTimeStamp()+"] ChatGPT session refreshed"),o(t)},1e3*(t+e))});o(e?parseInt(e,10):30),console.log("↻ ChatGPT >> ["+C.autoRefresh.nowTimeStamp()+"] Auto refresh activated"),navigator.userAgent.includes("Chrome")&&void 0!==document.hidden&&document.addEventListener("visibilitychange",this.toggle.beacons)}},deactivate:function(){this.isActive?(this.toggle.refreshFrame(),document.removeEventListener("visibilitychange",this.toggle.beacons),clearTimeout(this.isActive),this.isActive=null,console.log("↻ ChatGPT >> ["+C.autoRefresh.nowTimeStamp()+"] Auto refresh de-activated")):console.log("↻ ChatGPT >> ["+C.autoRefresh.nowTimeStamp()+"] Auto refresh already inactive!")},nowTimeStamp:function(){var e=new Date,t=e.getHours()%12||12;let n=e.getMinutes(),o=e.getSeconds();n<10&&(n="0"+n),o<10&&(o="0"+o);e=e.getHours()<12?"AM":"PM";return t+":"+n+":"+o+" "+e},toggle:{beacons:function(){C.autoRefresh.beaconID?(clearInterval(C.autoRefresh.beaconID),C.autoRefresh.beaconID=null,console.log("↻ ChatGPT >> ["+C.autoRefresh.nowTimeStamp()+"] Beacons de-activated")):(C.autoRefresh.beaconID=setInterval(()=>{navigator.sendBeacon("https://httpbin.org/post",new Uint8Array),console.log("↻ ChatGPT >> ["+C.autoRefresh.nowTimeStamp()+"] Beacon sent")},9e4),console.log("↻ ChatGPT >> ["+C.autoRefresh.nowTimeStamp()+"] Beacons activated"))},refreshFrame:function(){let e=document.querySelector("#refresh-frame");e?e.remove():(e=Object.assign(document.createElement("iframe"),{id:"refresh-frame",style:"display: none"}),document.head.prepend(e))}}},browser:{isLightMode:function(){return window.matchMedia?.("(prefers-color-scheme: light)")?.matches},isDarkMode:function(){return window.matchMedia?.("(prefers-color-scheme: dark)")?.matches},isChromium:function(){return navigator.userAgent.includes("Chrome")},isFirefox:function(){return navigator.userAgent.includes("Firefox")},isFullScreen:function(){var e=navigator.userAgent;return e.includes("Chrome")?window.matchMedia("(display-mode: fullscreen)").matches:e.includes("Firefox")?window.fullScreen:/MSIE|rv:/.test(e)?document.msFullscreenElement:document.webkitIsFullScreen},isMobile:function(){return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)}},clearChats:async function(e){var t=["api","dom"];if((e=(e||"dom").trim().toLowerCase())&&!t.includes(e))return console.log(`Method argument must be one of: [${t}]`);if("dom"!=e)return new Promise((n,o)=>{C.getAccessToken().then(e=>{const t=new XMLHttpRequest;t.open("PATCH",h.openAI.chats,!0),t.setRequestHeader("Content-Type","application/json"),t.setRequestHeader("Authorization","Bearer "+e),t.onload=()=>{if(200!==t.status)return o("🤖 chatgpt.js >> Request failed. Cannot clear chats.");console.info("Chats successfully cleared"),n()},t.send(JSON.stringify({is_visible:!1}))}).catch(o)});{try{await C.getChatData()}catch{return}C.menu.open(),setTimeout(()=>{for(const e of document.querySelectorAll('a[role="menuitem"]')||[])if(/settings/i.test(e.text)){e.click();break}setTimeout(()=>{for(const e of document.querySelectorAll("[id*=radix] button"))if(/^clear/i.test(e.textContent)){e.click();break}setTimeout(()=>{document.querySelector("[id*=radix] button").click(),setTimeout(()=>{n();try{document.querySelector("#prompt-textarea").focus()}catch(e){}},10)},10)},333)},10);const n=()=>{document.querySelector("div[id*=radix] button").click()}}},code:{execute:async function(e){return e?"string"!=typeof e?console.error("Code argument must be a string!"):(C.send("Display the output as if you were terminal:\n\n"+e),console.info("Executing code..."),await C.isIdle(),C.code.extract(await C.getChatData("active","msg","chatgpt","latest"))):console.error("Code argument not supplied. Pass some code!")},extract:function(e){var t=e.match(/(?<=```.*\n)[\s\S]*?(?=```)/g);return t?t[t.length-1]:e},minify:async function(e){return e?"string"!=typeof e?console.error("Code argument must be a string!"):(C.send("Minify the following code:\n\n"+e),console.info("Minifying code..."),await C.isIdle(),C.code.extract(await C.getChatData("active","msg","chatgpt","latest"))):console.error("Code argument not supplied. Pass some code!")},obfuscate:async function(e){return e?"string"!=typeof e?console.error("Code argument must be a string!"):(C.send("Obfuscate the following code:\n\n"+e),console.info("Obfuscating code..."),await C.isIdle(),C.code.extract(await C.getChatData("active","msg","chatgpt","latest"))):console.error("Code argument not supplied. Pass some code!")},refactor:async function(e,t){if(!e)return console.error("Code (1st) argument not supplied. Pass some code!");for(let e=0;e<arguments.length;e++)if("string"!=typeof arguments[e])return console.error(`Argument ${e+1} must be a string.`);return C.send("Refactor the following code for "+(t||"brevity")+":\n\n"+e),console.info("Refactoring code..."),await C.isIdle(),C.code.extract(await C.getChatData("active","msg","chatgpt","latest"))},review:async function(e){return e?"string"!=typeof e?console.error("Code argument must be a string!"):(C.send("Review the following code for me:\n\n"+e),console.info("Reviewing code..."),await C.isIdle(),C.getChatData("active","msg","chatgpt","latest")):console.error("Code argument not supplied. Pass some code!")},unminify:async function(e){return e?"string"!=typeof e?console.error("Code argument must be a string!"):(C.send("Unminify the following code.:\n\n"+e),console.info("Unminifying code..."),await C.isIdle(),C.code.extract(await C.getChatData("active","msg","chatgpt","latest"))):console.error("Code argument not supplied. Pass some code!")},write:async function(e,t){if(!e)return console.error("Prompt (1st) argument not supplied. Pass a prompt!");if(!t)return console.error("outputLang (2nd) argument not supplied. Pass a language!");for(let e=0;e<arguments.length;e++)if("string"!=typeof arguments[e])return console.error(`Argument ${e+1} must be a string.`);return C.send(e+"\n\nWrite this as code in "+t),console.info("Writing code..."),await C.isIdle(),C.code.extract(await C.getChatData("active","msg","chatgpt","latest"))}},detectLanguage:async function(e){return e?"string"!=typeof e?console.error("Text argument must be a string!"):(C.send("Detect the language of the following text:\n\n"+e+"\n\nOnly respond with the name of the language"),console.info("Reviewing text..."),await C.isIdle(),C.getChatData("active","msg","chatgpt","latest")):console.error("Text argument not supplied. Pass some text!")},executeCode:function(){C.code.execute()},exportChat:async function(e,t){e=e?Number.isInteger(e)||/^\d+$/.test(e)?parseInt(e,10):e:"active",t=t.toLowerCase()||"html",console.info("Generating transcript...");let o="",n;if(/te?xt/.test(t)){var r=new Date,s=r.getDate().toString().padStart(2,"0"),a=(r.getMonth()+1).toString().padStart(2,"0"),i=r.getFullYear(),c=r.getHours().toString().padStart(2,"0"),r=r.getMinutes().toString().padStart(2,"0");if(n=`ChatGPT_${s}-${a}-${i}_${c}-${r}.txt`,"active"==e&&/\/\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$/.test(window.location.href)){s=document.querySelectorAll("main > div > div > div > div > div > div[class*=group]");if(0===s.length)return console.error("Chat is empty!");const l=[];let n=!0;s.forEach(e=>{var t=n?"USER":"CHATGPT",e=(n=!n,Array.from(e.childNodes).map(e=>e.innerText).join("\n\n").replace("Copy code",""));l.push(t+": "+e)}),o=l.join("\n\n")}else for(const u of await C.getChatData(e,"msg","both","all"))o=(o+=`USER: ${u.user}

`)+`CHATGPT: ${u.chatgpt}

`}else{a=await(await fetch(await C.shareChat(e))).text(),i=(new DOMParser).parseFromString(a,"text/html");n=i.querySelector("title").textContent+".html",i.querySelectorAll('link[rel="stylesheet"]').forEach(e=>{var t=e.getAttribute("href");t?.startsWith("/")&&e.setAttribute("href","https://chat.openai.com"+t)}),o=(new XMLSerializer).serializeToString(i)}if(console.info(`Exporting transcript as ${t.toUpperCase()}...`),"pdf"==t){o=o.replace(/<svg.*?<\/svg>/g,e=>{return`<img src="${"data:image/svg+xml,"+encodeURIComponent(e)}">`});const d=window.open("","","toolbar=0, location=0, menubar=0, height=600, width=800");d.document.write(o),setTimeout(()=>{d.print({toPDF:!0})},100)}else{"md"==t&&(c=/<.*(?:<h1(.|\n)*?href=".*?continue[^"]*".*?\/a>.*?)<[^/]/.exec(o)[1],o=c||o,n=n.replace(".html",".md"));r=new Blob([o],{type:"text/"+("html"==t?"html":"md"==t?"markdown":"plain")}),s=document.createElement("a"),e=URL.createObjectURL(r);s.href=e,s.download=n,document.body.append(s),s.click(),document.body.removeChild(s),URL.revokeObjectURL(e)}},extractCode:function(){C.code.extract()},generateRandomIP:function(){var e=Array.from({length:4},()=>Math.floor(256*C.randomFloat())).join(".");return console.info("IP generated: "+e),e},get:function(e,t=""){if("string"!=typeof e||"string"!=typeof t)throw new TypeError("Invalid arguments. Both arguments must be strings.");if(!a.includes(e.toLowerCase()))throw new Error("Invalid targetType: "+e+". Valid values are: "+JSON.stringify(a));var n=[],o=new RegExp("^get(.*)"+e+"$","i");for(const s in C)"function"==typeof C[s]&&o.test(s)&&n.push(s.replace(o,"$1").toLowerCase());if(!n.includes(t.toLowerCase()))throw new Error("Invalid targetName: "+t+". "+(0<n.length?"Valid values are: "+JSON.stringify(n):"targetType "+e.toLowerCase()+" does not require additional options."));const r=("get"+t+e).toLowerCase();return this[Object.keys(this).find(e=>e.toLowerCase()==r)]()},getAccessToken:function(){return new Promise((e,t)=>{if(0<Object.keys(C.openAIaccessToken).length&&0<=Date.parse(C.openAIaccessToken.expireDate)-Date.parse(new Date))return e(C.openAIaccessToken.token);const n=new XMLHttpRequest;n.open("GET",h.openAI.session,!0),n.setRequestHeader("Content-Type","application/json"),n.onload=()=>200!==n.status?t("🤖 chatgpt.js >> Request failed. Cannot retrieve access token."):(console.info("Token expiration: "+new Date(JSON.parse(n.responseText).expires).toLocaleString().replace(","," at")),C.openAIaccessToken={token:JSON.parse(n.responseText).accessToken,expireDate:JSON.parse(n.responseText).expires},e(C.openAIaccessToken.token)),n.send()})},getAccountDetails:function(...a){var e=["email","id","image","name","picture"];for(const t of a=arguments[0]?Array.isArray(arguments[0])?arguments[0]:Array.from(arguments):e)if(!e.includes(t))return console.error("Invalid detail arg '"+t+"' supplied. Valid details are:\n                    ["+e+"]");return new Promise((o,r)=>{const s=new XMLHttpRequest;s.open("GET",h.openAI.session,!0),s.setRequestHeader("Content-Type","application/json"),s.onload=()=>{if(200!==s.status)return r("🤖 chatgpt.js >> Request failed. Cannot retrieve account details.");var e=JSON.parse(s.responseText).user,t={};for(const n of a)t[n]=e[n];return o(t)},s.send()})},getChatBox:function(){return document.getElementById("prompt-textarea")},getChatData:function(u=1,o="all",g="all",p="all"){var e=["all","id","title","create_time","update_time","msg"],t=["all","both","user","chatgpt"];u=u?Number.isInteger(u)||/^\d+$/.test(u)?0===parseInt(u,10)?0:parseInt(u,10)-1:u:"active",o=["all",""].includes(o)?e.filter(e=>/^(?!all$|msg$).*/.test(e)):Array.isArray(o)?o:[o],g=g?t.includes(g)?g:"invalid":"all",p=Number.isInteger(p)||/^\d+$/.test(p)?0===parseInt(p,10)?0:parseInt(p,10)-1:["all","latest"].includes(p.toLowerCase())?p.toLowerCase():p?"invalid":"all";for(const n of o)if(!e.includes(n))return console.error("Invalid detail arg '"+n+"' passed. Valid details are:\n                    ["+e+"]");if("invalid"==g)return console.error("Invalid sender arg passed. Valid senders are:\n                    ["+t+"]");if("invalid"==p)return console.error("Invalid msgToGet arg passed. Valid msg's to get are:\n                    [ 'all' | 'latest' | index of msg to get ]");const r=(e,c)=>{const l=/\w{8}-\w{4}-\w{4}-\w{4}-\w{12}/;return new Promise((t,a)=>{const i=new XMLHttpRequest;i.open("GET",h.openAI.chats,!0),i.setRequestHeader("Content-Type","application/json"),i.setRequestHeader("Authorization","Bearer "+e),i.onload=()=>{if(200!==i.status)return a("🤖 chatgpt.js >> Request failed. Cannot retrieve chat details.");var n=JSON.parse(i.responseText).items;if(n.length<=0)return a("🤖 chatgpt.js >> Chat list is empty.");var o={};if(Number.isInteger(u)||"latest"==u||"active"==u&&!new RegExp("/"+l.source+"$").test(window.location.href)){if((u=Number.isInteger(u)?u:0)>n.length)return a("🤖 chatgpt.js >> Chat with index "+(u+1)+" is out of bounds. Only "+n.length+" chats exist!");for(const e of c)o[e]=n[u][e]}else{var r="active"==u||new RegExp("^"+l.source+"$").test(u)?"id":"title";"active"==u&&(u=l.exec(window.location.href)[0]);let e,t;for(e=0;e<n.length;e++)if(n[e][r]==u){t=!0;break}if(!t)return a("🤖 chatgpt.js >> No chat with "+r+" = "+u+" found.");for(const s of c)o[s]=n[e][s]}return t(o)},i.send()})};return new Promise(n=>{C.getAccessToken().then(e=>{var t;o.includes("msg")?(t=e,new Promise((u,d)=>{const f=new XMLHttpRequest;r(t,["id"]).then(e=>{f.open("GET",h.openAI.chat+"/"+e.id,!0),f.setRequestHeader("Content-Type","application/json"),f.setRequestHeader("Authorization","Bearer "+t),f.onload=()=>{if(200!==f.status)return d("🤖 chatgpt.js >> Request failed. Cannot retrieve chat messages.");var t=JSON.parse(f.responseText).mapping,n=[],o=[],r=[];for(const e in t)"message"in t[e]&&"user"==t[e].message.author.role&&n.push({id:t[e].id,msg:t[e].message});if(n.sort((e,t)=>e.msg.create_time-t.msg.create_time),parseInt(p,10)+1>n.length)return d("🤖 chatgpt.js >> Message/response with index "+(p+1)+" is out of bounds. Only "+n.length+" messages/responses exist!");for(const s of n){let e=[];for(const a in t)"message"in t[a]&&"assistant"==t[a].message.author.role&&t[a].parent==s.id&&e.push(t[a].message);e.sort((e,t)=>e.create_time-t.create_time),e=1===(e=e.map(e=>{switch(e.content.content_type){case"code":return e.content.text;case"text":return e.content.parts[0];default:return}})).length?e[0]:e,o.push(e)}if("user"==g)for(const i in n)r.push(n[i].msg.content.parts[0]);else if("chatgpt"==g)for(const c of o)r.push("latest"==p?o[o.length-1]:c);else{let e=0;for(const l in n)r.push({user:n[l].msg.content.parts[0],chatgpt:"latest"==p?o[e][o[e].length-1]:o[e]}),e++}return u("all"==p?r:"latest"==p?r[r.length-1]:r[p])},f.send()})}).then(e=>n(e))):r(e,o).then(e=>n(e))})})},getChatInput:function(){return C.getChatBox().value},getContinueGeneratingButton:function(){for(const e of document.querySelectorAll("form button svg"))if(e.querySelector('polygon[points*="11 19 2 12 11 5 11 19"]'))return e.parentNode.parentNode},getLastPrompt:function(){return C.getChatData("active","msg","user","latest")},getLastResponse:function(){return C.getChatData("active","msg","chatgpt","latest")},getNewChatLink:function(){for(const e of document.querySelectorAll("nav a"))if(/(new|clear) chat/i.test(e.text))return e},getRegenerateButton:function(){for(const e of document.querySelectorAll("main svg"))if(e.querySelector('path[d*="M4.5 2.5C5.05228"]'))return e.parentNode.parentNode},getResponse:function(){return(window.location.href.startsWith("https://chat.openai.com/c/")?C.getResponseFromDOM:C.getResponseFromAPI).apply(null,arguments)},getResponseFromAPI:function(e,t){return C.response.getFromAPI(e,t)},getResponseFromDOM:function(e){return C.response.getFromDOM(e)},getSendButton:function(){return document.querySelector('form button[class*="bottom"]')},getStopGeneratingButton:function(){for(const e of document.querySelectorAll("form button svg"))if(e.querySelector('path[d*="2 0 0 1 2"]'))return e.parentNode},getUserLanguage:function(){return navigator.languages[0]||navigator.language||navigator.browserLanguage||navigator.systemLanguage||navigator.userLanguage||""},history:{activate:function(){this.isOff()?this.toggle():console.info("Chat history is already enabled!")},deactivate:function(){this.isOn()?this.toggle():console.info("Chat history is already disabled!")},isOn:function(){return([...document.querySelectorAll("nav div")].find(e=>e.textContent.includes("Chat History is off"))||{}).classList.toString().includes("invisible")},isOff:function(){return!this.isOn()},isLoaded:function(){return new Promise(e=>{const t=()=>{document.querySelector("nav")?e(!0):setTimeout(t,100)};t()})},toggle:function(){for(const e of document.querySelectorAll("nav button"))if(/chat history/i.test(e.textContent))return void e.click()}},instructions:{add:function(o,r){var e;return o?"string"!=typeof o?console.error("Instruction must be a string"):(e=["user","chatgpt"],r?"string"!=typeof r?console.error("Target must be a string"):(r=r.toLowerCase(),e.includes(r)?(o=`

`+o,new Promise(n=>{C.getAccessToken().then(async e=>{var t=await this.fetchData();return"user"==r?t.about_user_message+=o:"chatgpt"==r&&(t.about_model_message+=o),await this.sendRequest("POST",e,t),n()})})):console.error(`Invalid target ${r}. Valid targets are [${e}]`)):console.error("Please provide a valid target!")):console.error("Please provide an instruction")},clear:function(o){var e=["user","chatgpt"];return o?"string"!=typeof o?console.error("Target must be a string"):(o=o.toLowerCase(),e.includes(o)?new Promise(n=>{C.getAccessToken().then(async e=>{var t=await this.fetchData();return"user"==o?t.about_user_message="":"chatgpt"==o&&(t.about_model_message=""),await this.sendRequest("POST",e,t),n()})}):console.error(`Invalid target ${o}. Valid targets are [${e}]`)):console.error("Please provide a valid target!")},fetchData:function(){return new Promise(t=>{C.getAccessToken().then(async e=>t(await this.sendRequest("GET",e)))})},sendRequest:function(r,e,s){for(let e=0;e<arguments.length-1;e++)if("string"!=typeof arguments[e])return console.error(`Argument ${e+1} must be a string`);var t=["POST","GET"];return(r=(r||"").trim().toUpperCase())&&t.includes(r)?e?s&&"object"!=typeof s?console.error(`Invalid body data type. Got ${typeof s}, expected object`):new Promise((t,n)=>{const o=new XMLHttpRequest;o.open(r,h.openAI.instructions,!0),o.setRequestHeader("Accept-Language","en-US"),o.setRequestHeader("Authorization","Bearer "+e),"POST"==r&&o.setRequestHeader("Content-Type","application/json"),o.onload=()=>{var e=JSON.parse(o.responseText);return 422===o.status?n("🤖 chatgpt.js >> Character limit exceeded. Custom instructions can have a maximum length of 1500 characters."):403===o.status&&"content_policy"==e.detail.reason?n("🤖 chatgpt.js >> "+e.detail.description):200!==o.status?n("🤖 chatgpt.js >> Request failed. Cannot contact custom instructions endpoint."):(console.info("Custom instructions successfully contacted with method "+r),t(e||{}))},o.send(JSON.stringify(s)||"")}):console.error("Please provide a valid access token!"):console.error("Valid methods are "+t)},turnOff:function(){return new Promise(n=>{C.getAccessToken().then(async e=>{var t=await this.fetchData();return t.enabled=!1,await this.sendRequest("POST",e,t),n()})})},turnOn:function(){return new Promise(n=>{C.getAccessToken().then(async e=>{var t=await this.fetchData();return t.enabled=!0,await this.sendRequest("POST",e,t),n()})})},toggle:function(){return new Promise(t=>{this.fetchData().then(async e=>(await(e.enabled?this.turnOff():this.turnOn()),t()))})}},isChromium:function(){return C.browser.isChromium()},isDarkMode:function(){return document.documentElement.classList.toString().includes("dark")},isFirefox:function(){return C.browser.isFirefox()},isFullScreen:function(){return C.browser.isFullScreen()},isIdle:function(){return new Promise(e=>{const t=setInterval(()=>{C.getRegenerateButton()&&(clearInterval(t),e(!0))},100)})},isLoaded:function(){return new Promise(e=>{const t=setInterval(()=>{document.querySelector('nav button[id*="menu"]')&&(clearInterval(t),setTimeout(()=>{e(!0)},500))},100)})},isLightMode:function(){return document.documentElement.classList.toString().includes("light")},isMobileDevice:function(){return C.browser.isMobile()},logout:function(){window.location.href="https://chat.openai.com/auth/logout"},menu:{elements:[],addedEvent:!1,append:function(e,t={}){var n=["button","dropdown"];if(!e||"string"!=typeof e)return console.error("🤖 chatgpt.js >> Please supply a valid string element name!");if(e=e.toLowerCase(),!n.includes(e))return console.error(`🤖 chatgpt.js >> Invalid element! Valid elements are [${n}]`);const o=document.createElement("dropdown"==e?"select":"button"==e?"a":e);if(o.id=Math.floor(1e6*C.randomFloat())+Date.now(),"button"==e){o.textContent=t?.label&&"string"==typeof t.label?t.label:"chatgpt.js button";n=document.createElement("img");n.src=t?.icon&&"string"==typeof t.icon?t.icon:h.assets+"/starters/chrome/extension/icons/icon128.png",n.width=18,o.insertBefore(n,o.firstChild),o.onclick=t?.onclick&&"function"==typeof t.onclick?t.onclick:function(){}}else if("dropdown"==e){if(t?.items&&Array.isArray(t.items)&&t.items.length||(t.items=[{text:"🤖 chatgpt.js option",value:"chatgpt.js option value"}]),!t.items.every(e=>"object"==typeof e))return console.error("'items' must be an array of objects!");o.style="background-color: #000; width: 100%; border: none;",t.items.forEach(e=>{var t=document.createElement("option");t.textContent=e?.text,t.value=e?.value,o.add(t)})}const r=()=>{var e,t=document.querySelectorAll('a[role="menuitem"]');let n;for(e of t)if("Settings"==e.textContent){n=e.classList;break}const o=t[0].parentNode;C.menu.elements.forEach(e=>{if(e.setAttribute("class",n),!o.contains(e))try{o.insertBefore(e,o.firstChild)}catch(e){console.error(e)}})};this.elements.push(o);n=document.querySelector('nav button[id*="headless"]');return this.addedEvent||(n.addEventListener("click",()=>{setTimeout(r,25)}),this.addedEvent=!0),o.id},close:function(){var e=document.querySelector('nav [id*="menu-button"][aria-expanded="true"]');if(!e)throw console.error("Menu already hidden!"),new Error;try{e.click()}catch(e){throw console.error("Error while closing the menu"),new Error(e)}},open:function(){var e=document.querySelector('nav [id*="menu-button"][aria-expanded="false"]');if(!e)throw console.error("Menu already hidden!"),new Error;try{e.click()}catch(e){throw console.error("Error while closing the menu"),new Error(e)}}},minify:function(){C.code.minify()},notify:async function(t,e,n,o){n=n?+n:1.75;const r=document.createElement("div");r.id=Math.floor(1e6*C.randomFloat())+Date.now(),r.classList.add("chatgpt-notif"),r.innerText=t,document.body.append(r);var t=document.createElement("div"),s=(t.title=x?.tooltip_dismiss||"Dismiss",t.classList.add("notif-close-btn"),document.createElementNS("http://www.w3.org/2000/svg","svg")),a=(s.setAttribute("height","8px"),s.setAttribute("viewBox","0 0 14 14"),s.setAttribute("fill","none"),s.style.height=s.style.width="8px",document.createElementNS("http://www.w3.org/2000/svg","path"));a.setAttribute("fill-rule","evenodd"),a.setAttribute("clip-rule","evenodd"),a.setAttribute("fill","white"),a.setAttribute("d","M13.7071 1.70711C14.0976 1.31658 14.0976 0.683417 13.7071 0.292893C13.3166 -0.0976312 12.6834 -0.0976312 12.2929 0.292893L7 5.58579L1.70711 0.292893C1.31658 -0.0976312 0.683417 -0.0976312 0.292893 0.292893C-0.0976312 0.683417 -0.0976312 1.31658 0.292893 1.70711L5.58579 7L0.292893 12.2929C-0.0976312 12.6834 -0.0976312 13.3166 0.292893 13.7071C0.683417 14.0976 1.31658 14.0976 1.70711 13.7071L7 8.41421L12.2929 13.7071C12.6834 14.0976 13.3166 14.0976 13.7071 13.7071C14.0976 13.3166 14.0976 12.6834 13.7071 12.2929L8.41421 7L13.7071 1.70711Z"),s.append(a),t.append(s),r.append(t),r.isTop=!e||!/low|bottom/i.test(e),r.isRight=!e||!/left/i.test(e),r.quadrant=(r.isTop?"top":"bottom")+(r.isRight?"Right":"Left");let i=document.querySelector("#chatgpt-notif-style"),c=((!i||parseInt(i.getAttribute("last-updated"),10)<20231110)&&(i||((i=document.createElement("style")).id="chatgpt-notif-style",i.setAttribute("last-updated",20231110..toString()),document.head.append(i)),i.innerText=".chatgpt-notif {background-color: black ; padding: 10px 13px 10px 18px ; border-radius: 11px ; border: 1px solid #f5f5f7 ;opacity: 0 ; position: fixed ; z-index: 9999 ; font-size: 1.8rem ; color: white ;-webkit-user-select: none ; -moz-user-select: none ; -ms-user-select: none ; user-select: none ;"+`transform: translateX(${r.isRight?"":"-"}35px) ;`+(o?"box-shadow: -8px 13px 25px 0 "+(/\b(shadow|on)\b/gi.test(o)?"gray":o):"")+"}.notif-close-btn { cursor: pointer ; float: right ; position: relative ; right: -4px ; margin-left: -3px ;display: grid }@keyframes notif-zoom-fade-out { 0% { opacity: 1 ; transform: scale(1) }15% { opacity: 0.35 ; transform: rotateX(-27deg) scale(1.05) }45% { opacity: 0.05 ; transform: rotateX(-81deg) }100% { opacity: 0 ; transform: rotateX(-180deg) scale(1.15) }}"),JSON.parse(localStorage.notifyProps));c.queue[r.quadrant].push(r.id),localStorage.notifyProps=JSON.stringify(c),r.style.top=r.isTop?23..toString()+"px":"",r.style.bottom=r.isTop?"":23..toString()+"px",r.style.right=r.isRight?27..toString()+"px":"",r.style.left=r.isRight?"":27..toString()+"px";a=c.queue[r.quadrant];if(1<a.length)try{for(const m of a.slice(0,-1)){var l=document.getElementById(m),u=l.style.top?"top":"bottom",d=+/\d+/.exec(l.style[u])[0]+5+l.getBoundingClientRect().height;l.style[u]=d+"px"}}catch(e){}setTimeout(()=>{r.style.opacity=C.isDarkMode()?.8:.67,r.style.transform="translateX(0)",r.style.transition="transform 0.15s ease, opacity 0.15s ease"},10);t=n<.3?0:n-.3;let f,g;if(y){let e;for(;(e=Math.floor(3*Math.random())+1)===c.lastNthAudio;);c.lastNthAudio=e,localStorage.notifyProps=JSON.stringify(c),(f=new Audio).src=h.assets+"/media/audio/notifications/bubble-pop/"+`${e}-${r.isRight?"right":"left"}.mp3`,g=setTimeout(()=>f.play().catch(()=>{}),1e3*t)}e=()=>{r.style.animation="notif-zoom-fade-out 0.3s ease-out",y&&f?.play().catch(()=>{}),clearTimeout(p),clearTimeout(g)};const p=setTimeout(e,1e3*t);s.addEventListener("click",e,{once:!0}),r.addEventListener("animationend",()=>{r.remove(),(c=JSON.parse(localStorage.notifyProps)).queue[r.quadrant].shift(),localStorage.notifyProps=JSON.stringify(c)},{once:!0})},obfuscate:function(){C.code.obfuscate()},printAllFunctions:function(){const t={cmdPrompt:["#ff00ff","#00ff00"],objName:["#0611e9","#f9ee16"],methodName:["#005aff","#ffa500"],entryType:["#467e06","#b981f9"],srcMethod:["#ff0000","#00ffff"]};Object.keys(t).forEach(e=>{t[e][1]=t[e][1]||"#"+(16777215^Number("0x1"+t[e][0].replace(/^#/,""))).toString(16).substring(1).toUpperCase()});var e=[];for(const c in this)if("function"==typeof this[c]){var n=!Object.keys(this).find(e=>Object.keys(this[e]).includes(this[c].name));e.push([n?"chatgpt":"other",c])}else if("object"==typeof this[c])for(const l in this[c])"function"==typeof this[c][l]&&e.push([c,l]);e.sort((e,t)=>e[0].localeCompare(t[0])||e[1].localeCompare(t[1]));var o=window.matchMedia("(prefers-color-scheme: dark)").matches,r="font-family: monospace ; font-size: larger ; ";console.log("\n%c🤖 chatgpt.js methods\n","font-family: sans-serif ; font-size: xxx-large ; font-weight: bold");for(const u of e){var s=/chatgpt|other/.test(u[0]),a="chatgpt"==u[0]?this[u[1]].name:"other"!==u[0]?u[0]+"."+u[1]:Object.keys(this).find(e=>Object.keys(this[e]).includes(this[u[1]].name))+"."+this[u[1]].name,i="AsyncFunction"==this[u[1]]?.constructor.name;console.log("%c>> %c"+(s?"":u[0]+".%c")+u[1]+" - https://chatgptjs.org/userguide/"+/(?:.*\.)?(.*)/.exec(a)[1].toLowerCase()+(i?"-async":"")+"\n%c[%c"+("chatgpt"==u[0]&&u[1]==this[u[1]].name||!s?"Function":"Alias of")+"%c: %c"+a+"%c]",r+"font-weight: bold ; color:"+t.cmdPrompt[+o],r+"font-weight: bold ;color:"+t[s?"methodName":"objName"][+o],r+"font-weight: "+(s?"initial":"bold")+";color:"+(s?"initial":t.methodName[+o]),r+"font-weight: "+(s?"bold":"initial")+";color:"+(s?t.entryType[+o]:"initial"),r+"font-weight: "+(s?"initial":"bold")+";color:"+(s?"initial":t.entryType[+o]),r+(s?"font-style: italic":"font-weight: initial")+";color:"+(s?t.srcMethod[+o]:"initial"),r+(s?"font-weight: initial":"font-style: italic")+";color:"+(s?"initial":t.srcMethod[+o]),s?"":r+"color: initial ; font-weight: initial")}},randomFloat:function(){return(window.crypto||window.msCrypto).getRandomValues(new Uint32Array(1))[0]/4294967295},refactor:function(){C.code.refactor()},regenerate:function(){for(const e of document.querySelectorAll("form button"))if(e.textContent.toLowerCase().includes("regenerate"))return void e.click()},renderHTML:function(e){var t=/<([a-z\d]+)\b([^>]*)>([\s\S]*?)<\/\1>/g,n=/(\S+)=['"]?((?:.(?!['"]?\s+\S+=|[>']))+.)['"]?/g,o=e.childNodes;this.renderHTML.preWrapSet||(e.style.whiteSpace="pre-wrap",this.renderHTML.preWrapSet=!0,setTimeout(()=>{this.renderHTML.preWrapSet=!1},100));for(const i of o)if(i.nodeType==Node.TEXT_NODE){var r=i.nodeValue,s=Array.from(r.matchAll(t));if(0<s.length){const c=s[0],[l,u,d,f]=c.slice(0,4),g=document.createElement(u);g.textContent=f;Array.from(d.matchAll(n)).forEach(e=>{var t=e[1],e=e[2].replace(/['"]/g,"");g.setAttribute(t,e)});var s=this.renderHTML(g),a=document.createTextNode(r.substring(0,c.index)),r=document.createTextNode(r.substring(c.index+l.length));e.replaceChild(a,i),e.insertBefore(s,a.nextSibling),e.insertBefore(r,s.nextSibling)}}else i.nodeType==Node.ELEMENT_NODE&&this.renderHTML(i);return e},resend:async function(){C.send(await C.getChatData("latest","msg","user","latest"))},response:{get:function(){return(window.location.href.startsWith("https://chat.openai.com/c/")?this.getFromDOM:this.getFromAPI).apply(null,arguments)},getFromAPI:function(e,t){return e=e||"latest",t=t||"latest",C.getChatData(e,"msg","chatgpt",t)},getFromDOM:function(e){var t=document.querySelectorAll('div[data-testid*="conversation-turn"]:nth-child(odd)'),n=e.toString().toLowerCase();let o="";return o=t.length?(o=(/last|final/.test(n)?t[t.length-1]:t[(Number.isInteger(e)?e:/^\d+/.test(n)?/^\d+/.exec(n)[0]:(/^(?:1|one|fir)(?:st)?$/.test(n)?1:/^(?:2|tw(?:o|en|el(?:ve|f))|seco)(?:nd|t[yi])?(?:e?th)?$/.test(n)?2:/^(?:3|th(?:ree|ir?))(?:rd|teen|t[yi])?(?:e?th)?$/.test(n)?3:/^(?:4|fou?r)(?:teen|t[yi])?(?:e?th)?$/.test(n)?4:/^(?:5|fi(?:ve|f))(?:teen|t[yi])?(?:e?th)?$/.test(n)?5:/^(?:6|six)(?:teen|t[yi])?(?:e?th)?$/.test(n)?6:/^(?:7|seven)(?:teen|t[yi])?(?:e?th)?$/.test(n)?7:/^(?:8|eight?)(?:teen|t[yi])?(?:e?th)?$/.test(n)?8:/^(?:9|nine?)(?:teen|t[yi])?(?:e?th)?$/.test(n)?9:/^(?:10|ten)(?:th)?$/.test(n)?10:1)*(/(ty|ieth)$/.test(n)?10:1)+(/teen(th)?$/.test(n)?10:0))-1]).textContent).replace(/^ChatGPTChatGPT/,""):o},getLast:function(){return C.getChatData("active","msg","chatgpt","latest")},regenerate:function(){for(const e of document.querySelectorAll("form button"))if(e.textContent.toLowerCase().includes("regenerate"))return void e.click()},stopGenerating:function(){for(const e of document.querySelectorAll("form button svg"))if(e.querySelector('path[d*="2 0 0 1 2"]'))return void e.parentNode.click()}},reviewCode:function(){C.code.review()},scrollToBottom:function(){try{document.querySelector('button[class*="cursor"][class*="bottom"]').click()}catch(e){console.error("",e)}},send:function(e,t=""){for(let e=0;e<arguments.length;e++)if("string"!=typeof arguments[e])return console.error(`Argument ${e+1} must be a string!`);const n=document.querySelector("form textarea"),o=document.querySelector('form button[class*="bottom"]'),r=(n.value=e,n.dispatchEvent(new Event("input",{bubbles:!0})),setInterval(()=>{o?.hasAttribute("disabled")||("click"==t.toLowerCase()||C.browser.isMobile()?o.click():n.dispatchEvent(new KeyboardEvent("keydown",{keyCode:13,bubbles:!0})),clearInterval(r))},25))},sendInNewChat:function(e){if("string"!=typeof e)return console.error("Message must be a string!");for(const t of document.querySelectorAll("nav a"))if(/(new|clear) chat/i.test(t.text)){t.click();break}setTimeout(()=>{C.send(e)},500)},settings:{scheme:{isDark:function(){return document.documentElement.classList.contains("dark")},isLight:function(){return document.documentElement.classList.contains("light")},set:function(e){var t=["dark","light","system"];if(!e)return console.error("Please specify a scheme value!");if(!t.includes(e))return console.error(`Invalid scheme value. Valid values are [${t}]`);let n=e;"system"==e&&(n=window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light"),localStorage.setItem("theme",e),console.info(`Scheme set to ${e.toUpperCase()}.`),document.documentElement.classList.contains(n)||this.toggle()},toggle:function(){var[e,t]=this.isDark()?["dark","light"]:["light","dark"];document.documentElement.classList.replace(e,t),document.documentElement.style.colorScheme=t,localStorage.setItem("theme",t)}}},sentiment:async function(e,t){for(let e=0;e<arguments.length;e++)if("string"!=typeof arguments[e])return console.error(`Argument ${e+1} must be a string.`);return C.send("What is the sentiment of the following text"+(t?` towards the entity ${t},`:"")+" from strongly negative to strongly positive?\n\n"+e),console.info("Analyzing sentiment..."),await C.isIdle(),C.getChatData("active","msg","chatgpt","latest")},setScheme:function(e){C.settings.scheme.set(e)},shareChat:function(a,i="clipboard"){var e=["alert","notify","notification","clipboard","copy"];if(!e.includes(i))return console.error("Invalid method '"+i+"' passed. Valid methods are ["+e+"].");return new Promise(n=>{C.getAccessToken().then(t=>{var r;r=t,new Promise((t,n)=>{const o=new XMLHttpRequest;C.getChatData(a).then(e=>{o.open("GET",h.openAI.chat+"/"+e.id,!0),o.setRequestHeader("Content-Type","application/json"),o.setRequestHeader("Authorization","Bearer "+r),o.onload=()=>200!==o.status?n("🤖 chatgpt.js >> Request failed. Cannot retrieve chat node."):t(JSON.parse(o.responseText).current_node),o.send()})}).then(e=>{var r,s;r=t,s=e,new Promise((t,n)=>{const o=new XMLHttpRequest;C.getChatData(a).then(e=>{o.open("POST",h.openAI.share_create,!0),o.setRequestHeader("Content-Type","application/json"),o.setRequestHeader("Authorization","Bearer "+r),o.onload=()=>200!==o.status?n("🤖 chatgpt.js >> Request failed. Cannot initialize share chat."):t(JSON.parse(o.responseText)),o.send(JSON.stringify({current_node_id:s,conversation_id:e.id,is_anonymous:!0}))})}).then(e=>{var o,r;o=t,r=e,new Promise((e,t)=>{const n=new XMLHttpRequest;n.open("PATCH",h.openAI.share+"/"+r.share_id,!0),n.setRequestHeader("Content-Type","application/json"),n.setRequestHeader("Authorization","Bearer "+o),n.onload=()=>200!==n.status?t("🤖 chatgpt.js >> Request failed. Cannot share chat."):(console.info(`Chat shared at '${r.share_url}'`),e()),n.send(JSON.stringify({share_id:r.share_id,highlighted_message_id:r.highlighted_message_id,title:r.title,is_public:!0,is_visible:r.is_visible,is_anonymous:r.is_anonymous}))}).then(()=>{["copy","clipboard"].includes(i)?navigator.clipboard.writeText(e.share_url):C.alert("🚀 Share link created!",'"'+e.title+'" is available at: <a target="blank" rel="noopener" href="'+e.share_url+'" >'+e.share_url+"</a>",[function(){window.open(e.share_url,"_blank","noopener")},function(){navigator.clipboard.writeText(e.share_url)}]),n(e.share_url)})})})})})},sidebar:{elements:[],observer:{},activateObserver:function(){var e,t=document.querySelector("nav").querySelector("a");if(C.history.isOff())try{t.parentNode.nextElementSibling.style.display="none"}catch(e){}if(this.observer instanceof MutationObserver)try{this.observer.disconnect()}catch(e){}if(!this.elements.length)return console.error("🤖 chatgpt.js >> No elements to append!");let n;for(e of document.querySelectorAll("nav a"))if(/.*chat/.exec(e.text)[0]){n=e.classList,e.parentNode.style.margin="2px 0";break}this.elements.forEach(e=>{e.setAttribute("class",n),e.style.maxHeight=e.style.minHeight="44px",e.style.margin="2px 0"});const o=document.querySelector("nav");this.observer=new MutationObserver(e=>{e.forEach(e=>{("childList"==e.type&&e.addedNodes.length||"attributes"==e.type&&"data-chatgptjs"==e.attributeName)&&this.elements.forEach(e=>{if(!o.contains(e))try{o.insertBefore(e,o.querySelector("a").parentNode)}catch(e){console.error(e)}})})}),this.observer.observe(document.documentElement,{childList:!0,subtree:!0,attributes:!0})},append:function(e,t={}){var n=["button","dropdown"];if(!e||"string"!=typeof e)return console.error("🤖 chatgpt.js >> Please supply a valid string element name!");if(e=e.toLowerCase(),!n.includes(e))return console.error(`🤖 chatgpt.js >> Invalid element! Valid elements are [${n}]`);const o=document.createElement("dropdown"==e?"select":e);if(o.id=Math.floor(1e6*C.randomFloat())+Date.now(),"button"==e){o.textContent=t?.label&&"string"==typeof t.label?t.label:"chatgpt.js button";n=document.createElement("img");n.src=t?.icon&&"string"==typeof t.icon?t.icon:h.assets+"/starters/chrome/extension/icons/icon128.png",n.width=18,o.insertBefore(n,o.firstChild),o.onclick=t?.onclick&&"function"==typeof t.onclick?t.onclick:function(){}}else if("dropdown"==e){if(t?.items&&Array.isArray(t.items)&&t.items.length||(t.items=[{text:"🤖 chatgpt.js option",value:"chatgpt.js option value"}]),!t.items.every(e=>"object"==typeof e))return console.error("'items' must be an array of objects!");t.items.forEach(e=>{var t=document.createElement("option");t.textContent=e?.text,t.value=e?.value,o.add(t)})}return"dropdown"==e&&(o.style.backgroundColor="var(--gray-900, rgb(32, 33, 35))"),this.elements.push(o),this.activateObserver(),document.body.setAttribute("data-chatgptjs","observer-trigger"),o.id},hide:function(){this.isOn()?this.toggle():console.info("Sidebar already hidden!")},show:function(){this.isOff()?this.toggle():console.info("Sidebar already shown!")},isOff:function(){return!this.isOn()},isOn:function(){return C.browser.isMobile()?"hidden"==document.documentElement.style.overflow:"hidden"!=document.querySelector("#__next > div > div").style.visibility},toggle:function(){var e=C.browser.isMobile(),t=e?()=>!0:e=>Array.from(e.querySelectorAll("*")).some(e=>e.style.transform.includes("translateY"));for(const n of document.querySelectorAll(e?"#__next button":"main button"))if(t(n))return void n.click()}},startNewChat:function(){for(const e of document.querySelectorAll("nav a"))if(/(new|clear) chat/i.test(e.text))return void e.click()},stop:function(){this.response.stopGenerating()},suggest:async function(e,t){if(!e)return console.error("ideaType (1st argument) not supplied(e.g. 'gifts', 'names', 'recipes', etc.)");for(let e=0;e<arguments.length;e++)if("string"!=typeof arguments[e])return console.error(`Argument ${e+1} must be a string.`);return C.send("Suggest some names. "+(t||"")),console.info(`Creating ${e}...`),await C.isIdle(),C.getChatData("active","msg","chatgpt","latest")},speak:function(e,t={}){var n,{voice:o=2,pitch:r=2,speed:s=1.1}=t;if("string"!=typeof e)return console.error("Message must be a string!");for(n in t){var a=t[n];if("number"!=typeof a&&!/^\d+$/.test(a))return console.error(`Invalid ${n} index '${a}'. Must be a number!`)}try{var i=speechSynthesis.getVoices(),c=new SpeechSynthesisUtterance;c.text=e,c.voice=i[o],c.pitch=r,c.rate=s,speechSynthesis.speak(c)}catch(e){console.error(e)}},summarize:async function(e){return e?"string"!=typeof e?console.error("Text argument must be a string!"):(C.send("Summarize the following text:\n\n"+e),console.info("Summarizing text..."),await C.isIdle(),C.getChatData("active","msg","chatgpt","latest")):console.error("Text (1st) argument not supplied. Pass some text!")},toggleScheme:function(){C.settings.scheme.toggle()},translate:async function(e,t){if(!e)return console.error("Text (1st) argument not supplied. Pass some text!");if(!t)return console.error("outputLang (2nd) argument not supplied. Pass a language!");for(let e=0;e<arguments.length;e++)if("string"!=typeof arguments[e])return console.error(`Argument ${e+1} must be a string!`);return C.send("Translate the following text to "+t+". Only reply with the translation.\n\n"+e),console.info("Translating text..."),await C.isIdle(),C.getChatData("active","msg","chatgpt","latest")},unminify:function(){C.code.unminify()},uuidv4:function(){let n=(new Date).getTime();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,e=>{var t=(n+window.crypto.getRandomValues(new Uint32Array(1))[0]/(Math.pow(2,32)-1)*16)%16|0;return n=Math.floor(n/16),("x"==e?t:3&t|8).toString(16)})},writeCode:function(){C.code.write()}},n=(C.scheme={...C.settings.scheme},["click","get"]),a=["button","link","div","response"];for(const d of n)C[d+"Button"]=function(n){var e=/^[.#]/.test(n)?document.querySelector(n):/send/i.test(n)?document.querySelector('form button[class*="bottom"]'):/scroll/i.test(n)?document.querySelector('button[class*="cursor"]'):function(){for(const e of document.querySelectorAll("button"))if(e.textContent.toLowerCase().includes(n.toLowerCase()))return e;for(const t of document.querySelectorAll("nav a"))if(t.textContent.toLowerCase().includes(n.toLowerCase()))return t}();if("click"!=d)return e;e.click()};const o=[["actAs","actas","act","become","persona","premadePrompt","preMadePrompt","prePrompt","preprompt","roleplay","rolePlay","rp"],["activateAutoRefresh","activateAutoRefresher","activateRefresher","activateSessionRefresher","autoRefresh","autoRefresher","autoRefreshSession","refresher","sessionRefresher"],["deactivateAutoRefresh","deactivateAutoRefresher","deactivateRefresher","deactivateSessionRefresher"],["detectLanguage","getLanguage"],["executeCode","codeExecute"],["exportChat","chatExport","export"],["getLastPrompt","getLastQuery","getMyLastMsg","getMyLastQuery"],["getTextarea","getTextArea","getChatbox","getChatBox"],["isFullScreen","isFullscreen"],["logOut","logout","logOff","logoff","signOut","signout","signOff","signoff"],["minify","codeMinify","minifyCode"],["new","newChat","startNewChat"],["obfuscate","codeObfuscate","obfuscateCode"],["printAllFunctions","showAllFunctions"],["refactor","codeRefactor","refactorCode"],["refreshReply","regenerate","regenerateReply"],["refreshSession","sessionRefresh"],["renderHTML","renderHtml","renderLinks","renderTags"],["reviewCode","codeReview"],["send","sendChat","sendMsg"],["sendInNewChat","sendNewChat"],["sentiment","analyzeSentiment","sentimentAnalysis"],["stop","stopGenerating"],["suggest","suggestion","recommend"],["toggleAutoRefresh","toggleAutoRefresher","toggleRefresher","toggleSessionRefresher"],["toggleScheme","toggleMode"],["translate","translation","translator"],["unminify","unminifyCode","codeUnminify"],["writeCode","codeWrite"]],r=[["account","acct"],["activate","turnOn"],["analyze","check","evaluate","review"],["ask","send","submit"],["chat","conversation","convo"],["data","details"],["deactivate","deActivate","turnOff"],["execute","interpret","interpreter","run"],["generating","generation"],["minify","uglify"],["refactor","rewrite"],["regenerate","regen"],["render","parse"],["reply","response"],["sentiment","attitude","emotion","feeling","opinion","perception"],["speak","say","speech","talk","tts"],["summarize","tldr"],["unminify","beautify","prettify","prettyPrint"]],s=e=>e.map((e,t)=>0===t||"s"==e?e:e.charAt(0).toUpperCase()+e.slice(1)).join("");for(const f in C){for(const g of o)if(g.includes(f))if(g.some(e=>e.includes("."))){const p=g.find(e=>e.includes(".")).split(".")[1];for(const m of g)/^(\w+)/.exec(m)[1]!==f&&(C[m]=C[f][p])}else for(const v of g)v!==f&&(C[v]=C[f]);do{var i=!1;for(const b in C)if("function"==typeof C[b]){const w=b.split(/(?=[A-Zs])/);for(const S of w){const k=[].concat(...r.filter(e=>e.includes(S.toLowerCase())).map(e=>e.filter(e=>e!==S.toLowerCase())));for(const A of k){const T=s(w.map(e=>e==S?A:e));C[T]||(C[T]=C[b],i=!0)}}}}while(i)}const c="🤖 chatgpt.js >> ",l=console.error,u=console.info;console.error=(...e)=>{e[0].startsWith(c)?l(...e):l(c+e[0],...e.slice(1))},console.info=e=>{e.startsWith(c)?u(e):u(c+e)};try{window.chatgpt=C}catch(e){}try{module.exports=C}catch(e){}"}]},{"name":"ChatGPT Model Switcher (Supports GPT-4 Mobile and All Available Models)","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["http*://chat.openai.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null}},"storage":{"ts":1713950301445,"data":{}},"enabled":true,"position":2,"file_url":"https://update.greasyfork.org/scripts/468905/ChatGPT%20Model%20Switcher%20%28Supports%20GPT-4%20Mobile%20and%20All%20Available%20Models%29.user.js","uuid":"1aa8a5f5-7b2d-48e1-b881-756457866ea6","source":"// ==UserScript==
// @name               ChatGPT Model Switcher (Supports GPT-4 Mobile and All Available Models)
// @name:zh-CN         ChatGPT 模型切换器（支持 GPT-4 Mobile 及所有可用模型）
// @name:zh-TW         ChatGPT 模型切换器（支持 GPT-4 Mobile 及所有可用模型）
// @namespace          https://github.com/hydrotho/ChatGPT_Model_Switcher
// @version            2.2.0
// @author             Hydrotho
// @description        Use the GPT-4 Mobile model on the ChatGPT web interface. It also provides the ability to switch to other models for added flexibility. Generally, this script does not conflict with other popular ChatGPT scripts.
// @description:zh-CN  在 ChatGPT 网页端使用 GPT-4 Mobile 模型。同时，它还提供了切换到其他模型的功能，以提供更大的灵活性。一般来说，该脚本不会与其他流行的 ChatGPT 脚本产生冲突。
// @description:zh-TW  在 ChatGPT 网页端使用 GPT-4 Mobile 模型。同时，它还提供了切换到其他模型的功能，以提供更大的灵活性。一般来说，该脚本不会与其他流行的 ChatGPT 脚本产生冲突。
// @license            MIT
// @copyright          2023, Hydrotho (https://github.com/hydrotho)
// @icon               data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAALGPC/xhBQAAAAFzUkdCAK7OHOkAAAH1UExURUxpcXeqn3WqnHWonHSpnHWonHWpnG22knWpnHWpnHSmm3apm3SpnHWonHWpnHSonHWpnHWpm3apnXWpnHWpm3WpnP///8fc19fm43mrn67Nxf7///r8+6HFvNPk4JS8ssXb1XirnsDY0sPa1Pj7+qbHv5i/tXeqnvz9/X6uoo65roq2q+Tu7P3+/qrKwqDEu9bm4vP39qfIwPv9/NXl4ezz8Xqsn+nx73msn5/Dusnd2N7q59zp5pC6r4CwpKLFvIOxpszf2oSypsTa1fn7+/P49t/r6JrAt8LZ1L/X0d3q53aqnczf287h3Ie0qc7g3Pr8/LTQybDOxpvBuObv7c/h3PX5+Ory8ODr6OPt65G7sLnTzYWzp/n7+oi1qv7+/tTk4J7Cucve2Z3Cub7X0H+vo8LZ053CuKnJwff6+tnn4/3+/fD29XytoYWzqJe+tJa+tHapnHeqnaHEu8vf2oGxpazLw3utoMre2ZW9s7XRyu/19H2uou/186XHv6jJwNDi3sjd2OLt6u308ufw7tfm4rjTzK3MxOjw7tvp5dHi3sjd15m/tvL39q/Nxvb5+OPu64y3rIOyptnn5LbSy+Ds6eHs6tbl4cHZ0/v8/H6vo4GwpZ7Dus/h3fb6+ZK7sfT49/f6+aLFvavLw6zLxM3g28bc1pQLf2QAAAAVdFJOUwAtv5bz1PQH/dUuj5WQ/CyYwJHykqKEGP8AAAAJcEhZcwAAAHYAAAB2AU57JggAAAIcSURBVDjLhdNle9swEABgFdK0Kw7uHMfp6iTeAksaThpoUmZuV1x5zMxbx8wM7Xj7nZNjx/L2rNl9kXR6H51snwmhsWFTWQn8FSWGygKihLGmFP4ZpUXG7P5GWDcKZVEDeaKC1mfnHxUvoSV19YQOVFWTLdpiUfJ2POx/jOEzAy4tWU7KctPG95FpOjT0IA2PT80aSHEOpKQ5mSUxIA7bD2OzI5vdTNTt1QXBDvAxMT/7qkE+h8PdyoYC+DX0YgYyX4W+FwBunqYOhpp0YAl/1eN22Or5DPD8Jd6sBTiOZgYa8SfUysAMH+wWW/AK3ndbUWRADKUVMGIex1YrRGcs3uvYxcCzKVCAJTb66FZsFGDXTgHPMjD2WgWcFeCkHd/uoOshj0MD16QoLOI2+Q406ifpPXh4gisaOIXD4JiZXUoqwARx/Ab80zB7TJMzmK17nr4BK2eCOnocJGMMBBH9tO6FqYhveUJSwZsxBrpRDDltl6G3G7/8+K6AtLOZARu65hYwcLfL8s4l30EGCTzGwH6MA3Tew9u0Tp1HBmYOT+u+xZ62nl4AB91uGRQ+ZWAZ53HQqgMwgn3n6BC90+bl0nLJB51qH+QaphUD3EWuHVNuuhiQwlrPaS3n6zhEW+2G3I3TkSE3A5XalG860o/j/sSkcGAf62tS8MdvFfe3Oyf2tugyhBRB3qC/XuF/ADFWVOUHhFSXG4rXA78BYbiLJDUXqsMAAABXelRYdFJhdyBwcm9maWxlIHR5cGUgaXB0YwAAeJzj8gwIcVYoKMpPy8xJ5VIAAyMLLmMLEyMTS5MUAxMgRIA0w2QDI7NUIMvY1MjEzMQcxAfLgEigSi4A6hcRdPJCNZUAAAAASUVORK5CYII=
// @supportURL         https://github.com/hydrotho/ChatGPT_Model_Switcher/issues
// @match              http*://chat.openai.com/*
// @require            https://cdn.jsdelivr.net/npm/vue@3.4.21/dist/vue.global.prod.js#sha256-SWMQFEHe1+QgwFZl58YWsvLjhRyZ4c+K+E0p1vEOd9o=
// @grant              none
// @downloadURL https://update.greasyfork.org/scripts/468905/ChatGPT%20Model%20Switcher%20%28Supports%20GPT-4%20Mobile%20and%20All%20Available%20Models%29.user.js
// @updateURL https://update.greasyfork.org/scripts/468905/ChatGPT%20Model%20Switcher%20%28Supports%20GPT-4%20Mobile%20and%20All%20Available%20Models%29.meta.js
// ==/UserScript==

(function (vue) {
  'use strict';

  function useControllable(controlledValue, onChange, defaultValue) {
    let internalValue = vue.ref(defaultValue == null ? void 0 : defaultValue.value);
    let isControlled = vue.computed(() => controlledValue.value !== void 0);
    return [
      vue.computed(() => isControlled.value ? controlledValue.value : internalValue.value),
      function(value) {
        if (isControlled.value) {
          return onChange == null ? void 0 : onChange(value);
        } else {
          internalValue.value = value;
          return onChange == null ? void 0 : onChange(value);
        }
      }
    ];
  }
  let GENERATE_ID = Symbol("headlessui.useid");
  let globalId = 0;
  function useId() {
    let generateId = vue.inject(GENERATE_ID, () => {
      return `${++globalId}`;
    });
    return generateId();
  }
  function dom(ref2) {
    var _a;
    if (ref2 == null)
      return null;
    if (ref2.value == null)
      return null;
    let el = (_a = ref2.value.$el) != null ? _a : ref2.value;
    if (el instanceof Node) {
      return el;
    }
    return null;
  }
  function match(value, lookup, ...args) {
    if (value in lookup) {
      let returnValue = lookup[value];
      return typeof returnValue === "function" ? returnValue(...args) : returnValue;
    }
    let error = new Error(
      `Tried to handle "${value}" but there is no handler defined. Only defined handlers are: ${Object.keys(
      lookup
    ).map((key) => `"${key}"`).join(", ")}.`
    );
    if (Error.captureStackTrace)
      Error.captureStackTrace(error, match);
    throw error;
  }
  var __defProp = Object.defineProperty;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __publicField = (obj, key, value) => {
    __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };
  class Env {
    constructor() {
      __publicField(this, "current", this.detect());
      __publicField(this, "currentId", 0);
    }
    set(env2) {
      if (this.current === env2)
        return;
      this.currentId = 0;
      this.current = env2;
    }
    reset() {
      this.set(this.detect());
    }
    nextId() {
      return ++this.currentId;
    }
    get isServer() {
      return this.current === "server";
    }
    get isClient() {
      return this.current === "client";
    }
    detect() {
      if (typeof window === "undefined" || typeof document === "undefined") {
        return "server";
      }
      return "client";
    }
  }
  let env = new Env();
  function getOwnerDocument(element) {
    if (env.isServer)
      return null;
    if (element instanceof Node)
      return element.ownerDocument;
    if (element == null ? void 0 : element.hasOwnProperty("value")) {
      let domElement = dom(element);
      if (domElement)
        return domElement.ownerDocument;
    }
    return document;
  }
  let focusableSelector = [
    "[contentEditable=true]",
    "[tabindex]",
    "a[href]",
    "area[href]",
    "button:not([disabled])",
    "iframe",
    "input:not([disabled])",
    "select:not([disabled])",
    "textarea:not([disabled])"
  ].map(
    (selector) => `${selector}:not([tabindex='-1'])`
  ).join(",");
  var Focus = /* @__PURE__ */ ((Focus2) => {
    Focus2[Focus2["First"] = 1] = "First";
    Focus2[Focus2["Previous"] = 2] = "Previous";
    Focus2[Focus2["Next"] = 4] = "Next";
    Focus2[Focus2["Last"] = 8] = "Last";
    Focus2[Focus2["WrapAround"] = 16] = "WrapAround";
    Focus2[Focus2["NoScroll"] = 32] = "NoScroll";
    return Focus2;
  })(Focus || {});
  var FocusResult = /* @__PURE__ */ ((FocusResult2) => {
    FocusResult2[FocusResult2["Error"] = 0] = "Error";
    FocusResult2[FocusResult2["Overflow"] = 1] = "Overflow";
    FocusResult2[FocusResult2["Success"] = 2] = "Success";
    FocusResult2[FocusResult2["Underflow"] = 3] = "Underflow";
    return FocusResult2;
  })(FocusResult || {});
  function getFocusableElements(container = document.body) {
    if (container == null)
      return [];
    return Array.from(container.querySelectorAll(focusableSelector)).sort(
      // We want to move `:tabindex="0"` to the end of the list, this is what the browser does as well.
      (a, z) => Math.sign((a.tabIndex || Number.MAX_SAFE_INTEGER) - (z.tabIndex || Number.MAX_SAFE_INTEGER))
    );
  }
  var FocusableMode = /* @__PURE__ */ ((FocusableMode2) => {
    FocusableMode2[FocusableMode2["Strict"] = 0] = "Strict";
    FocusableMode2[FocusableMode2["Loose"] = 1] = "Loose";
    return FocusableMode2;
  })(FocusableMode || {});
  function isFocusableElement(element, mode = 0) {
    var _a;
    if (element === ((_a = getOwnerDocument(element)) == null ? void 0 : _a.body))
      return false;
    return match(mode, {
      [
        0
        /* Strict */
      ]() {
        return element.matches(focusableSelector);
      },
      [
        1
        /* Loose */
      ]() {
        let next = element;
        while (next !== null) {
          if (next.matches(focusableSelector))
            return true;
          next = next.parentElement;
        }
        return false;
      }
    });
  }
  if (typeof window !== "undefined" && typeof document !== "undefined") {
    document.addEventListener(
      "keydown",
      (event) => {
        if (event.metaKey || event.altKey || event.ctrlKey) {
          return;
        }
        document.documentElement.dataset.headlessuiFocusVisible = "";
      },
      true
    );
    document.addEventListener(
      "click",
      (event) => {
        if (event.detail === 1) {
          delete document.documentElement.dataset.headlessuiFocusVisible;
        } else if (event.detail === 0) {
          document.documentElement.dataset.headlessuiFocusVisible = "";
        }
      },
      true
    );
  }
  let selectableSelector = ["textarea", "input"].join(",");
  function isSelectableElement(element) {
    var _a, _b;
    return (_b = (_a = element == null ? void 0 : element.matches) == null ? void 0 : _a.call(element, selectableSelector)) != null ? _b : false;
  }
  function sortByDomNode(nodes, resolveKey = (i) => i) {
    return nodes.slice().sort((aItem, zItem) => {
      let a = resolveKey(aItem);
      let z = resolveKey(zItem);
      if (a === null || z === null)
        return 0;
      let position = a.compareDocumentPosition(z);
      if (position & Node.DOCUMENT_POSITION_FOLLOWING)
        return -1;
      if (position & Node.DOCUMENT_POSITION_PRECEDING)
        return 1;
      return 0;
    });
  }
  function focusIn(container, focus, {
    sorted = true,
    relativeTo = null,
    skipElements = []
  } = {}) {
    var _a;
    let ownerDocument = (_a = Array.isArray(container) ? container.length > 0 ? container[0].ownerDocument : document : container == null ? void 0 : container.ownerDocument) != null ? _a : document;
    let elements = Array.isArray(container) ? sorted ? sortByDomNode(container) : container : getFocusableElements(container);
    if (skipElements.length > 0 && elements.length > 1) {
      elements = elements.filter((x) => !skipElements.includes(x));
    }
    relativeTo = relativeTo != null ? relativeTo : ownerDocument.activeElement;
    let direction = (() => {
      if (focus & (1 | 4))
        return 1;
      if (focus & (2 | 8))
        return -1;
      throw new Error("Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last");
    })();
    let startIndex = (() => {
      if (focus & 1)
        return 0;
      if (focus & 2)
        return Math.max(0, elements.indexOf(relativeTo)) - 1;
      if (focus & 4)
        return Math.max(0, elements.indexOf(relativeTo)) + 1;
      if (focus & 8)
        return elements.length - 1;
      throw new Error("Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last");
    })();
    let focusOptions = focus & 32 ? { preventScroll: true } : {};
    let offset = 0;
    let total = elements.length;
    let next = void 0;
    do {
      if (offset >= total || offset + total <= 0)
        return 0;
      let nextIdx = startIndex + offset;
      if (focus & 16) {
        nextIdx = (nextIdx + total) % total;
      } else {
        if (nextIdx < 0)
          return 3;
        if (nextIdx >= total)
          return 1;
      }
      next = elements[nextIdx];
      next == null ? void 0 : next.focus(focusOptions);
      offset += direction;
    } while (next !== ownerDocument.activeElement);
    if (focus & (4 | 2) && isSelectableElement(next)) {
      next.select();
    }
    return 2;
  }
  function isIOS() {
    return (
      // Check if it is an iPhone
      /iPhone/gi.test(window.navigator.platform) || // Check if it is an iPad. iPad reports itself as "MacIntel", but we can check if it is a touch
      // screen. Let's hope that Apple doesn't release a touch screen Mac (or maybe this would then
      // work as expected 🤔).
      /Mac/gi.test(window.navigator.platform) && window.navigator.maxTouchPoints > 0
    );
  }
  function isAndroid() {
    return /Android/gi.test(window.navigator.userAgent);
  }
  function isMobile() {
    return isIOS() || isAndroid();
  }
  function useDocumentEvent(type, listener, options) {
    if (env.isServer)
      return;
    vue.watchEffect((onInvalidate) => {
      document.addEventListener(type, listener, options);
      onInvalidate(() => document.removeEventListener(type, listener, options));
    });
  }
  function useWindowEvent(type, listener, options) {
    if (env.isServer)
      return;
    vue.watchEffect((onInvalidate) => {
      window.addEventListener(type, listener, options);
      onInvalidate(() => window.removeEventListener(type, listener, options));
    });
  }
  function useOutsideClick(containers, cb, enabled = vue.computed(() => true)) {
    function handleOutsideClick(event, resolveTarget) {
      if (!enabled.value)
        return;
      if (event.defaultPrevented)
        return;
      let target = resolveTarget(event);
      if (target === null) {
        return;
      }
      if (!target.getRootNode().contains(target))
        return;
      let _containers = function resolve(containers2) {
        if (typeof containers2 === "function") {
          return resolve(containers2());
        }
        if (Array.isArray(containers2)) {
          return containers2;
        }
        if (containers2 instanceof Set) {
          return containers2;
        }
        return [containers2];
      }(containers);
      for (let container of _containers) {
        if (container === null)
          continue;
        let domNode = container instanceof HTMLElement ? container : dom(container);
        if (domNode == null ? void 0 : domNode.contains(target)) {
          return;
        }
        if (event.composed && event.composedPath().includes(domNode)) {
          return;
        }
      }
      if (
        // This check alllows us to know whether or not we clicked on a "focusable" element like a
        // button or an input. This is a backwards compatibility check so that you can open a <Menu
        // /> and click on another <Menu /> which should close Menu A and open Menu B. We might
        // revisit that so that you will require 2 clicks instead.
        !isFocusableElement(target, FocusableMode.Loose) && // This could be improved, but the `Combobox.Button` adds tabIndex={-1} to make it
        // unfocusable via the keyboard so that tabbing to the next item from the input doesn't
        // first go to the button.
        target.tabIndex !== -1
      ) {
        event.preventDefault();
      }
      return cb(event, target);
    }
    let initialClickTarget = vue.ref(null);
    useDocumentEvent(
      "pointerdown",
      (event) => {
        var _a, _b;
        if (enabled.value) {
          initialClickTarget.value = ((_b = (_a = event.composedPath) == null ? void 0 : _a.call(event)) == null ? void 0 : _b[0]) || event.target;
        }
      },
      true
    );
    useDocumentEvent(
      "mousedown",
      (event) => {
        var _a, _b;
        if (enabled.value) {
          initialClickTarget.value = ((_b = (_a = event.composedPath) == null ? void 0 : _a.call(event)) == null ? void 0 : _b[0]) || event.target;
        }
      },
      true
    );
    useDocumentEvent(
      "click",
      (event) => {
        if (isMobile()) {
          return;
        }
        if (!initialClickTarget.value) {
          return;
        }
        handleOutsideClick(event, () => {
          return initialClickTarget.value;
        });
        initialClickTarget.value = null;
      },
      // We will use the `capture` phase so that layers in between with `event.stopPropagation()`
      // don't "cancel" this outside click check. E.g.: A `Menu` inside a `DialogPanel` if the `Menu`
      // is open, and you click outside of it in the `DialogPanel` the `Menu` should close. However,
      // the `DialogPanel` has a `onClick(e) { e.stopPropagation() }` which would cancel this.
      true
    );
    useDocumentEvent(
      "touchend",
      (event) => {
        return handleOutsideClick(event, () => {
          if (event.target instanceof HTMLElement) {
            return event.target;
          }
          return null;
        });
      },
      // We will use the `capture` phase so that layers in between with `event.stopPropagation()`
      // don't "cancel" this outside click check. E.g.: A `Menu` inside a `DialogPanel` if the `Menu`
      // is open, and you click outside of it in the `DialogPanel` the `Menu` should close. However,
      // the `DialogPanel` has a `onClick(e) { e.stopPropagation() }` which would cancel this.
      true
    );
    useWindowEvent(
      "blur",
      (event) => {
        return handleOutsideClick(event, () => {
          return window.document.activeElement instanceof HTMLIFrameElement ? window.document.activeElement : null;
        });
      },
      true
    );
  }
  function resolveType(type, as) {
    if (type)
      return type;
    let tag = as != null ? as : "button";
    if (typeof tag === "string" && tag.toLowerCase() === "button")
      return "button";
    return void 0;
  }
  function useResolveButtonType(data, refElement) {
    let type = vue.ref(resolveType(data.value.type, data.value.as));
    vue.onMounted(() => {
      type.value = resolveType(data.value.type, data.value.as);
    });
    vue.watchEffect(() => {
      var _a;
      if (type.value)
        return;
      if (!dom(refElement))
        return;
      if (dom(refElement) instanceof HTMLButtonElement && !((_a = dom(refElement)) == null ? void 0 : _a.hasAttribute("type"))) {
        type.value = "button";
      }
    });
    return type;
  }
  var Features$1 = /* @__PURE__ */ ((Features2) => {
    Features2[Features2["None"] = 0] = "None";
    Features2[Features2["RenderStrategy"] = 1] = "RenderStrategy";
    Features2[Features2["Static"] = 2] = "Static";
    return Features2;
  })(Features$1 || {});
  function render({
    visible = true,
    features = 0,
    ourProps,
    theirProps,
    ...main
  }) {
    var _a;
    let props = mergeProps(theirProps, ourProps);
    let mainWithProps = Object.assign(main, { props });
    if (visible)
      return _render(mainWithProps);
    if (features & 2) {
      if (props.static)
        return _render(mainWithProps);
    }
    if (features & 1) {
      let strategy = ((_a = props.unmount) != null ? _a : true) ? 0 : 1;
      return match(strategy, {
        [
          0
          /* Unmount */
        ]() {
          return null;
        },
        [
          1
          /* Hidden */
        ]() {
          return _render({
            ...main,
            props: { ...props, hidden: true, style: { display: "none" } }
          });
        }
      });
    }
    return _render(mainWithProps);
  }
  function _render({
    props,
    attrs,
    slots,
    slot,
    name
  }) {
    var _a, _b;
    let { as, ...incomingProps } = omit(props, ["unmount", "static"]);
    let children = (_a = slots.default) == null ? void 0 : _a.call(slots, slot);
    let dataAttributes = {};
    if (slot) {
      let exposeState = false;
      let states = [];
      for (let [k, v] of Object.entries(slot)) {
        if (typeof v === "boolean") {
          exposeState = true;
        }
        if (v === true) {
          states.push(k);
        }
      }
      if (exposeState)
        dataAttributes[`data-headlessui-state`] = states.join(" ");
    }
    if (as === "template") {
      children = flattenFragments(children != null ? children : []);
      if (Object.keys(incomingProps).length > 0 || Object.keys(attrs).length > 0) {
        let [firstChild, ...other] = children != null ? children : [];
        if (!isValidElement(firstChild) || other.length > 0) {
          throw new Error(
            [
              'Passing props on "template"!',
              "",
              `The current component <${name} /> is rendering a "template".`,
              `However we need to passthrough the following props:`,
              Object.keys(incomingProps).concat(Object.keys(attrs)).map((name2) => name2.trim()).filter((current, idx, all) => all.indexOf(current) === idx).sort((a, z) => a.localeCompare(z)).map((line) => `  - ${line}`).join("\n"),
              "",
              "You can apply a few solutions:",
              [
                'Add an `as="..."` prop, to ensure that we render an actual element instead of a "template".',
                "Render a single element as the child so that we can forward the props onto that element."
              ].map((line) => `  - ${line}`).join("\n")
            ].join("\n")
          );
        }
        let mergedProps = mergeProps((_b = firstChild.props) != null ? _b : {}, incomingProps, dataAttributes);
        let cloned = vue.cloneVNode(firstChild, mergedProps, true);
        for (let prop in mergedProps) {
          if (prop.startsWith("on")) {
            cloned.props || (cloned.props = {});
            cloned.props[prop] = mergedProps[prop];
          }
        }
        return cloned;
      }
      if (Array.isArray(children) && children.length === 1) {
        return children[0];
      }
      return children;
    }
    return vue.h(as, Object.assign({}, incomingProps, dataAttributes), {
      default: () => children
    });
  }
  function flattenFragments(children) {
    return children.flatMap((child) => {
      if (child.type === vue.Fragment) {
        return flattenFragments(child.children);
      }
      return [child];
    });
  }
  function mergeProps(...listOfProps) {
    var _a;
    if (listOfProps.length === 0)
      return {};
    if (listOfProps.length === 1)
      return listOfProps[0];
    let target = {};
    let eventHandlers = {};
    for (let props of listOfProps) {
      for (let prop in props) {
        if (prop.startsWith("on") && typeof props[prop] === "function") {
          (_a = eventHandlers[prop]) != null ? _a : eventHandlers[prop] = [];
          eventHandlers[prop].push(props[prop]);
        } else {
          target[prop] = props[prop];
        }
      }
    }
    if (target.disabled || target["aria-disabled"]) {
      return Object.assign(
        target,
        // Set all event listeners that we collected to `undefined`. This is
        // important because of the `cloneElement` from above, which merges the
        // existing and new props, they don't just override therefore we have to
        // explicitly nullify them.
        Object.fromEntries(Object.keys(eventHandlers).map((eventName) => [eventName, void 0]))
      );
    }
    for (let eventName in eventHandlers) {
      Object.assign(target, {
        [eventName](event, ...args) {
          let handlers = eventHandlers[eventName];
          for (let handler of handlers) {
            if (event instanceof Event && event.defaultPrevented) {
              return;
            }
            handler(event, ...args);
          }
        }
      });
    }
    return target;
  }
  function compact(object) {
    let clone = Object.assign({}, object);
    for (let key in clone) {
      if (clone[key] === void 0)
        delete clone[key];
    }
    return clone;
  }
  function omit(object, keysToOmit = []) {
    let clone = Object.assign({}, object);
    for (let key of keysToOmit) {
      if (key in clone)
        delete clone[key];
    }
    return clone;
  }
  function isValidElement(input) {
    if (input == null)
      return false;
    if (typeof input.type === "string")
      return true;
    if (typeof input.type === "object")
      return true;
    if (typeof input.type === "function")
      return true;
    return false;
  }
  var Features = /* @__PURE__ */ ((Features2) => {
    Features2[Features2["None"] = 1] = "None";
    Features2[Features2["Focusable"] = 2] = "Focusable";
    Features2[Features2["Hidden"] = 4] = "Hidden";
    return Features2;
  })(Features || {});
  let Hidden = vue.defineComponent({
    name: "Hidden",
    props: {
      as: { type: [Object, String], default: "div" },
      features: {
        type: Number,
        default: 1
        /* None */
      }
    },
    setup(props, { slots, attrs }) {
      return () => {
        var _a;
        let { features, ...theirProps } = props;
        let ourProps = {
          "aria-hidden": (features & 2) === 2 ? true : (
            // @ts-ignore
            (_a = theirProps["aria-hidden"]) != null ? _a : void 0
          ),
          style: {
            position: "fixed",
            top: 1,
            left: 1,
            width: 1,
            height: 0,
            padding: 0,
            margin: -1,
            overflow: "hidden",
            clip: "rect(0, 0, 0, 0)",
            whiteSpace: "nowrap",
            borderWidth: "0",
            ...(features & 4) === 4 && !((features & 2) === 2) && { display: "none" }
          }
        };
        return render({
          ourProps,
          theirProps,
          slot: {},
          attrs,
          slots,
          name: "Hidden"
        });
      };
    }
  });
  let Context = Symbol("Context");
  var State = /* @__PURE__ */ ((State2) => {
    State2[State2["Open"] = 1] = "Open";
    State2[State2["Closed"] = 2] = "Closed";
    State2[State2["Closing"] = 4] = "Closing";
    State2[State2["Opening"] = 8] = "Opening";
    return State2;
  })(State || {});
  function useOpenClosed() {
    return vue.inject(Context, null);
  }
  function useOpenClosedProvider(value) {
    vue.provide(Context, value);
  }
  var Keys = /* @__PURE__ */ ((Keys2) => {
    Keys2["Space"] = " ";
    Keys2["Enter"] = "Enter";
    Keys2["Escape"] = "Escape";
    Keys2["Backspace"] = "Backspace";
    Keys2["Delete"] = "Delete";
    Keys2["ArrowLeft"] = "ArrowLeft";
    Keys2["ArrowUp"] = "ArrowUp";
    Keys2["ArrowRight"] = "ArrowRight";
    Keys2["ArrowDown"] = "ArrowDown";
    Keys2["Home"] = "Home";
    Keys2["End"] = "End";
    Keys2["PageUp"] = "PageUp";
    Keys2["PageDown"] = "PageDown";
    Keys2["Tab"] = "Tab";
    return Keys2;
  })(Keys || {});
  function attemptSubmit(elementInForm) {
    var _a, _b;
    let form = (_a = elementInForm == null ? void 0 : elementInForm.form) != null ? _a : elementInForm.closest("form");
    if (!form)
      return;
    for (let element of form.elements) {
      if (element === elementInForm)
        continue;
      if (element.tagName === "INPUT" && element.type === "submit" || element.tagName === "BUTTON" && element.type === "submit" || element.nodeName === "INPUT" && element.type === "image") {
        element.click();
        return;
      }
    }
    (_b = form.requestSubmit) == null ? void 0 : _b.call(form);
  }
  function useEventListener(element, type, listener, options) {
    if (env.isServer)
      return;
    vue.watchEffect((onInvalidate) => {
      element = element != null ? element : window;
      element.addEventListener(type, listener, options);
      onInvalidate(() => element.removeEventListener(type, listener, options));
    });
  }
  var Direction = /* @__PURE__ */ ((Direction2) => {
    Direction2[Direction2["Forwards"] = 0] = "Forwards";
    Direction2[Direction2["Backwards"] = 1] = "Backwards";
    return Direction2;
  })(Direction || {});
  function useTabDirection() {
    let direction = vue.ref(
      0
      /* Forwards */
    );
    useWindowEvent("keydown", (event) => {
      if (event.key === "Tab") {
        direction.value = event.shiftKey ? 1 : 0;
      }
    });
    return direction;
  }
  function useRootContainers({
    defaultContainers = [],
    portals,
    mainTreeNodeRef: _mainTreeNodeRef
  } = {}) {
    let mainTreeNodeRef = vue.ref(null);
    let ownerDocument = getOwnerDocument(mainTreeNodeRef);
    function resolveContainers() {
      var _a, _b, _c;
      let containers = [];
      for (let container of defaultContainers) {
        if (container === null)
          continue;
        if (container instanceof HTMLElement) {
          containers.push(container);
        } else if ("value" in container && container.value instanceof HTMLElement) {
          containers.push(container.value);
        }
      }
      if (portals == null ? void 0 : portals.value) {
        for (let portal of portals.value) {
          containers.push(portal);
        }
      }
      for (let container of (_a = ownerDocument == null ? void 0 : ownerDocument.querySelectorAll("html > *, body > *")) != null ? _a : []) {
        if (container === document.body)
          continue;
        if (container === document.head)
          continue;
        if (!(container instanceof HTMLElement))
          continue;
        if (container.id === "headlessui-portal-root")
          continue;
        if (container.contains(dom(mainTreeNodeRef)))
          continue;
        if (container.contains((_c = (_b = dom(mainTreeNodeRef)) == null ? void 0 : _b.getRootNode()) == null ? void 0 : _c.host))
          continue;
        if (containers.some((defaultContainer) => container.contains(defaultContainer)))
          continue;
        containers.push(container);
      }
      return containers;
    }
    return {
      resolveContainers,
      contains(element) {
        return resolveContainers().some((container) => container.contains(element));
      },
      mainTreeNodeRef,
      MainTreeNode() {
        if (_mainTreeNodeRef != null)
          return null;
        return vue.h(Hidden, { features: Features.Hidden, ref: mainTreeNodeRef });
      }
    };
  }
  function useMainTreeNode() {
    let mainTreeNodeRef = vue.ref(null);
    return {
      mainTreeNodeRef,
      MainTreeNode() {
        return vue.h(Hidden, { features: Features.Hidden, ref: mainTreeNodeRef });
      }
    };
  }
  let ForcePortalRootContext = Symbol("ForcePortalRootContext");
  function usePortalRoot() {
    return vue.inject(ForcePortalRootContext, false);
  }
  vue.defineComponent({
    name: "ForcePortalRoot",
    props: {
      as: { type: [Object, String], default: "template" },
      force: { type: Boolean, default: false }
    },
    setup(props, { slots, attrs }) {
      vue.provide(ForcePortalRootContext, props.force);
      return () => {
        let { force, ...theirProps } = props;
        return render({
          theirProps,
          ourProps: {},
          slot: {},
          slots,
          attrs,
          name: "ForcePortalRoot"
        });
      };
    }
  });
  let DescriptionContext = Symbol("DescriptionContext");
  function useDescriptionContext() {
    let context = vue.inject(DescriptionContext, null);
    if (context === null) {
      throw new Error("Missing parent");
    }
    return context;
  }
  function useDescriptions({
    slot = vue.ref({}),
    name = "Description",
    props = {}
  } = {}) {
    let descriptionIds = vue.ref([]);
    function register(value) {
      descriptionIds.value.push(value);
      return () => {
        let idx = descriptionIds.value.indexOf(value);
        if (idx === -1)
          return;
        descriptionIds.value.splice(idx, 1);
      };
    }
    vue.provide(DescriptionContext, { register, slot, name, props });
    return vue.computed(
      () => descriptionIds.value.length > 0 ? descriptionIds.value.join(" ") : void 0
    );
  }
  vue.defineComponent({
    name: "Description",
    props: {
      as: { type: [Object, String], default: "p" },
      id: { type: String, default: null }
    },
    setup(myProps, { attrs, slots }) {
      var _a;
      let id = (_a = myProps.id) != null ? _a : `headlessui-description-${useId()}`;
      let context = useDescriptionContext();
      vue.onMounted(() => vue.onUnmounted(context.register(id)));
      return () => {
        let { name = "Description", slot = vue.ref({}), props = {} } = context;
        let { ...theirProps } = myProps;
        let ourProps = {
          ...Object.entries(props).reduce(
            (acc, [key, value]) => Object.assign(acc, { [key]: vue.unref(value) }),
            {}
          ),
          id
        };
        return render({
          ourProps,
          theirProps,
          slot: slot.value,
          attrs,
          slots,
          name
        });
      };
    }
  });
  function getPortalRoot(contextElement) {
    let ownerDocument = getOwnerDocument(contextElement);
    if (!ownerDocument) {
      if (contextElement === null) {
        return null;
      }
      throw new Error(
        `[Headless UI]: Cannot find ownerDocument for contextElement: ${contextElement}`
      );
    }
    let existingRoot = ownerDocument.getElementById("headlessui-portal-root");
    if (existingRoot)
      return existingRoot;
    let root = ownerDocument.createElement("div");
    root.setAttribute("id", "headlessui-portal-root");
    return ownerDocument.body.appendChild(root);
  }
  vue.defineComponent({
    name: "Portal",
    props: {
      as: { type: [Object, String], default: "div" }
    },
    setup(props, { slots, attrs }) {
      let element = vue.ref(null);
      let ownerDocument = vue.computed(() => getOwnerDocument(element));
      let forcePortalRoot = usePortalRoot();
      let groupContext = vue.inject(PortalGroupContext, null);
      let myTarget = vue.ref(
        forcePortalRoot === true ? getPortalRoot(element.value) : groupContext == null ? getPortalRoot(element.value) : groupContext.resolveTarget()
      );
      let ready = vue.ref(false);
      vue.onMounted(() => {
        ready.value = true;
      });
      vue.watchEffect(() => {
        if (forcePortalRoot)
          return;
        if (groupContext == null)
          return;
        myTarget.value = groupContext.resolveTarget();
      });
      let parent = vue.inject(PortalParentContext, null);
      let didRegister = false;
      let instance = vue.getCurrentInstance();
      vue.watch(element, () => {
        if (didRegister)
          return;
        if (!parent)
          return;
        let domElement = dom(element);
        if (!domElement)
          return;
        vue.onUnmounted(parent.register(domElement), instance);
        didRegister = true;
      });
      vue.onUnmounted(() => {
        var _a, _b;
        let root = (_a = ownerDocument.value) == null ? void 0 : _a.getElementById("headlessui-portal-root");
        if (!root)
          return;
        if (myTarget.value !== root)
          return;
        if (myTarget.value.children.length <= 0) {
          (_b = myTarget.value.parentElement) == null ? void 0 : _b.removeChild(myTarget.value);
        }
      });
      return () => {
        if (!ready.value)
          return null;
        if (myTarget.value === null)
          return null;
        let ourProps = {
          ref: element,
          "data-headlessui-portal": ""
        };
        return vue.h(
          // @ts-expect-error Children can be an object, but TypeScript is not happy
          // with it. Once this is fixed upstream we can remove this assertion.
          vue.Teleport,
          { to: myTarget.value },
          render({
            ourProps,
            theirProps: props,
            slot: {},
            attrs,
            slots,
            name: "Portal"
          })
        );
      };
    }
  });
  let PortalParentContext = Symbol("PortalParentContext");
  function useNestedPortals() {
    let parent = vue.inject(PortalParentContext, null);
    let portals = vue.ref([]);
    function register(portal) {
      portals.value.push(portal);
      if (parent)
        parent.register(portal);
      return () => unregister(portal);
    }
    function unregister(portal) {
      let idx = portals.value.indexOf(portal);
      if (idx !== -1)
        portals.value.splice(idx, 1);
      if (parent)
        parent.unregister(portal);
    }
    let api = {
      register,
      unregister,
      portals
    };
    return [
      portals,
      vue.defineComponent({
        name: "PortalWrapper",
        setup(_, { slots }) {
          vue.provide(PortalParentContext, api);
          return () => {
            var _a;
            return (_a = slots.default) == null ? void 0 : _a.call(slots);
          };
        }
      })
    ];
  }
  let PortalGroupContext = Symbol("PortalGroupContext");
  vue.defineComponent({
    name: "PortalGroup",
    props: {
      as: { type: [Object, String], default: "template" },
      target: { type: Object, default: null }
    },
    setup(props, { attrs, slots }) {
      let api = vue.reactive({
        resolveTarget() {
          return props.target;
        }
      });
      vue.provide(PortalGroupContext, api);
      return () => {
        let { target: _, ...theirProps } = props;
        return render({
          theirProps,
          ourProps: {},
          slot: {},
          attrs,
          slots,
          name: "PortalGroup"
        });
      };
    }
  });
  let PopoverContext = Symbol("PopoverContext");
  function usePopoverContext(component) {
    let context = vue.inject(PopoverContext, null);
    if (context === null) {
      let err = new Error(`<${component} /> is missing a parent <${Popover.name} /> component.`);
      if (Error.captureStackTrace)
        Error.captureStackTrace(err, usePopoverContext);
      throw err;
    }
    return context;
  }
  let PopoverGroupContext = Symbol("PopoverGroupContext");
  function usePopoverGroupContext() {
    return vue.inject(PopoverGroupContext, null);
  }
  let PopoverPanelContext = Symbol("PopoverPanelContext");
  function usePopoverPanelContext() {
    return vue.inject(PopoverPanelContext, null);
  }
  let Popover = vue.defineComponent({
    name: "Popover",
    inheritAttrs: false,
    props: {
      as: { type: [Object, String], default: "div" }
    },
    setup(props, { slots, attrs, expose }) {
      var _a;
      let internalPopoverRef = vue.ref(null);
      expose({ el: internalPopoverRef, $el: internalPopoverRef });
      let popoverState = vue.ref(
        1
        /* Closed */
      );
      let button = vue.ref(null);
      let beforePanelSentinel = vue.ref(null);
      let afterPanelSentinel = vue.ref(null);
      let panel = vue.ref(null);
      let ownerDocument = vue.computed(() => getOwnerDocument(internalPopoverRef));
      let isPortalled = vue.computed(() => {
        var _a2, _b;
        if (!dom(button))
          return false;
        if (!dom(panel))
          return false;
        for (let root2 of document.querySelectorAll("body > *")) {
          if (Number(root2 == null ? void 0 : root2.contains(dom(button))) ^ Number(root2 == null ? void 0 : root2.contains(dom(panel)))) {
            return true;
          }
        }
        let elements = getFocusableElements();
        let buttonIdx = elements.indexOf(dom(button));
        let beforeIdx = (buttonIdx + elements.length - 1) % elements.length;
        let afterIdx = (buttonIdx + 1) % elements.length;
        let beforeElement = elements[beforeIdx];
        let afterElement = elements[afterIdx];
        if (!((_a2 = dom(panel)) == null ? void 0 : _a2.contains(beforeElement)) && !((_b = dom(panel)) == null ? void 0 : _b.contains(afterElement))) {
          return true;
        }
        return false;
      });
      let api = {
        popoverState,
        buttonId: vue.ref(null),
        panelId: vue.ref(null),
        panel,
        button,
        isPortalled,
        beforePanelSentinel,
        afterPanelSentinel,
        togglePopover() {
          popoverState.value = match(popoverState.value, {
            [
              0
              /* Open */
            ]: 1,
            [
              1
              /* Closed */
            ]: 0
            /* Open */
          });
        },
        closePopover() {
          if (popoverState.value === 1)
            return;
          popoverState.value = 1;
        },
        close(focusableElement) {
          api.closePopover();
          let restoreElement = (() => {
            if (!focusableElement)
              return dom(api.button);
            if (focusableElement instanceof HTMLElement)
              return focusableElement;
            if (focusableElement.value instanceof HTMLElement)
              return dom(focusableElement);
            return dom(api.button);
          })();
          restoreElement == null ? void 0 : restoreElement.focus();
        }
      };
      vue.provide(PopoverContext, api);
      useOpenClosedProvider(
        vue.computed(
          () => match(popoverState.value, {
            [
              0
              /* Open */
            ]: State.Open,
            [
              1
              /* Closed */
            ]: State.Closed
          })
        )
      );
      let registerBag = {
        buttonId: api.buttonId,
        panelId: api.panelId,
        close() {
          api.closePopover();
        }
      };
      let groupContext = usePopoverGroupContext();
      let registerPopover = groupContext == null ? void 0 : groupContext.registerPopover;
      let [portals, PortalWrapper] = useNestedPortals();
      let root = useRootContainers({
        mainTreeNodeRef: groupContext == null ? void 0 : groupContext.mainTreeNodeRef,
        portals,
        defaultContainers: [button, panel]
      });
      function isFocusWithinPopoverGroup() {
        var _a2, _b, _c, _d;
        return (_d = groupContext == null ? void 0 : groupContext.isFocusWithinPopoverGroup()) != null ? _d : ((_a2 = ownerDocument.value) == null ? void 0 : _a2.activeElement) && (((_b = dom(button)) == null ? void 0 : _b.contains(ownerDocument.value.activeElement)) || ((_c = dom(panel)) == null ? void 0 : _c.contains(ownerDocument.value.activeElement)));
      }
      vue.watchEffect(() => registerPopover == null ? void 0 : registerPopover(registerBag));
      useEventListener(
        (_a = ownerDocument.value) == null ? void 0 : _a.defaultView,
        "focus",
        (event) => {
          var _a2, _b;
          if (event.target === window)
            return;
          if (!(event.target instanceof HTMLElement))
            return;
          if (popoverState.value !== 0)
            return;
          if (isFocusWithinPopoverGroup())
            return;
          if (!button)
            return;
          if (!panel)
            return;
          if (root.contains(event.target))
            return;
          if ((_a2 = dom(api.beforePanelSentinel)) == null ? void 0 : _a2.contains(event.target))
            return;
          if ((_b = dom(api.afterPanelSentinel)) == null ? void 0 : _b.contains(event.target))
            return;
          api.closePopover();
        },
        true
      );
      useOutsideClick(
        root.resolveContainers,
        (event, target) => {
          var _a2;
          api.closePopover();
          if (!isFocusableElement(target, FocusableMode.Loose)) {
            event.preventDefault();
            (_a2 = dom(button)) == null ? void 0 : _a2.focus();
          }
        },
        vue.computed(
          () => popoverState.value === 0
          /* Open */
        )
      );
      return () => {
        let slot = { open: popoverState.value === 0, close: api.close };
        return vue.h(vue.Fragment, [
          vue.h(
            PortalWrapper,
            {},
            () => render({
              theirProps: { ...props, ...attrs },
              ourProps: { ref: internalPopoverRef },
              slot,
              slots,
              attrs,
              name: "Popover"
            })
          ),
          vue.h(root.MainTreeNode)
        ]);
      };
    }
  });
  let PopoverButton = vue.defineComponent({
    name: "PopoverButton",
    props: {
      as: { type: [Object, String], default: "button" },
      disabled: { type: [Boolean], default: false },
      id: { type: String, default: null }
    },
    inheritAttrs: false,
    setup(props, { attrs, slots, expose }) {
      var _a;
      let id = (_a = props.id) != null ? _a : `headlessui-popover-button-${useId()}`;
      let api = usePopoverContext("PopoverButton");
      let ownerDocument = vue.computed(() => getOwnerDocument(api.button));
      expose({ el: api.button, $el: api.button });
      vue.onMounted(() => {
        api.buttonId.value = id;
      });
      vue.onUnmounted(() => {
        api.buttonId.value = null;
      });
      let groupContext = usePopoverGroupContext();
      let closeOthers = groupContext == null ? void 0 : groupContext.closeOthers;
      let panelContext = usePopoverPanelContext();
      let isWithinPanel = vue.computed(
        () => panelContext === null ? false : panelContext.value === api.panelId.value
      );
      let elementRef = vue.ref(null);
      let sentinelId = `headlessui-focus-sentinel-${useId()}`;
      if (!isWithinPanel.value) {
        vue.watchEffect(() => {
          api.button.value = dom(elementRef);
        });
      }
      let type = useResolveButtonType(
        vue.computed(() => ({ as: props.as, type: attrs.type })),
        elementRef
      );
      function handleKeyDown(event) {
        var _a2, _b, _c, _d, _e;
        if (isWithinPanel.value) {
          if (api.popoverState.value === 1)
            return;
          switch (event.key) {
            case Keys.Space:
            case Keys.Enter:
              event.preventDefault();
              (_b = (_a2 = event.target).click) == null ? void 0 : _b.call(_a2);
              api.closePopover();
              (_c = dom(api.button)) == null ? void 0 : _c.focus();
              break;
          }
        } else {
          switch (event.key) {
            case Keys.Space:
            case Keys.Enter:
              event.preventDefault();
              event.stopPropagation();
              if (api.popoverState.value === 1)
                closeOthers == null ? void 0 : closeOthers(api.buttonId.value);
              api.togglePopover();
              break;
            case Keys.Escape:
              if (api.popoverState.value !== 0)
                return closeOthers == null ? void 0 : closeOthers(api.buttonId.value);
              if (!dom(api.button))
                return;
              if (((_d = ownerDocument.value) == null ? void 0 : _d.activeElement) && !((_e = dom(api.button)) == null ? void 0 : _e.contains(ownerDocument.value.activeElement)))
                return;
              event.preventDefault();
              event.stopPropagation();
              api.closePopover();
              break;
          }
        }
      }
      function handleKeyUp(event) {
        if (isWithinPanel.value)
          return;
        if (event.key === Keys.Space) {
          event.preventDefault();
        }
      }
      function handleClick(event) {
        var _a2, _b;
        if (props.disabled)
          return;
        if (isWithinPanel.value) {
          api.closePopover();
          (_a2 = dom(api.button)) == null ? void 0 : _a2.focus();
        } else {
          event.preventDefault();
          event.stopPropagation();
          if (api.popoverState.value === 1)
            closeOthers == null ? void 0 : closeOthers(api.buttonId.value);
          api.togglePopover();
          (_b = dom(api.button)) == null ? void 0 : _b.focus();
        }
      }
      function handleMouseDown(event) {
        event.preventDefault();
        event.stopPropagation();
      }
      let direction = useTabDirection();
      function handleFocus() {
        let el = dom(api.panel);
        if (!el)
          return;
        function run() {
          let result = match(direction.value, {
            [Direction.Forwards]: () => focusIn(el, Focus.First),
            [Direction.Backwards]: () => focusIn(el, Focus.Last)
          });
          if (result === FocusResult.Error) {
            focusIn(
              getFocusableElements().filter((el2) => el2.dataset.headlessuiFocusGuard !== "true"),
              match(direction.value, {
                [Direction.Forwards]: Focus.Next,
                [Direction.Backwards]: Focus.Previous
              }),
              { relativeTo: dom(api.button) }
            );
          }
        }
        {
          run();
        }
      }
      return () => {
        let visible = api.popoverState.value === 0;
        let slot = { open: visible };
        let { ...theirProps } = props;
        let ourProps = isWithinPanel.value ? {
          ref: elementRef,
          type: type.value,
          onKeydown: handleKeyDown,
          onClick: handleClick
        } : {
          ref: elementRef,
          id,
          type: type.value,
          "aria-expanded": api.popoverState.value === 0,
          "aria-controls": dom(api.panel) ? api.panelId.value : void 0,
          disabled: props.disabled ? true : void 0,
          onKeydown: handleKeyDown,
          onKeyup: handleKeyUp,
          onClick: handleClick,
          onMousedown: handleMouseDown
        };
        return vue.h(vue.Fragment, [
          render({
            ourProps,
            theirProps: { ...attrs, ...theirProps },
            slot,
            attrs,
            slots,
            name: "PopoverButton"
          }),
          visible && !isWithinPanel.value && api.isPortalled.value && vue.h(Hidden, {
            id: sentinelId,
            features: Features.Focusable,
            "data-headlessui-focus-guard": true,
            as: "button",
            type: "button",
            onFocus: handleFocus
          })
        ]);
      };
    }
  });
  vue.defineComponent({
    name: "PopoverOverlay",
    props: {
      as: { type: [Object, String], default: "div" },
      static: { type: Boolean, default: false },
      unmount: { type: Boolean, default: true }
    },
    setup(props, { attrs, slots }) {
      let api = usePopoverContext("PopoverOverlay");
      let id = `headlessui-popover-overlay-${useId()}`;
      let usesOpenClosedState = useOpenClosed();
      let visible = vue.computed(() => {
        if (usesOpenClosedState !== null) {
          return (usesOpenClosedState.value & State.Open) === State.Open;
        }
        return api.popoverState.value === 0;
      });
      function handleClick() {
        api.closePopover();
      }
      return () => {
        let slot = {
          open: api.popoverState.value === 0
          /* Open */
        };
        let ourProps = {
          id,
          "aria-hidden": true,
          onClick: handleClick
        };
        return render({
          ourProps,
          theirProps: props,
          slot,
          attrs,
          slots,
          features: Features$1.RenderStrategy | Features$1.Static,
          visible: visible.value,
          name: "PopoverOverlay"
        });
      };
    }
  });
  let PopoverPanel = vue.defineComponent({
    name: "PopoverPanel",
    props: {
      as: { type: [Object, String], default: "div" },
      static: { type: Boolean, default: false },
      unmount: { type: Boolean, default: true },
      focus: { type: Boolean, default: false },
      id: { type: String, default: null }
    },
    inheritAttrs: false,
    setup(props, { attrs, slots, expose }) {
      var _a;
      let id = (_a = props.id) != null ? _a : `headlessui-popover-panel-${useId()}`;
      let { focus } = props;
      let api = usePopoverContext("PopoverPanel");
      let ownerDocument = vue.computed(() => getOwnerDocument(api.panel));
      let beforePanelSentinelId = `headlessui-focus-sentinel-before-${useId()}`;
      let afterPanelSentinelId = `headlessui-focus-sentinel-after-${useId()}`;
      expose({ el: api.panel, $el: api.panel });
      vue.onMounted(() => {
        api.panelId.value = id;
      });
      vue.onUnmounted(() => {
        api.panelId.value = null;
      });
      vue.provide(PopoverPanelContext, api.panelId);
      vue.watchEffect(() => {
        var _a2, _b;
        if (!focus)
          return;
        if (api.popoverState.value !== 0)
          return;
        if (!api.panel)
          return;
        let activeElement = (_a2 = ownerDocument.value) == null ? void 0 : _a2.activeElement;
        if ((_b = dom(api.panel)) == null ? void 0 : _b.contains(activeElement))
          return;
        focusIn(dom(api.panel), Focus.First);
      });
      let usesOpenClosedState = useOpenClosed();
      let visible = vue.computed(() => {
        if (usesOpenClosedState !== null) {
          return (usesOpenClosedState.value & State.Open) === State.Open;
        }
        return api.popoverState.value === 0;
      });
      function handleKeyDown(event) {
        var _a2, _b;
        switch (event.key) {
          case Keys.Escape:
            if (api.popoverState.value !== 0)
              return;
            if (!dom(api.panel))
              return;
            if (ownerDocument.value && !((_a2 = dom(api.panel)) == null ? void 0 : _a2.contains(ownerDocument.value.activeElement))) {
              return;
            }
            event.preventDefault();
            event.stopPropagation();
            api.closePopover();
            (_b = dom(api.button)) == null ? void 0 : _b.focus();
            break;
        }
      }
      function handleBlur(event) {
        var _a2, _b, _c, _d, _e;
        let el = event.relatedTarget;
        if (!el)
          return;
        if (!dom(api.panel))
          return;
        if ((_a2 = dom(api.panel)) == null ? void 0 : _a2.contains(el))
          return;
        api.closePopover();
        if (((_c = (_b = dom(api.beforePanelSentinel)) == null ? void 0 : _b.contains) == null ? void 0 : _c.call(_b, el)) || ((_e = (_d = dom(api.afterPanelSentinel)) == null ? void 0 : _d.contains) == null ? void 0 : _e.call(_d, el))) {
          el.focus({ preventScroll: true });
        }
      }
      let direction = useTabDirection();
      function handleBeforeFocus() {
        let el = dom(api.panel);
        if (!el)
          return;
        function run() {
          match(direction.value, {
            [Direction.Forwards]: () => {
              var _a2;
              let result = focusIn(el, Focus.First);
              if (result === FocusResult.Error) {
                (_a2 = dom(api.afterPanelSentinel)) == null ? void 0 : _a2.focus();
              }
            },
            [Direction.Backwards]: () => {
              var _a2;
              (_a2 = dom(api.button)) == null ? void 0 : _a2.focus({ preventScroll: true });
            }
          });
        }
        {
          run();
        }
      }
      function handleAfterFocus() {
        let el = dom(api.panel);
        if (!el)
          return;
        function run() {
          match(direction.value, {
            [Direction.Forwards]: () => {
              let button = dom(api.button);
              let panel = dom(api.panel);
              if (!button)
                return;
              let elements = getFocusableElements();
              let idx = elements.indexOf(button);
              let before = elements.slice(0, idx + 1);
              let after = elements.slice(idx + 1);
              let combined = [...after, ...before];
              for (let element of combined.slice()) {
                if (element.dataset.headlessuiFocusGuard === "true" || (panel == null ? void 0 : panel.contains(element))) {
                  let idx2 = combined.indexOf(element);
                  if (idx2 !== -1)
                    combined.splice(idx2, 1);
                }
              }
              focusIn(combined, Focus.First, { sorted: false });
            },
            [Direction.Backwards]: () => {
              var _a2;
              let result = focusIn(el, Focus.Previous);
              if (result === FocusResult.Error) {
                (_a2 = dom(api.button)) == null ? void 0 : _a2.focus();
              }
            }
          });
        }
        {
          run();
        }
      }
      return () => {
        let slot = {
          open: api.popoverState.value === 0,
          close: api.close
        };
        let { focus: _focus, ...theirProps } = props;
        let ourProps = {
          ref: api.panel,
          id,
          onKeydown: handleKeyDown,
          onFocusout: focus && api.popoverState.value === 0 ? handleBlur : void 0,
          tabIndex: -1
        };
        return render({
          ourProps,
          theirProps: { ...attrs, ...theirProps },
          attrs,
          slot,
          slots: {
            ...slots,
            default: (...args) => {
              var _a2;
              return [
                vue.h(vue.Fragment, [
                  visible.value && api.isPortalled.value && vue.h(Hidden, {
                    id: beforePanelSentinelId,
                    ref: api.beforePanelSentinel,
                    features: Features.Focusable,
                    "data-headlessui-focus-guard": true,
                    as: "button",
                    type: "button",
                    onFocus: handleBeforeFocus
                  }),
                  (_a2 = slots.default) == null ? void 0 : _a2.call(slots, ...args),
                  visible.value && api.isPortalled.value && vue.h(Hidden, {
                    id: afterPanelSentinelId,
                    ref: api.afterPanelSentinel,
                    features: Features.Focusable,
                    "data-headlessui-focus-guard": true,
                    as: "button",
                    type: "button",
                    onFocus: handleAfterFocus
                  })
                ])
              ];
            }
          },
          features: Features$1.RenderStrategy | Features$1.Static,
          visible: visible.value,
          name: "PopoverPanel"
        });
      };
    }
  });
  vue.defineComponent({
    name: "PopoverGroup",
    inheritAttrs: false,
    props: {
      as: { type: [Object, String], default: "div" }
    },
    setup(props, { attrs, slots, expose }) {
      let groupRef = vue.ref(null);
      let popovers = vue.shallowRef([]);
      let ownerDocument = vue.computed(() => getOwnerDocument(groupRef));
      let root = useMainTreeNode();
      expose({ el: groupRef, $el: groupRef });
      function unregisterPopover(registerBag) {
        let idx = popovers.value.indexOf(registerBag);
        if (idx !== -1)
          popovers.value.splice(idx, 1);
      }
      function registerPopover(registerBag) {
        popovers.value.push(registerBag);
        return () => {
          unregisterPopover(registerBag);
        };
      }
      function isFocusWithinPopoverGroup() {
        var _a;
        let owner = ownerDocument.value;
        if (!owner)
          return false;
        let element = owner.activeElement;
        if ((_a = dom(groupRef)) == null ? void 0 : _a.contains(element))
          return true;
        return popovers.value.some((bag) => {
          var _a2, _b;
          return ((_a2 = owner.getElementById(bag.buttonId.value)) == null ? void 0 : _a2.contains(element)) || ((_b = owner.getElementById(bag.panelId.value)) == null ? void 0 : _b.contains(element));
        });
      }
      function closeOthers(buttonId) {
        for (let popover of popovers.value) {
          if (popover.buttonId.value !== buttonId)
            popover.close();
        }
      }
      vue.provide(PopoverGroupContext, {
        registerPopover,
        unregisterPopover,
        isFocusWithinPopoverGroup,
        closeOthers,
        mainTreeNodeRef: root.mainTreeNodeRef
      });
      return () => {
        let ourProps = { ref: groupRef };
        return vue.h(vue.Fragment, [
          render({
            ourProps,
            theirProps: { ...props, ...attrs },
            slot: {},
            attrs,
            slots,
            name: "PopoverGroup"
          }),
          vue.h(root.MainTreeNode)
        ]);
      };
    }
  });
  let LabelContext = Symbol("LabelContext");
  function useLabelContext() {
    let context = vue.inject(LabelContext, null);
    if (context === null) {
      let err = new Error("You used a <Label /> component, but it is not inside a parent.");
      if (Error.captureStackTrace)
        Error.captureStackTrace(err, useLabelContext);
      throw err;
    }
    return context;
  }
  function useLabels({
    slot = {},
    name = "Label",
    props = {}
  } = {}) {
    let labelIds = vue.ref([]);
    function register(value) {
      labelIds.value.push(value);
      return () => {
        let idx = labelIds.value.indexOf(value);
        if (idx === -1)
          return;
        labelIds.value.splice(idx, 1);
      };
    }
    vue.provide(LabelContext, { register, slot, name, props });
    return vue.computed(() => labelIds.value.length > 0 ? labelIds.value.join(" ") : void 0);
  }
  vue.defineComponent({
    name: "Label",
    props: {
      as: { type: [Object, String], default: "label" },
      passive: { type: [Boolean], default: false },
      id: { type: String, default: null }
    },
    setup(myProps, { slots, attrs }) {
      var _a;
      let id = (_a = myProps.id) != null ? _a : `headlessui-label-${useId()}`;
      let context = useLabelContext();
      vue.onMounted(() => vue.onUnmounted(context.register(id)));
      return () => {
        let { name = "Label", slot = {}, props = {} } = context;
        let { passive, ...theirProps } = myProps;
        let ourProps = {
          ...Object.entries(props).reduce(
            (acc, [key, value]) => Object.assign(acc, { [key]: vue.unref(value) }),
            {}
          ),
          id
        };
        if (passive) {
          delete ourProps["onClick"];
          delete ourProps["htmlFor"];
          delete theirProps["onClick"];
        }
        return render({
          ourProps,
          theirProps,
          slot,
          attrs,
          slots,
          name
        });
      };
    }
  });
  let GroupContext = Symbol("GroupContext");
  vue.defineComponent({
    name: "SwitchGroup",
    props: {
      as: { type: [Object, String], default: "template" }
    },
    setup(props, { slots, attrs }) {
      let switchRef = vue.ref(null);
      let labelledby = useLabels({
        name: "SwitchLabel",
        props: {
          htmlFor: vue.computed(() => {
            var _a;
            return (_a = switchRef.value) == null ? void 0 : _a.id;
          }),
          onClick(event) {
            if (!switchRef.value)
              return;
            if (event.currentTarget.tagName === "LABEL") {
              event.preventDefault();
            }
            switchRef.value.click();
            switchRef.value.focus({ preventScroll: true });
          }
        }
      });
      let describedby = useDescriptions({ name: "SwitchDescription" });
      let api = { switchRef, labelledby, describedby };
      vue.provide(GroupContext, api);
      return () => render({ theirProps: props, ourProps: {}, slot: {}, slots, attrs, name: "SwitchGroup" });
    }
  });
  let Switch = vue.defineComponent({
    name: "Switch",
    emits: { "update:modelValue": (_value) => true },
    props: {
      as: { type: [Object, String], default: "button" },
      modelValue: { type: Boolean, default: void 0 },
      defaultChecked: { type: Boolean, optional: true },
      form: { type: String, optional: true },
      name: { type: String, optional: true },
      value: { type: String, optional: true },
      id: { type: String, default: null }
    },
    inheritAttrs: false,
    setup(props, { emit, attrs, slots, expose }) {
      var _a;
      let id = (_a = props.id) != null ? _a : `headlessui-switch-${useId()}`;
      let api = vue.inject(GroupContext, null);
      let [checked, theirOnChange] = useControllable(
        vue.computed(() => props.modelValue),
        (value) => emit("update:modelValue", value),
        vue.computed(() => props.defaultChecked)
      );
      function toggle() {
        theirOnChange(!checked.value);
      }
      let internalSwitchRef = vue.ref(null);
      let switchRef = api === null ? internalSwitchRef : api.switchRef;
      let type = useResolveButtonType(
        vue.computed(() => ({ as: props.as, type: attrs.type })),
        switchRef
      );
      expose({ el: switchRef, $el: switchRef });
      function handleClick(event) {
        event.preventDefault();
        toggle();
      }
      function handleKeyUp(event) {
        if (event.key === Keys.Space) {
          event.preventDefault();
          toggle();
        } else if (event.key === Keys.Enter) {
          attemptSubmit(event.currentTarget);
        }
      }
      function handleKeyPress(event) {
        event.preventDefault();
      }
      let form = vue.computed(() => {
        var _a2, _b;
        return (_b = (_a2 = dom(switchRef)) == null ? void 0 : _a2.closest) == null ? void 0 : _b.call(_a2, "form");
      });
      vue.onMounted(() => {
        vue.watch(
          [form],
          () => {
            if (!form.value)
              return;
            if (props.defaultChecked === void 0)
              return;
            function handle() {
              theirOnChange(props.defaultChecked);
            }
            form.value.addEventListener("reset", handle);
            return () => {
              var _a2;
              (_a2 = form.value) == null ? void 0 : _a2.removeEventListener("reset", handle);
            };
          },
          { immediate: true }
        );
      });
      return () => {
        let { name, value, form: form2, ...theirProps } = props;
        let slot = { checked: checked.value };
        let ourProps = {
          id,
          ref: switchRef,
          role: "switch",
          type: type.value,
          tabIndex: 0,
          "aria-checked": checked.value,
          "aria-labelledby": api == null ? void 0 : api.labelledby.value,
          "aria-describedby": api == null ? void 0 : api.describedby.value,
          onClick: handleClick,
          onKeyup: handleKeyUp,
          onKeypress: handleKeyPress
        };
        return vue.h(vue.Fragment, [
          name != null && checked.value != null ? vue.h(
            Hidden,
            compact({
              features: Features.Hidden,
              as: "input",
              type: "checkbox",
              hidden: true,
              readOnly: true,
              checked: checked.value,
              form: form2,
              name,
              value
            })
          ) : null,
          render({
            ourProps,
            theirProps: { ...attrs, ...omit(theirProps, ["modelValue", "defaultChecked"]) },
            slot,
            attrs,
            slots,
            name: "Switch"
          })
        ]);
      };
    }
  });
  const _export_sfc = (sfc, props) => {
    const target = sfc.__vccOpts || sfc;
    for (const [key, val] of props) {
      target[key] = val;
    }
    return target;
  };
  const _sfc_main$5 = {};
  const _hoisted_1$4 = { class: "my-1.5 border-b border-token-border-light" };
  function _sfc_render$3(_ctx, _cache) {
    return vue.openBlock(), vue.createElementBlock("div", _hoisted_1$4);
  }
  const DividerItem = /* @__PURE__ */ _export_sfc(_sfc_main$5, [["render", _sfc_render$3]]);
  const _sfc_main$4 = {};
  const _hoisted_1$3 = {
    width: "20",
    height: "20",
    viewBox: "0 0 20 20",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  };
  const _hoisted_2$3 = /* @__PURE__ */ vue.createElementVNode("path", {
    "fill-rule": "evenodd",
    "clip-rule": "evenodd",
    d: "M10 2C5.58172 2 2 5.58172 2 10C2 14.4183 5.58172 18 10 18C14.4183 18 18 14.4183 18 10C18 5.58172 14.4183 2 10 2ZM0 10C0 4.47715 4.47715 0 10 0C15.5228 0 20 4.47715 20 10C20 15.5228 15.5228 20 10 20C4.47715 20 0 15.5228 0 10Z",
    fill: "currentColor",
    opacity: "0.16"
  }, null, -1);
  const _hoisted_3$3 = [
    _hoisted_2$3
  ];
  function _sfc_render$2(_ctx, _cache) {
    return vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$3, _hoisted_3$3);
  }
  const CircleIcon = /* @__PURE__ */ _export_sfc(_sfc_main$4, [["render", _sfc_render$2]]);
  const _sfc_main$3 = {};
  const _hoisted_1$2 = {
    width: "20",
    height: "20",
    viewBox: "0 0 20 20",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  };
  const _hoisted_2$2 = /* @__PURE__ */ vue.createElementVNode("path", {
    "fill-rule": "evenodd",
    "clip-rule": "evenodd",
    d: "M0 10C0 4.47715 4.47715 0 10 0C15.5228 0 20 4.47715 20 10C20 15.5228 15.5228 20 10 20C4.47715 20 0 15.5228 0 10ZM14.0755 5.93219C14.5272 6.25003 14.6356 6.87383 14.3178 7.32549L9.56781 14.0755C9.39314 14.3237 9.11519 14.4792 8.81226 14.4981C8.50934 14.517 8.21422 14.3973 8.01006 14.1727L5.51006 11.4227C5.13855 11.014 5.16867 10.3816 5.57733 10.0101C5.98598 9.63855 6.61843 9.66867 6.98994 10.0773L8.65042 11.9039L12.6822 6.17451C13 5.72284 13.6238 5.61436 14.0755 5.93219Z",
    fill: "currentColor"
  }, null, -1);
  const _hoisted_3$2 = [
    _hoisted_2$2
  ];
  function _sfc_render$1(_ctx, _cache) {
    return vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$2, _hoisted_3$2);
  }
  const CircleCheckIcon = /* @__PURE__ */ _export_sfc(_sfc_main$3, [["render", _sfc_render$1]]);
  const _hoisted_1$1 = { class: "flex grow items-center justify-between gap-2" };
  const _hoisted_2$1 = { class: "flex items-center gap-3" };
  const _hoisted_3$1 = { class: "text-token-text-tertiary" };
  const _sfc_main$2 = {
    __name: "ModelItem",
    props: {
      title: {
        type: String,
        required: true
      },
      description: {
        type: String,
        required: true
      },
      isSelected: {
        type: Boolean,
        default: false
      }
    },
    setup(__props) {
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass(["flex gap-2 m-1.5 rounded p-2.5 text-sm cursor-pointer focus:ring-0 hover:bg-token-main-surface-secondary radix-disabled:pointer-events-none radix-disabled:opacity-50 group !pr-3", { "!opacity-100": __props.isSelected }])
        }, [
          vue.createElementVNode("div", _hoisted_1$1, [
            vue.createElementVNode("div", null, [
              vue.createElementVNode("div", _hoisted_2$1, [
                vue.createElementVNode("div", null, [
                  vue.createTextVNode(vue.toDisplayString(__props.title) + " ", 1),
                  vue.createElementVNode("div", _hoisted_3$1, vue.toDisplayString(__props.description), 1)
                ])
              ])
            ]),
            (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(__props.isSelected ? CircleCheckIcon : CircleIcon), { class: "icon-md flex-shrink-0" }))
          ])
        ], 2);
      };
    }
  };
  const _sfc_main$1 = {};
  const _hoisted_1 = {
    width: "16",
    height: "17",
    viewBox: "0 0 16 17",
    fill: "none"
  };
  const _hoisted_2 = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M11.3346 7.83203L8.00131 11.1654L4.66797 7.83203",
    stroke: "currentColor",
    "stroke-width": "2",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null, -1);
  const _hoisted_3 = [
    _hoisted_2
  ];
  function _sfc_render(_ctx, _cache) {
    return vue.openBlock(), vue.createElementBlock("svg", _hoisted_1, _hoisted_3);
  }
  const ChevronDownIcon = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["render", _sfc_render]]);
  const extraModels = [
    {
      slug: "text-davinci-002-render-sha-mobile",
      title: "GPT-3.5 (Mobile)",
      description: "An experimental model that does not guarantee usability",
      tags: ["gpt3.5", "mobile", "unofficial"]
    },
    {
      slug: "gpt-4-mobile",
      title: "GPT-4 (Mobile)",
      description: "An experimental model that does not guarantee usability",
      tags: ["gpt4", "mobile", "unofficial"]
    }
  ];
  const models = vue.reactive({
    all: [],
    update(newModels) {
      this.all = newModels.concat(
        extraModels.filter(
          (model) => newModels.some((m) => m.tags.includes("gpt4")) || !model.tags.includes("gpt4")
        )
      );
    }
  });
  const LOCAL_STORAGE_KEY = "github.com/hydrotho/ChatGPT_Model_Switcher";
  function getInitialState() {
    const defaultState = {
      isEnabled: false,
      selectedModelSlug: "text-davinci-002-render-sha"
    };
    try {
      const savedState = localStorage.getItem(LOCAL_STORAGE_KEY);
      if (savedState) {
        return JSON.parse(savedState);
      }
    } catch (error) {
      console.warn(
        "[ChatGPT_Model_Switcher]",
        "Failed to restore state from localStorage, falling back to default state"
      );
    }
    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(defaultState));
    return defaultState;
  }
  const state = vue.reactive(getInitialState());
  vue.watch(state, (newState) => {
    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(newState));
  });
  const _sfc_main = {
    __name: "App",
    setup(__props) {
      const anchorPopoverPanel = vue.ref();
      const stylePopoverPanel = vue.ref();
      const groupedModels = vue.computed(() => {
        return [
          models.all.filter(
            (model) => model.tags.includes("gpt3.5") && !model.tags.includes("unofficial")
          ),
          models.all.filter((model) => model.tags.includes("gpt4") && !model.tags.includes("unofficial")),
          models.all.filter((model) => model.tags.includes("unofficial"))
        ].filter((group) => group.length > 0);
      });
      const selectModel = (slug) => {
        state.selectedModelSlug = slug;
      };
      vue.onMounted(async () => {
        const rect = anchorPopoverPanel.value.getBoundingClientRect();
        stylePopoverPanel.value = {
          position: "fixed",
          right: `${document.documentElement.clientWidth - rect.right}px`,
          top: `${rect.bottom}px`
        };
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock(vue.Fragment, null, [
          vue.createVNode(vue.unref(Switch), {
            modelValue: vue.unref(state).isEnabled,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => vue.unref(state).isEnabled = $event),
            class: vue.normalizeClass(["cursor-pointer relative shrink-0 rounded-full h-[20px] w-[32px]", vue.unref(state).isEnabled ? "bg-green-600" : "bg-gray-200"])
          }, {
            default: vue.withCtx(() => [
              vue.createElementVNode("span", {
                class: "flex items-center justify-center rounded-full transition-transform duration-100 will-change-transform bg-white shadow-[0_1px_2px_rgba(0,0,0,0.45)] h-[16px] w-[16px]",
                style: vue.normalizeStyle(vue.unref(state).isEnabled ? "transform: translateX(14px)" : "transform: translateX(0.125rem)")
              }, null, 4)
            ]),
            _: 1
          }, 8, ["modelValue", "class"]),
          vue.createVNode(vue.unref(Popover), { class: "relative" }, {
            default: vue.withCtx(() => [
              vue.createVNode(vue.unref(PopoverButton), { class: "group flex cursor-pointer items-center gap-1 rounded-xl py-2 px-3 text-lg font-medium hover:bg-token-main-surface-secondary" }, {
                default: vue.withCtx(() => [
                  vue.createTextVNode(" ChatGPT Model Switcher "),
                  vue.createVNode(ChevronDownIcon, { class: "text-token-text-tertiary" })
                ]),
                _: 1
              }),
              vue.createElementVNode("div", {
                ref_key: "anchorPopoverPanel",
                ref: anchorPopoverPanel,
                class: "absolute right-0"
              }, null, 512),
              (vue.openBlock(), vue.createBlock(vue.Teleport, { to: "body" }, [
                vue.createVNode(vue.Transition, {
                  "enter-active-class": "transition duration-200 ease-out",
                  "enter-from-class": "translate-y-1 opacity-0",
                  "enter-to-class": "translate-y-0 opacity-100",
                  "leave-active-class": "transition duration-150 ease-in",
                  "leave-from-class": "translate-y-0 opacity-100",
                  "leave-to-class": "translate-y-1 opacity-0"
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(vue.unref(PopoverPanel), {
                      class: "popover mt-2 min-w-[340px] max-w-xs overflow-hidden rounded-lg border border-token-border-light bg-token-main-surface-primary shadow-lg",
                      style: vue.normalizeStyle(stylePopoverPanel.value)
                    }, {
                      default: vue.withCtx(() => [
                        (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(groupedModels.value, (group, index) => {
                          return vue.openBlock(), vue.createElementBlock(vue.Fragment, null, [
                            (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(group, (model) => {
                              return vue.openBlock(), vue.createBlock(_sfc_main$2, {
                                key: model.slug,
                                title: model.title,
                                description: model.description,
                                isSelected: model.slug === vue.unref(state).selectedModelSlug,
                                onClick: ($event) => selectModel(model.slug)
                              }, null, 8, ["title", "description", "isSelected", "onClick"]);
                            }), 128)),
                            index < groupedModels.value.length - 1 ? (vue.openBlock(), vue.createBlock(DividerItem, { key: index })) : vue.createCommentVNode("", true)
                          ], 64);
                        }), 256))
                      ]),
                      _: 1
                    }, 8, ["style"])
                  ]),
                  _: 1
                })
              ]))
            ]),
            _: 1
          })
        ], 64);
      };
    }
  };
  let app = null;
  function mountApp(mountPoint) {
    if (app) {
      app.unmount();
      app = null;
    }
    const rootContainer = document.createElement("div");
    rootContainer.className = "flex items-center gap-2";
    rootContainer.id = "chatgpt-model-switcher";
    const wrapper = document.createElement("div");
    wrapper.className = "flex gap-2 pr-1";
    wrapper.appendChild(rootContainer);
    wrapper.appendChild(mountPoint.removeChild(mountPoint.lastChild));
    mountPoint.appendChild(wrapper);
    app = vue.createApp(_sfc_main);
    app.mount(rootContainer);
  }
  new MutationObserver((mutations) => {
    for (const mutation of mutations) {
      if (mutation.type === "childList") {
        const mountPoint = document.querySelector("main div.sticky");
        if (mountPoint && Array.from(mountPoint.childNodes).some((child) => child.hasChildNodes()) && !document.getElementById("chatgpt-model-switcher")) {
          mountApp(mountPoint);
          break;
        }
      }
    }
  }).observe(document.body, {
    subtree: true,
    childList: true
  });
  const CONVERSATION_API_URL = "/backend-api/conversation";
  const MODELS_API_URL = "/backend-api/models";
  async function handleModelsApi(fetchPromise) {
    return fetchPromise.then(async (response) => {
      if (response.ok) {
        const data = await response.clone().json();
        models.update(data.models);
      }
      return response;
    });
  }
  window.fetch = new Proxy(window.fetch, {
    apply: async function(target, that, args) {
      let resource = args[0];
      let options = args[1];
      if (state.isEnabled && resource.endsWith(CONVERSATION_API_URL) && options.method === "POST") {
        const requestBody = JSON.parse(options.body);
        requestBody.model = state.selectedModelSlug;
        options = { ...options, body: JSON.stringify(requestBody) };
        args[0] = resource;
        args[1] = options;
      }
      const fetchPromise = Reflect.apply(target, that, args);
      if (resource.includes(MODELS_API_URL) && options.method === "GET") {
        return handleModelsApi(fetchPromise);
      }
      return fetchPromise;
    }
  });

})(Vue);","requires":[{"meta":{"name":"vue.global.prod.js","url":"https://cdn.jsdelivr.net/npm/vue@3.4.21/dist/vue.global.prod.js#sha256-SWMQFEHe1+QgwFZl58YWsvLjhRyZ4c+K+E0p1vEOd9o=","sri":{"type":"sha256","value":"4963101441ded7e420c05665e7c616b2f2e3851c99e1cf8af84d29d6f10e77da"},"ts":1713950301647,"mimetype":"text/javascript"},"source":"/**
* vue v3.4.21
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
var Vue=function(e){"use strict";function t(e,t){const n=new Set(e.split(","));return t?e=>n.has(e.toLowerCase()):e=>n.has(e)}const n={},s=[],o=()=>{},r=()=>!1,i=e=>111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&(e.charCodeAt(2)>122||e.charCodeAt(2)<97),l=e=>e.startsWith("onUpdate:"),c=Object.assign,a=(e,t)=>{const n=e.indexOf(t);n>-1&&e.splice(n,1)},u=Object.prototype.hasOwnProperty,d=(e,t)=>u.call(e,t),p=Array.isArray,h=e=>"[object Map]"===x(e),f=e=>"[object Set]"===x(e),m=e=>"[object Date]"===x(e),g=e=>"function"==typeof e,v=e=>"string"==typeof e,y=e=>"symbol"==typeof e,b=e=>null!==e&&"object"==typeof e,_=e=>(b(e)||g(e))&&g(e.then)&&g(e.catch),S=Object.prototype.toString,x=e=>S.call(e),C=e=>x(e).slice(8,-1),k=e=>"[object Object]"===x(e),T=e=>v(e)&&"NaN"!==e&&"-"!==e[0]&&""+parseInt(e,10)===e,w=t(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),E=t("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo"),N=e=>{const t=Object.create(null);return n=>t[n]||(t[n]=e(n))},A=/-(\w)/g,I=N((e=>e.replace(A,((e,t)=>t?t.toUpperCase():"")))),R=/\B([A-Z])/g,O=N((e=>e.replace(R,"-$1").toLowerCase())),L=N((e=>e.charAt(0).toUpperCase()+e.slice(1))),F=N((e=>e?`on${L(e)}`:"")),M=(e,t)=>!Object.is(e,t),P=(e,t)=>{for(let n=0;n<e.length;n++)e[n](t)},$=(e,t,n)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:n})},B=e=>{const t=parseFloat(e);return isNaN(t)?e:t},V=e=>{const t=v(e)?Number(e):NaN;return isNaN(t)?e:t};let D;const U=()=>D||(D="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{}),j=t("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,console,Error");function H(e){if(p(e)){const t={};for(let n=0;n<e.length;n++){const s=e[n],o=v(s)?z(s):H(s);if(o)for(const e in o)t[e]=o[e]}return t}if(v(e)||b(e))return e}const q=/;(?![^(]*\))/g,W=/:([^]+)/,K=/\/\*[^]*?\*\//g;function z(e){const t={};return e.replace(K,"").split(q).forEach((e=>{if(e){const n=e.split(W);n.length>1&&(t[n[0].trim()]=n[1].trim())}})),t}function G(e){let t="";if(v(e))t=e;else if(p(e))for(let n=0;n<e.length;n++){const s=G(e[n]);s&&(t+=s+" ")}else if(b(e))for(const n in e)e[n]&&(t+=n+" ");return t.trim()}const J=t("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,hgroup,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot"),X=t("svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistantLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view"),Q=t("annotation,annotation-xml,maction,maligngroup,malignmark,math,menclose,merror,mfenced,mfrac,mfraction,mglyph,mi,mlabeledtr,mlongdiv,mmultiscripts,mn,mo,mover,mpadded,mphantom,mprescripts,mroot,mrow,ms,mscarries,mscarry,msgroup,msline,mspace,msqrt,msrow,mstack,mstyle,msub,msubsup,msup,mtable,mtd,mtext,mtr,munder,munderover,none,semantics"),Z=t("area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr"),Y=t("itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly");function ee(e){return!!e||""===e}function te(e,t){if(e===t)return!0;let n=m(e),s=m(t);if(n||s)return!(!n||!s)&&e.getTime()===t.getTime();if(n=y(e),s=y(t),n||s)return e===t;if(n=p(e),s=p(t),n||s)return!(!n||!s)&&function(e,t){if(e.length!==t.length)return!1;let n=!0;for(let s=0;n&&s<e.length;s++)n=te(e[s],t[s]);return n}(e,t);if(n=b(e),s=b(t),n||s){if(!n||!s)return!1;if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const n in e){const s=e.hasOwnProperty(n),o=t.hasOwnProperty(n);if(s&&!o||!s&&o||!te(e[n],t[n]))return!1}}return String(e)===String(t)}function ne(e,t){return e.findIndex((e=>te(e,t)))}const se=(e,t)=>t&&t.__v_isRef?se(e,t.value):h(t)?{[`Map(${t.size})`]:[...t.entries()].reduce(((e,[t,n],s)=>(e[oe(t,s)+" =>"]=n,e)),{})}:f(t)?{[`Set(${t.size})`]:[...t.values()].map((e=>oe(e)))}:y(t)?oe(t):!b(t)||p(t)||k(t)?t:String(t),oe=(e,t="")=>{var n;return y(e)?`Symbol(${null!=(n=e.description)?n:t})`:e};let re,ie;class le{constructor(e=!1){this.detached=e,this._active=!0,this.effects=[],this.cleanups=[],this.parent=re,!e&&re&&(this.index=(re.scopes||(re.scopes=[])).push(this)-1)}get active(){return this._active}run(e){if(this._active){const t=re;try{return re=this,e()}finally{re=t}}}on(){re=this}off(){re=this.parent}stop(e){if(this._active){let t,n;for(t=0,n=this.effects.length;t<n;t++)this.effects[t].stop();for(t=0,n=this.cleanups.length;t<n;t++)this.cleanups[t]();if(this.scopes)for(t=0,n=this.scopes.length;t<n;t++)this.scopes[t].stop(!0);if(!this.detached&&this.parent&&!e){const e=this.parent.scopes.pop();e&&e!==this&&(this.parent.scopes[this.index]=e,e.index=this.index)}this.parent=void 0,this._active=!1}}}function ce(e,t=re){t&&t.active&&t.effects.push(e)}function ae(){return re}class ue{constructor(e,t,n,s){this.fn=e,this.trigger=t,this.scheduler=n,this.active=!0,this.deps=[],this._dirtyLevel=4,this._trackId=0,this._runnings=0,this._shouldSchedule=!1,this._depsLength=0,ce(this,s)}get dirty(){if(2===this._dirtyLevel||3===this._dirtyLevel){this._dirtyLevel=1,ye();for(let e=0;e<this._depsLength;e++){const t=this.deps[e];if(t.computed&&(de(t.computed),this._dirtyLevel>=4))break}1===this._dirtyLevel&&(this._dirtyLevel=0),be()}return this._dirtyLevel>=4}set dirty(e){this._dirtyLevel=e?4:0}run(){if(this._dirtyLevel=0,!this.active)return this.fn();let e=me,t=ie;try{return me=!0,ie=this,this._runnings++,pe(this),this.fn()}finally{he(this),this._runnings--,ie=t,me=e}}stop(){var e;this.active&&(pe(this),he(this),null==(e=this.onStop)||e.call(this),this.active=!1)}}function de(e){return e.value}function pe(e){e._trackId++,e._depsLength=0}function he(e){if(e.deps.length>e._depsLength){for(let t=e._depsLength;t<e.deps.length;t++)fe(e.deps[t],e);e.deps.length=e._depsLength}}function fe(e,t){const n=e.get(t);void 0!==n&&t._trackId!==n&&(e.delete(t),0===e.size&&e.cleanup())}let me=!0,ge=0;const ve=[];function ye(){ve.push(me),me=!1}function be(){const e=ve.pop();me=void 0===e||e}function _e(){ge++}function Se(){for(ge--;!ge&&Ce.length;)Ce.shift()()}function xe(e,t,n){if(t.get(e)!==e._trackId){t.set(e,e._trackId);const n=e.deps[e._depsLength];n!==t?(n&&fe(n,e),e.deps[e._depsLength++]=t):e._depsLength++}}const Ce=[];function ke(e,t,n){_e();for(const s of e.keys()){let n;s._dirtyLevel<t&&(null!=n?n:n=e.get(s)===s._trackId)&&(s._shouldSchedule||(s._shouldSchedule=0===s._dirtyLevel),s._dirtyLevel=t),s._shouldSchedule&&(null!=n?n:n=e.get(s)===s._trackId)&&(s.trigger(),s._runnings&&!s.allowRecurse||2===s._dirtyLevel||(s._shouldSchedule=!1,s.scheduler&&Ce.push(s.scheduler)))}Se()}const Te=(e,t)=>{const n=new Map;return n.cleanup=e,n.computed=t,n},we=new WeakMap,Ee=Symbol(""),Ne=Symbol("");function Ae(e,t,n){if(me&&ie){let t=we.get(e);t||we.set(e,t=new Map);let s=t.get(n);s||t.set(n,s=Te((()=>t.delete(n)))),xe(ie,s)}}function Ie(e,t,n,s,o,r){const i=we.get(e);if(!i)return;let l=[];if("clear"===t)l=[...i.values()];else if("length"===n&&p(e)){const e=Number(s);i.forEach(((t,n)=>{("length"===n||!y(n)&&n>=e)&&l.push(t)}))}else switch(void 0!==n&&l.push(i.get(n)),t){case"add":p(e)?T(n)&&l.push(i.get("length")):(l.push(i.get(Ee)),h(e)&&l.push(i.get(Ne)));break;case"delete":p(e)||(l.push(i.get(Ee)),h(e)&&l.push(i.get(Ne)));break;case"set":h(e)&&l.push(i.get(Ee))}_e();for(const c of l)c&&ke(c,4);Se()}const Re=t("__proto__,__v_isRef,__isVue"),Oe=new Set(Object.getOwnPropertyNames(Symbol).filter((e=>"arguments"!==e&&"caller"!==e)).map((e=>Symbol[e])).filter(y)),Le=Fe();function Fe(){const e={};return["includes","indexOf","lastIndexOf"].forEach((t=>{e[t]=function(...e){const n=Ct(this);for(let t=0,o=this.length;t<o;t++)Ae(n,0,t+"");const s=n[t](...e);return-1===s||!1===s?n[t](...e.map(Ct)):s}})),["push","pop","shift","unshift","splice"].forEach((t=>{e[t]=function(...e){ye(),_e();const n=Ct(this)[t].apply(this,e);return Se(),be(),n}})),e}function Me(e){const t=Ct(this);return Ae(t,0,e),t.hasOwnProperty(e)}class Pe{constructor(e=!1,t=!1){this._isReadonly=e,this._isShallow=t}get(e,t,n){const s=this._isReadonly,o=this._isShallow;if("__v_isReactive"===t)return!s;if("__v_isReadonly"===t)return s;if("__v_isShallow"===t)return o;if("__v_raw"===t)return n===(s?o?ft:ht:o?pt:dt).get(e)||Object.getPrototypeOf(e)===Object.getPrototypeOf(n)?e:void 0;const r=p(e);if(!s){if(r&&d(Le,t))return Reflect.get(Le,t,n);if("hasOwnProperty"===t)return Me}const i=Reflect.get(e,t,n);return(y(t)?Oe.has(t):Re(t))?i:(s||Ae(e,0,t),o?i:It(i)?r&&T(t)?i:i.value:b(i)?s?vt(i):mt(i):i)}}class $e extends Pe{constructor(e=!1){super(!1,e)}set(e,t,n,s){let o=e[t];if(!this._isShallow){const t=_t(o);if(St(n)||_t(n)||(o=Ct(o),n=Ct(n)),!p(e)&&It(o)&&!It(n))return!t&&(o.value=n,!0)}const r=p(e)&&T(t)?Number(t)<e.length:d(e,t),i=Reflect.set(e,t,n,s);return e===Ct(s)&&(r?M(n,o)&&Ie(e,"set",t,n):Ie(e,"add",t,n)),i}deleteProperty(e,t){const n=d(e,t),s=Reflect.deleteProperty(e,t);return s&&n&&Ie(e,"delete",t,void 0),s}has(e,t){const n=Reflect.has(e,t);return y(t)&&Oe.has(t)||Ae(e,0,t),n}ownKeys(e){return Ae(e,0,p(e)?"length":Ee),Reflect.ownKeys(e)}}class Be extends Pe{constructor(e=!1){super(!0,e)}set(e,t){return!0}deleteProperty(e,t){return!0}}const Ve=new $e,De=new Be,Ue=new $e(!0),je=new Be(!0),He=e=>e,qe=e=>Reflect.getPrototypeOf(e);function We(e,t,n=!1,s=!1){const o=Ct(e=e.__v_raw),r=Ct(t);n||(M(t,r)&&Ae(o,0,t),Ae(o,0,r));const{has:i}=qe(o),l=s?He:n?wt:Tt;return i.call(o,t)?l(e.get(t)):i.call(o,r)?l(e.get(r)):void(e!==o&&e.get(t))}function Ke(e,t=!1){const n=this.__v_raw,s=Ct(n),o=Ct(e);return t||(M(e,o)&&Ae(s,0,e),Ae(s,0,o)),e===o?n.has(e):n.has(e)||n.has(o)}function ze(e,t=!1){return e=e.__v_raw,!t&&Ae(Ct(e),0,Ee),Reflect.get(e,"size",e)}function Ge(e){e=Ct(e);const t=Ct(this);return qe(t).has.call(t,e)||(t.add(e),Ie(t,"add",e,e)),this}function Je(e,t){t=Ct(t);const n=Ct(this),{has:s,get:o}=qe(n);let r=s.call(n,e);r||(e=Ct(e),r=s.call(n,e));const i=o.call(n,e);return n.set(e,t),r?M(t,i)&&Ie(n,"set",e,t):Ie(n,"add",e,t),this}function Xe(e){const t=Ct(this),{has:n,get:s}=qe(t);let o=n.call(t,e);o||(e=Ct(e),o=n.call(t,e)),s&&s.call(t,e);const r=t.delete(e);return o&&Ie(t,"delete",e,void 0),r}function Qe(){const e=Ct(this),t=0!==e.size,n=e.clear();return t&&Ie(e,"clear",void 0,void 0),n}function Ze(e,t){return function(n,s){const o=this,r=o.__v_raw,i=Ct(r),l=t?He:e?wt:Tt;return!e&&Ae(i,0,Ee),r.forEach(((e,t)=>n.call(s,l(e),l(t),o)))}}function Ye(e,t,n){return function(...s){const o=this.__v_raw,r=Ct(o),i=h(r),l="entries"===e||e===Symbol.iterator&&i,c="keys"===e&&i,a=o[e](...s),u=n?He:t?wt:Tt;return!t&&Ae(r,0,c?Ne:Ee),{next(){const{value:e,done:t}=a.next();return t?{value:e,done:t}:{value:l?[u(e[0]),u(e[1])]:u(e),done:t}},[Symbol.iterator](){return this}}}}function et(e){return function(...t){return"delete"!==e&&("clear"===e?void 0:this)}}function tt(){const e={get(e){return We(this,e)},get size(){return ze(this)},has:Ke,add:Ge,set:Je,delete:Xe,clear:Qe,forEach:Ze(!1,!1)},t={get(e){return We(this,e,!1,!0)},get size(){return ze(this)},has:Ke,add:Ge,set:Je,delete:Xe,clear:Qe,forEach:Ze(!1,!0)},n={get(e){return We(this,e,!0)},get size(){return ze(this,!0)},has(e){return Ke.call(this,e,!0)},add:et("add"),set:et("set"),delete:et("delete"),clear:et("clear"),forEach:Ze(!0,!1)},s={get(e){return We(this,e,!0,!0)},get size(){return ze(this,!0)},has(e){return Ke.call(this,e,!0)},add:et("add"),set:et("set"),delete:et("delete"),clear:et("clear"),forEach:Ze(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach((o=>{e[o]=Ye(o,!1,!1),n[o]=Ye(o,!0,!1),t[o]=Ye(o,!1,!0),s[o]=Ye(o,!0,!0)})),[e,n,t,s]}const[nt,st,ot,rt]=tt();function it(e,t){const n=t?e?rt:ot:e?st:nt;return(t,s,o)=>"__v_isReactive"===s?!e:"__v_isReadonly"===s?e:"__v_raw"===s?t:Reflect.get(d(n,s)&&s in t?n:t,s,o)}const lt={get:it(!1,!1)},ct={get:it(!1,!0)},at={get:it(!0,!1)},ut={get:it(!0,!0)},dt=new WeakMap,pt=new WeakMap,ht=new WeakMap,ft=new WeakMap;function mt(e){return _t(e)?e:yt(e,!1,Ve,lt,dt)}function gt(e){return yt(e,!1,Ue,ct,pt)}function vt(e){return yt(e,!0,De,at,ht)}function yt(e,t,n,s,o){if(!b(e))return e;if(e.__v_raw&&(!t||!e.__v_isReactive))return e;const r=o.get(e);if(r)return r;const i=(l=e).__v_skip||!Object.isExtensible(l)?0:function(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}(C(l));var l;if(0===i)return e;const c=new Proxy(e,2===i?s:n);return o.set(e,c),c}function bt(e){return _t(e)?bt(e.__v_raw):!(!e||!e.__v_isReactive)}function _t(e){return!(!e||!e.__v_isReadonly)}function St(e){return!(!e||!e.__v_isShallow)}function xt(e){return bt(e)||_t(e)}function Ct(e){const t=e&&e.__v_raw;return t?Ct(t):e}function kt(e){return Object.isExtensible(e)&&$(e,"__v_skip",!0),e}const Tt=e=>b(e)?mt(e):e,wt=e=>b(e)?vt(e):e;class Et{constructor(e,t,n,s){this.getter=e,this._setter=t,this.dep=void 0,this.__v_isRef=!0,this.__v_isReadonly=!1,this.effect=new ue((()=>e(this._value)),(()=>At(this,2===this.effect._dirtyLevel?2:3))),this.effect.computed=this,this.effect.active=this._cacheable=!s,this.__v_isReadonly=n}get value(){const e=Ct(this);return e._cacheable&&!e.effect.dirty||!M(e._value,e._value=e.effect.run())||At(e,4),Nt(e),e.effect._dirtyLevel>=2&&At(e,2),e._value}set value(e){this._setter(e)}get _dirty(){return this.effect.dirty}set _dirty(e){this.effect.dirty=e}}function Nt(e){var t;me&&ie&&(e=Ct(e),xe(ie,null!=(t=e.dep)?t:e.dep=Te((()=>e.dep=void 0),e instanceof Et?e:void 0)))}function At(e,t=4,n){const s=(e=Ct(e)).dep;s&&ke(s,t)}function It(e){return!(!e||!0!==e.__v_isRef)}function Rt(e){return Ot(e,!1)}function Ot(e,t){return It(e)?e:new Lt(e,t)}class Lt{constructor(e,t){this.__v_isShallow=t,this.dep=void 0,this.__v_isRef=!0,this._rawValue=t?e:Ct(e),this._value=t?e:Tt(e)}get value(){return Nt(this),this._value}set value(e){const t=this.__v_isShallow||St(e)||_t(e);e=t?e:Ct(e),M(e,this._rawValue)&&(this._rawValue=e,this._value=t?e:Tt(e),At(this,4))}}function Ft(e){return It(e)?e.value:e}const Mt={get:(e,t,n)=>Ft(Reflect.get(e,t,n)),set:(e,t,n,s)=>{const o=e[t];return It(o)&&!It(n)?(o.value=n,!0):Reflect.set(e,t,n,s)}};function Pt(e){return bt(e)?e:new Proxy(e,Mt)}class $t{constructor(e){this.dep=void 0,this.__v_isRef=!0;const{get:t,set:n}=e((()=>Nt(this)),(()=>At(this)));this._get=t,this._set=n}get value(){return this._get()}set value(e){this._set(e)}}function Bt(e){return new $t(e)}class Vt{constructor(e,t,n){this._object=e,this._key=t,this._defaultValue=n,this.__v_isRef=!0}get value(){const e=this._object[this._key];return void 0===e?this._defaultValue:e}set value(e){this._object[this._key]=e}get dep(){return e=Ct(this._object),t=this._key,null==(n=we.get(e))?void 0:n.get(t);var e,t,n}}class Dt{constructor(e){this._getter=e,this.__v_isRef=!0,this.__v_isReadonly=!0}get value(){return this._getter()}}function Ut(e,t,n){const s=e[t];return It(s)?s:new Vt(e,t,n)}function jt(e,t,n,s){try{return s?e(...s):e()}catch(o){qt(o,t,n)}}function Ht(e,t,n,s){if(g(e)){const o=jt(e,t,n,s);return o&&_(o)&&o.catch((e=>{qt(e,t,n)})),o}const o=[];for(let r=0;r<e.length;r++)o.push(Ht(e[r],t,n,s));return o}function qt(e,t,n,s=!0){if(t){let s=t.parent;const o=t.proxy,r=`https://vuejs.org/error-reference/#runtime-${n}`;for(;s;){const t=s.ec;if(t)for(let n=0;n<t.length;n++)if(!1===t[n](e,o,r))return;s=s.parent}const i=t.appContext.config.errorHandler;if(i)return void jt(i,null,10,[e,o,r])}!function(e,t,n,s=!0){console.error(e)}(e,0,0,s)}let Wt=!1,Kt=!1;const zt=[];let Gt=0;const Jt=[];let Xt=null,Qt=0;const Zt=Promise.resolve();let Yt=null;function en(e){const t=Yt||Zt;return e?t.then(this?e.bind(this):e):t}function tn(e){zt.length&&zt.includes(e,Wt&&e.allowRecurse?Gt+1:Gt)||(null==e.id?zt.push(e):zt.splice(function(e){let t=Gt+1,n=zt.length;for(;t<n;){const s=t+n>>>1,o=zt[s],r=ln(o);r<e||r===e&&o.pre?t=s+1:n=s}return t}(e.id),0,e),nn())}function nn(){Wt||Kt||(Kt=!0,Yt=Zt.then(an))}function sn(e){p(e)?Jt.push(...e):Xt&&Xt.includes(e,e.allowRecurse?Qt+1:Qt)||Jt.push(e),nn()}function on(e,t,n=(Wt?Gt+1:0)){for(;n<zt.length;n++){const t=zt[n];if(t&&t.pre){if(e&&t.id!==e.uid)continue;zt.splice(n,1),n--,t()}}}function rn(e){if(Jt.length){const e=[...new Set(Jt)].sort(((e,t)=>ln(e)-ln(t)));if(Jt.length=0,Xt)return void Xt.push(...e);for(Xt=e,Qt=0;Qt<Xt.length;Qt++)Xt[Qt]();Xt=null,Qt=0}}const ln=e=>null==e.id?1/0:e.id,cn=(e,t)=>{const n=ln(e)-ln(t);if(0===n){if(e.pre&&!t.pre)return-1;if(t.pre&&!e.pre)return 1}return n};function an(e){Kt=!1,Wt=!0,zt.sort(cn);try{for(Gt=0;Gt<zt.length;Gt++){const e=zt[Gt];e&&!1!==e.active&&jt(e,null,14)}}finally{Gt=0,zt.length=0,rn(),Wt=!1,Yt=null,(zt.length||Jt.length)&&an()}}function un(e,t,...s){if(e.isUnmounted)return;const o=e.vnode.props||n;let r=s;const i=t.startsWith("update:"),l=i&&t.slice(7);if(l&&l in o){const e=`${"modelValue"===l?"model":l}Modifiers`,{number:t,trim:i}=o[e]||n;i&&(r=s.map((e=>v(e)?e.trim():e))),t&&(r=s.map(B))}let c,a=o[c=F(t)]||o[c=F(I(t))];!a&&i&&(a=o[c=F(O(t))]),a&&Ht(a,e,6,r);const u=o[c+"Once"];if(u){if(e.emitted){if(e.emitted[c])return}else e.emitted={};e.emitted[c]=!0,Ht(u,e,6,r)}}function dn(e,t,n=!1){const s=t.emitsCache,o=s.get(e);if(void 0!==o)return o;const r=e.emits;let i={},l=!1;if(!g(e)){const s=e=>{const n=dn(e,t,!0);n&&(l=!0,c(i,n))};!n&&t.mixins.length&&t.mixins.forEach(s),e.extends&&s(e.extends),e.mixins&&e.mixins.forEach(s)}return r||l?(p(r)?r.forEach((e=>i[e]=null)):c(i,r),b(e)&&s.set(e,i),i):(b(e)&&s.set(e,null),null)}function pn(e,t){return!(!e||!i(t))&&(t=t.slice(2).replace(/Once$/,""),d(e,t[0].toLowerCase()+t.slice(1))||d(e,O(t))||d(e,t))}let hn=null,fn=null;function mn(e){const t=hn;return hn=e,fn=e&&e.type.__scopeId||null,t}function gn(e,t=hn,n){if(!t)return e;if(e._n)return e;const s=(...n)=>{s._d&&Ho(-1);const o=mn(t);let r;try{r=e(...n)}finally{mn(o),s._d&&Ho(1)}return r};return s._n=!0,s._c=!0,s._d=!0,s}function vn(e){const{type:t,vnode:n,proxy:s,withProxy:o,props:r,propsOptions:[i],slots:c,attrs:a,emit:u,render:d,renderCache:p,data:h,setupState:f,ctx:m,inheritAttrs:g}=e;let v,y;const b=mn(e);try{if(4&n.shapeFlag){const e=o||s;v=nr(d.call(e,e,p,r,f,h,m)),y=a}else{const e=t;0,v=nr(e(r,e.length>1?{attrs:a,slots:c,emit:u}:null)),y=t.props?a:yn(a)}}catch(S){Bo.length=0,qt(S,e,1),v=Zo(Po)}let _=v;if(y&&!1!==g){const e=Object.keys(y),{shapeFlag:t}=_;e.length&&7&t&&(i&&e.some(l)&&(y=bn(y,i)),_=er(_,y))}return n.dirs&&(_=er(_),_.dirs=_.dirs?_.dirs.concat(n.dirs):n.dirs),n.transition&&(_.transition=n.transition),v=_,mn(b),v}const yn=e=>{let t;for(const n in e)("class"===n||"style"===n||i(n))&&((t||(t={}))[n]=e[n]);return t},bn=(e,t)=>{const n={};for(const s in e)l(s)&&s.slice(9)in t||(n[s]=e[s]);return n};function _n(e,t,n){const s=Object.keys(t);if(s.length!==Object.keys(e).length)return!0;for(let o=0;o<s.length;o++){const r=s[o];if(t[r]!==e[r]&&!pn(n,r))return!0}return!1}function Sn({vnode:e,parent:t},n){for(;t;){const s=t.subTree;if(s.suspense&&s.suspense.activeBranch===e&&(s.el=e.el),s!==e)break;(e=t.vnode).el=n,t=t.parent}}const xn="components";const Cn=Symbol.for("v-ndc");function kn(e,t,n=!0,s=!1){const o=hn||ar;if(o){const n=o.type;if(e===xn){const e=kr(n,!1);if(e&&(e===t||e===I(t)||e===L(I(t))))return n}const r=Tn(o[e]||n[e],t)||Tn(o.appContext[e],t);return!r&&s?n:r}}function Tn(e,t){return e&&(e[t]||e[I(t)]||e[L(I(t))])}const wn=e=>e.__isSuspense;let En=0;const Nn={name:"Suspense",__isSuspense:!0,process(e,t,n,s,o,r,i,l,c,a){if(null==e)!function(e,t,n,s,o,r,i,l,c){const{p:a,o:{createElement:u}}=c,d=u("div"),p=e.suspense=In(e,o,s,t,d,n,r,i,l,c);a(null,p.pendingBranch=e.ssContent,d,null,s,p,r,i),p.deps>0?(An(e,"onPending"),An(e,"onFallback"),a(null,e.ssFallback,t,n,s,null,r,i),Ln(p,e.ssFallback)):p.resolve(!1,!0)}(t,n,s,o,r,i,l,c,a);else{if(r&&r.deps>0&&!e.suspense.isInFallback)return t.suspense=e.suspense,t.suspense.vnode=t,void(t.el=e.el);!function(e,t,n,s,o,r,i,l,{p:c,um:a,o:{createElement:u}}){const d=t.suspense=e.suspense;d.vnode=t,t.el=e.el;const p=t.ssContent,h=t.ssFallback,{activeBranch:f,pendingBranch:m,isInFallback:g,isHydrating:v}=d;if(m)d.pendingBranch=p,zo(p,m)?(c(m,p,d.hiddenContainer,null,o,d,r,i,l),d.deps<=0?d.resolve():g&&(v||(c(f,h,n,s,o,null,r,i,l),Ln(d,h)))):(d.pendingId=En++,v?(d.isHydrating=!1,d.activeBranch=m):a(m,o,d),d.deps=0,d.effects.length=0,d.hiddenContainer=u("div"),g?(c(null,p,d.hiddenContainer,null,o,d,r,i,l),d.deps<=0?d.resolve():(c(f,h,n,s,o,null,r,i,l),Ln(d,h))):f&&zo(p,f)?(c(f,p,n,s,o,d,r,i,l),d.resolve(!0)):(c(null,p,d.hiddenContainer,null,o,d,r,i,l),d.deps<=0&&d.resolve()));else if(f&&zo(p,f))c(f,p,n,s,o,d,r,i,l),Ln(d,p);else if(An(t,"onPending"),d.pendingBranch=p,d.pendingId=512&p.shapeFlag?p.component.suspenseId:En++,c(null,p,d.hiddenContainer,null,o,d,r,i,l),d.deps<=0)d.resolve();else{const{timeout:e,pendingId:t}=d;e>0?setTimeout((()=>{d.pendingId===t&&d.fallback(h)}),e):0===e&&d.fallback(h)}}(e,t,n,s,o,i,l,c,a)}},hydrate:function(e,t,n,s,o,r,i,l,c){const a=t.suspense=In(t,s,n,e.parentNode,document.createElement("div"),null,o,r,i,l,!0),u=c(e,a.pendingBranch=t.ssContent,n,a,r,i);0===a.deps&&a.resolve(!1,!0);return u},create:In,normalize:function(e){const{shapeFlag:t,children:n}=e,s=32&t;e.ssContent=Rn(s?n.default:n),e.ssFallback=s?Rn(n.fallback):Zo(Po)}};function An(e,t){const n=e.props&&e.props[t];g(n)&&n()}function In(e,t,n,s,o,r,i,l,c,a,u=!1){const{p:d,m:p,um:h,n:f,o:{parentNode:m,remove:g}}=a;let v;const y=function(e){var t;return null!=(null==(t=e.props)?void 0:t.suspensible)&&!1!==e.props.suspensible}(e);y&&(null==t?void 0:t.pendingBranch)&&(v=t.pendingId,t.deps++);const b=e.props?V(e.props.timeout):void 0,_=r,S={vnode:e,parent:t,parentComponent:n,namespace:i,container:s,hiddenContainer:o,deps:0,pendingId:En++,timeout:"number"==typeof b?b:-1,activeBranch:null,pendingBranch:null,isInFallback:!u,isHydrating:u,isUnmounted:!1,effects:[],resolve(e=!1,n=!1){const{vnode:s,activeBranch:o,pendingBranch:i,pendingId:l,effects:c,parentComponent:a,container:u}=S;let d=!1;S.isHydrating?S.isHydrating=!1:e||(d=o&&i.transition&&"out-in"===i.transition.mode,d&&(o.transition.afterLeave=()=>{l===S.pendingId&&(p(i,u,r===_?f(o):r,0),sn(c))}),o&&(m(o.el)!==S.hiddenContainer&&(r=f(o)),h(o,a,S,!0)),d||p(i,u,r,0)),Ln(S,i),S.pendingBranch=null,S.isInFallback=!1;let g=S.parent,b=!1;for(;g;){if(g.pendingBranch){g.effects.push(...c),b=!0;break}g=g.parent}b||d||sn(c),S.effects=[],y&&t&&t.pendingBranch&&v===t.pendingId&&(t.deps--,0!==t.deps||n||t.resolve()),An(s,"onResolve")},fallback(e){if(!S.pendingBranch)return;const{vnode:t,activeBranch:n,parentComponent:s,container:o,namespace:r}=S;An(t,"onFallback");const i=f(n),a=()=>{S.isInFallback&&(d(null,e,o,i,s,null,r,l,c),Ln(S,e))},u=e.transition&&"out-in"===e.transition.mode;u&&(n.transition.afterLeave=a),S.isInFallback=!0,h(n,s,null,!0),u||a()},move(e,t,n){S.activeBranch&&p(S.activeBranch,e,t,n),S.container=e},next:()=>S.activeBranch&&f(S.activeBranch),registerDep(e,t){const n=!!S.pendingBranch;n&&S.deps++;const s=e.vnode.el;e.asyncDep.catch((t=>{qt(t,e,0)})).then((o=>{if(e.isUnmounted||S.isUnmounted||S.pendingId!==e.suspenseId)return;e.asyncResolved=!0;const{vnode:r}=e;br(e,o,!1),s&&(r.el=s);const l=!s&&e.subTree.el;t(e,r,m(s||e.subTree.el),s?null:f(e.subTree),S,i,c),l&&g(l),Sn(e,r.el),n&&0==--S.deps&&S.resolve()}))},unmount(e,t){S.isUnmounted=!0,S.activeBranch&&h(S.activeBranch,n,e,t),S.pendingBranch&&h(S.pendingBranch,n,e,t)}};return S}function Rn(e){let t;if(g(e)){const n=jo&&e._c;n&&(e._d=!1,Do()),e=e(),n&&(e._d=!0,t=Vo,Uo())}if(p(e)){const t=function(e,t=!0){let n;for(let s=0;s<e.length;s++){const t=e[s];if(!Ko(t))return;if(t.type!==Po||"v-if"===t.children){if(n)return;n=t}}return n}(e);e=t}return e=nr(e),t&&!e.dynamicChildren&&(e.dynamicChildren=t.filter((t=>t!==e))),e}function On(e,t){t&&t.pendingBranch?p(e)?t.effects.push(...e):t.effects.push(e):sn(e)}function Ln(e,t){e.activeBranch=t;const{vnode:n,parentComponent:s}=e;let o=t.el;for(;!o&&t.component;)o=(t=t.component.subTree).el;n.el=o,s&&s.subTree===n&&(s.vnode.el=o,Sn(s,o))}const Fn=Symbol.for("v-scx");function Mn(e,t){return Vn(e,null,{flush:"post"})}function Pn(e,t){return Vn(e,null,{flush:"sync"})}const $n={};function Bn(e,t,n){return Vn(e,t,n)}function Vn(e,t,{immediate:s,deep:r,flush:i,once:l}=n){if(t&&l){const e=t;t=(...t)=>{e(...t),C()}}const c=ar,u=e=>!0===r?e:jn(e,!1===r?1:void 0);let d,h,f=!1,m=!1;if(It(e)?(d=()=>e.value,f=St(e)):bt(e)?(d=()=>u(e),f=!0):p(e)?(m=!0,f=e.some((e=>bt(e)||St(e))),d=()=>e.map((e=>It(e)?e.value:bt(e)?u(e):g(e)?jt(e,c,2):void 0))):d=g(e)?t?()=>jt(e,c,2):()=>(h&&h(),Ht(e,c,3,[v])):o,t&&r){const e=d;d=()=>jn(e())}let v=e=>{h=S.onStop=()=>{jt(e,c,4),h=S.onStop=void 0}},y=m?new Array(e.length).fill($n):$n;const b=()=>{if(S.active&&S.dirty)if(t){const e=S.run();(r||f||(m?e.some(((e,t)=>M(e,y[t]))):M(e,y)))&&(h&&h(),Ht(t,c,3,[e,y===$n?void 0:m&&y[0]===$n?[]:y,v]),y=e)}else S.run()};let _;b.allowRecurse=!!t,"sync"===i?_=b:"post"===i?_=()=>yo(b,c&&c.suspense):(b.pre=!0,c&&(b.id=c.uid),_=()=>tn(b));const S=new ue(d,o,_),x=ae(),C=()=>{S.stop(),x&&a(x.effects,S)};return t?s?b():y=S.run():"post"===i?yo(S.run.bind(S),c&&c.suspense):S.run(),C}function Dn(e,t,n){const s=this.proxy,o=v(e)?e.includes(".")?Un(s,e):()=>s[e]:e.bind(s,s);let r;g(t)?r=t:(r=t.handler,n=t);const i=hr(this),l=Vn(o,r.bind(s),n);return i(),l}function Un(e,t){const n=t.split(".");return()=>{let t=e;for(let e=0;e<n.length&&t;e++)t=t[n[e]];return t}}function jn(e,t,n=0,s){if(!b(e)||e.__v_skip)return e;if(t&&t>0){if(n>=t)return e;n++}if((s=s||new Set).has(e))return e;if(s.add(e),It(e))jn(e.value,t,n,s);else if(p(e))for(let o=0;o<e.length;o++)jn(e[o],t,n,s);else if(f(e)||h(e))e.forEach((e=>{jn(e,t,n,s)}));else if(k(e))for(const o in e)jn(e[o],t,n,s);return e}function Hn(e,t,n,s){const o=e.dirs,r=t&&t.dirs;for(let i=0;i<o.length;i++){const l=o[i];r&&(l.oldValue=r[i].value);let c=l.dir[s];c&&(ye(),Ht(c,n,8,[e.el,l,e,t]),be())}}const qn=Symbol("_leaveCb"),Wn=Symbol("_enterCb");function Kn(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return vs((()=>{e.isMounted=!0})),_s((()=>{e.isUnmounting=!0})),e}const zn=[Function,Array],Gn={mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:zn,onEnter:zn,onAfterEnter:zn,onEnterCancelled:zn,onBeforeLeave:zn,onLeave:zn,onAfterLeave:zn,onLeaveCancelled:zn,onBeforeAppear:zn,onAppear:zn,onAfterAppear:zn,onAppearCancelled:zn},Jn={name:"BaseTransition",props:Gn,setup(e,{slots:t}){const n=ur(),s=Kn();return()=>{const o=t.default&&ts(t.default(),!0);if(!o||!o.length)return;let r=o[0];if(o.length>1)for(const e of o)if(e.type!==Po){r=e;break}const i=Ct(e),{mode:l}=i;if(s.isLeaving)return Zn(r);const c=Yn(r);if(!c)return Zn(r);const a=Qn(c,i,s,n);es(c,a);const u=n.subTree,d=u&&Yn(u);if(d&&d.type!==Po&&!zo(c,d)){const e=Qn(d,i,s,n);if(es(d,e),"out-in"===l)return s.isLeaving=!0,e.afterLeave=()=>{s.isLeaving=!1,!1!==n.update.active&&(n.effect.dirty=!0,n.update())},Zn(r);"in-out"===l&&c.type!==Po&&(e.delayLeave=(e,t,n)=>{Xn(s,d)[String(d.key)]=d,e[qn]=()=>{t(),e[qn]=void 0,delete a.delayedLeave},a.delayedLeave=n})}return r}}};function Xn(e,t){const{leavingVNodes:n}=e;let s=n.get(t.type);return s||(s=Object.create(null),n.set(t.type,s)),s}function Qn(e,t,n,s){const{appear:o,mode:r,persisted:i=!1,onBeforeEnter:l,onEnter:c,onAfterEnter:a,onEnterCancelled:u,onBeforeLeave:d,onLeave:h,onAfterLeave:f,onLeaveCancelled:m,onBeforeAppear:g,onAppear:v,onAfterAppear:y,onAppearCancelled:b}=t,_=String(e.key),S=Xn(n,e),x=(e,t)=>{e&&Ht(e,s,9,t)},C=(e,t)=>{const n=t[1];x(e,t),p(e)?e.every((e=>e.length<=1))&&n():e.length<=1&&n()},k={mode:r,persisted:i,beforeEnter(t){let s=l;if(!n.isMounted){if(!o)return;s=g||l}t[qn]&&t[qn](!0);const r=S[_];r&&zo(e,r)&&r.el[qn]&&r.el[qn](),x(s,[t])},enter(e){let t=c,s=a,r=u;if(!n.isMounted){if(!o)return;t=v||c,s=y||a,r=b||u}let i=!1;const l=e[Wn]=t=>{i||(i=!0,x(t?r:s,[e]),k.delayedLeave&&k.delayedLeave(),e[Wn]=void 0)};t?C(t,[e,l]):l()},leave(t,s){const o=String(e.key);if(t[Wn]&&t[Wn](!0),n.isUnmounting)return s();x(d,[t]);let r=!1;const i=t[qn]=n=>{r||(r=!0,s(),x(n?m:f,[t]),t[qn]=void 0,S[o]===e&&delete S[o])};S[o]=e,h?C(h,[t,i]):i()},clone:e=>Qn(e,t,n,s)};return k}function Zn(e){if(rs(e))return(e=er(e)).children=null,e}function Yn(e){return rs(e)?e.children?e.children[0]:void 0:e}function es(e,t){6&e.shapeFlag&&e.component?es(e.component.subTree,t):128&e.shapeFlag?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function ts(e,t=!1,n){let s=[],o=0;for(let r=0;r<e.length;r++){let i=e[r];const l=null==n?i.key:String(n)+String(null!=i.key?i.key:r);i.type===Fo?(128&i.patchFlag&&o++,s=s.concat(ts(i.children,t,l))):(t||i.type!==Po)&&s.push(null!=l?er(i,{key:l}):i)}if(o>1)for(let r=0;r<s.length;r++)s[r].patchFlag=-2;return s}
/*! #__NO_SIDE_EFFECTS__ */function ns(e,t){return g(e)?(()=>c({name:e.name},t,{setup:e}))():e}const ss=e=>!!e.type.__asyncLoader
/*! #__NO_SIDE_EFFECTS__ */;function os(e,t){const{ref:n,props:s,children:o,ce:r}=t.vnode,i=Zo(e,s,o);return i.ref=n,i.ce=r,delete t.vnode.ce,i}const rs=e=>e.type.__isKeepAlive,is={name:"KeepAlive",__isKeepAlive:!0,props:{include:[String,RegExp,Array],exclude:[String,RegExp,Array],max:[String,Number]},setup(e,{slots:t}){const n=ur(),s=n.ctx,o=new Map,r=new Set;let i=null;const l=n.suspense,{renderer:{p:c,m:a,um:u,o:{createElement:d}}}=s,p=d("div");function h(e){ps(e),u(e,n,l,!0)}function f(e){o.forEach(((t,n)=>{const s=kr(t.type);!s||e&&e(s)||m(n)}))}function m(e){const t=o.get(e);i&&zo(t,i)?i&&ps(i):h(t),o.delete(e),r.delete(e)}s.activate=(e,t,n,s,o)=>{const r=e.component;a(e,t,n,0,l),c(r.vnode,e,t,n,r,l,s,e.slotScopeIds,o),yo((()=>{r.isDeactivated=!1,r.a&&P(r.a);const t=e.props&&e.props.onVnodeMounted;t&&ir(t,r.parent,e)}),l)},s.deactivate=e=>{const t=e.component;a(e,p,null,1,l),yo((()=>{t.da&&P(t.da);const n=e.props&&e.props.onVnodeUnmounted;n&&ir(n,t.parent,e),t.isDeactivated=!0}),l)},Bn((()=>[e.include,e.exclude]),(([e,t])=>{e&&f((t=>ls(e,t))),t&&f((e=>!ls(t,e)))}),{flush:"post",deep:!0});let g=null;const v=()=>{null!=g&&o.set(g,hs(n.subTree))};return vs(v),bs(v),_s((()=>{o.forEach((e=>{const{subTree:t,suspense:s}=n,o=hs(t);if(e.type!==o.type||e.key!==o.key)h(e);else{ps(o);const e=o.component.da;e&&yo(e,s)}}))})),()=>{if(g=null,!t.default)return null;const n=t.default(),s=n[0];if(n.length>1)return i=null,n;if(!(Ko(s)&&(4&s.shapeFlag||128&s.shapeFlag)))return i=null,s;let l=hs(s);const c=l.type,a=kr(ss(l)?l.type.__asyncResolved||{}:c),{include:u,exclude:d,max:p}=e;if(u&&(!a||!ls(u,a))||d&&a&&ls(d,a))return i=l,s;const h=null==l.key?c:l.key,f=o.get(h);return l.el&&(l=er(l),128&s.shapeFlag&&(s.ssContent=l)),g=h,f?(l.el=f.el,l.component=f.component,l.transition&&es(l,l.transition),l.shapeFlag|=512,r.delete(h),r.add(h)):(r.add(h),p&&r.size>parseInt(p,10)&&m(r.values().next().value)),l.shapeFlag|=256,i=l,wn(s.type)?s:l}}};function ls(e,t){return p(e)?e.some((e=>ls(e,t))):v(e)?e.split(",").includes(t):"[object RegExp]"===x(e)&&e.test(t)}function cs(e,t){us(e,"a",t)}function as(e,t){us(e,"da",t)}function us(e,t,n=ar){const s=e.__wdc||(e.__wdc=()=>{let t=n;for(;t;){if(t.isDeactivated)return;t=t.parent}return e()});if(fs(t,s,n),n){let e=n.parent;for(;e&&e.parent;)rs(e.parent.vnode)&&ds(s,t,n,e),e=e.parent}}function ds(e,t,n,s){const o=fs(t,e,s,!0);Ss((()=>{a(s[t],o)}),n)}function ps(e){e.shapeFlag&=-257,e.shapeFlag&=-513}function hs(e){return 128&e.shapeFlag?e.ssContent:e}function fs(e,t,n=ar,s=!1){if(n){const o=n[e]||(n[e]=[]),r=t.__weh||(t.__weh=(...s)=>{if(n.isUnmounted)return;ye();const o=hr(n),r=Ht(t,n,e,s);return o(),be(),r});return s?o.unshift(r):o.push(r),r}}const ms=e=>(t,n=ar)=>(!yr||"sp"===e)&&fs(e,((...e)=>t(...e)),n),gs=ms("bm"),vs=ms("m"),ys=ms("bu"),bs=ms("u"),_s=ms("bum"),Ss=ms("um"),xs=ms("sp"),Cs=ms("rtg"),ks=ms("rtc");function Ts(e,t=ar){fs("ec",e,t)}function ws(e){return e.some((e=>!Ko(e)||e.type!==Po&&!(e.type===Fo&&!ws(e.children))))?e:null}const Es=e=>e?mr(e)?Cr(e)||e.proxy:Es(e.parent):null,Ns=c(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>Es(e.parent),$root:e=>Es(e.root),$emit:e=>e.emit,$options:e=>Bs(e),$forceUpdate:e=>e.f||(e.f=()=>{e.effect.dirty=!0,tn(e.update)}),$nextTick:e=>e.n||(e.n=en.bind(e.proxy)),$watch:e=>Dn.bind(e)}),As=(e,t)=>e!==n&&!e.__isScriptSetup&&d(e,t),Is={get({_:e},t){const{ctx:s,setupState:o,data:r,props:i,accessCache:l,type:c,appContext:a}=e;let u;if("$"!==t[0]){const c=l[t];if(void 0!==c)switch(c){case 1:return o[t];case 2:return r[t];case 4:return s[t];case 3:return i[t]}else{if(As(o,t))return l[t]=1,o[t];if(r!==n&&d(r,t))return l[t]=2,r[t];if((u=e.propsOptions[0])&&d(u,t))return l[t]=3,i[t];if(s!==n&&d(s,t))return l[t]=4,s[t];Fs&&(l[t]=0)}}const p=Ns[t];let h,f;return p?("$attrs"===t&&Ae(e,0,t),p(e)):(h=c.__cssModules)&&(h=h[t])?h:s!==n&&d(s,t)?(l[t]=4,s[t]):(f=a.config.globalProperties,d(f,t)?f[t]:void 0)},set({_:e},t,s){const{data:o,setupState:r,ctx:i}=e;return As(r,t)?(r[t]=s,!0):o!==n&&d(o,t)?(o[t]=s,!0):!d(e.props,t)&&(("$"!==t[0]||!(t.slice(1)in e))&&(i[t]=s,!0))},has({_:{data:e,setupState:t,accessCache:s,ctx:o,appContext:r,propsOptions:i}},l){let c;return!!s[l]||e!==n&&d(e,l)||As(t,l)||(c=i[0])&&d(c,l)||d(o,l)||d(Ns,l)||d(r.config.globalProperties,l)},defineProperty(e,t,n){return null!=n.get?e._.accessCache[t]=0:d(n,"value")&&this.set(e,t,n.value,null),Reflect.defineProperty(e,t,n)}},Rs=c({},Is,{get(e,t){if(t!==Symbol.unscopables)return Is.get(e,t,e)},has:(e,t)=>"_"!==t[0]&&!j(t)});function Os(){const e=ur();return e.setupContext||(e.setupContext=xr(e))}function Ls(e){return p(e)?e.reduce(((e,t)=>(e[t]=null,e)),{}):e}let Fs=!0;function Ms(e){const t=Bs(e),n=e.proxy,s=e.ctx;Fs=!1,t.beforeCreate&&Ps(t.beforeCreate,e,"bc");const{data:r,computed:i,methods:l,watch:c,provide:a,inject:u,created:d,beforeMount:h,mounted:f,beforeUpdate:m,updated:v,activated:y,deactivated:_,beforeUnmount:S,unmounted:x,render:C,renderTracked:k,renderTriggered:T,errorCaptured:w,serverPrefetch:E,expose:N,inheritAttrs:A,components:I,directives:R}=t;if(u&&function(e,t,n=o){p(e)&&(e=js(e));for(const s in e){const n=e[s];let o;o=b(n)?"default"in n?Qs(n.from||s,n.default,!0):Qs(n.from||s):Qs(n),It(o)?Object.defineProperty(t,s,{enumerable:!0,configurable:!0,get:()=>o.value,set:e=>o.value=e}):t[s]=o}}(u,s,null),l)for(const o in l){const e=l[o];g(e)&&(s[o]=e.bind(n))}if(r){const t=r.call(n,n);b(t)&&(e.data=mt(t))}if(Fs=!0,i)for(const p in i){const e=i[p],t=g(e)?e.bind(n,n):g(e.get)?e.get.bind(n,n):o,r=!g(e)&&g(e.set)?e.set.bind(n):o,l=Tr({get:t,set:r});Object.defineProperty(s,p,{enumerable:!0,configurable:!0,get:()=>l.value,set:e=>l.value=e})}if(c)for(const o in c)$s(c[o],s,n,o);if(a){const e=g(a)?a.call(n):a;Reflect.ownKeys(e).forEach((t=>{Xs(t,e[t])}))}function O(e,t){p(t)?t.forEach((t=>e(t.bind(n)))):t&&e(t.bind(n))}if(d&&Ps(d,e,"c"),O(gs,h),O(vs,f),O(ys,m),O(bs,v),O(cs,y),O(as,_),O(Ts,w),O(ks,k),O(Cs,T),O(_s,S),O(Ss,x),O(xs,E),p(N))if(N.length){const t=e.exposed||(e.exposed={});N.forEach((e=>{Object.defineProperty(t,e,{get:()=>n[e],set:t=>n[e]=t})}))}else e.exposed||(e.exposed={});C&&e.render===o&&(e.render=C),null!=A&&(e.inheritAttrs=A),I&&(e.components=I),R&&(e.directives=R)}function Ps(e,t,n){Ht(p(e)?e.map((e=>e.bind(t.proxy))):e.bind(t.proxy),t,n)}function $s(e,t,n,s){const o=s.includes(".")?Un(n,s):()=>n[s];if(v(e)){const n=t[e];g(n)&&Bn(o,n)}else if(g(e))Bn(o,e.bind(n));else if(b(e))if(p(e))e.forEach((e=>$s(e,t,n,s)));else{const s=g(e.handler)?e.handler.bind(n):t[e.handler];g(s)&&Bn(o,s,e)}}function Bs(e){const t=e.type,{mixins:n,extends:s}=t,{mixins:o,optionsCache:r,config:{optionMergeStrategies:i}}=e.appContext,l=r.get(t);let c;return l?c=l:o.length||n||s?(c={},o.length&&o.forEach((e=>Vs(c,e,i,!0))),Vs(c,t,i)):c=t,b(t)&&r.set(t,c),c}function Vs(e,t,n,s=!1){const{mixins:o,extends:r}=t;r&&Vs(e,r,n,!0),o&&o.forEach((t=>Vs(e,t,n,!0)));for(const i in t)if(s&&"expose"===i);else{const s=Ds[i]||n&&n[i];e[i]=s?s(e[i],t[i]):t[i]}return e}const Ds={data:Us,props:Ws,emits:Ws,methods:qs,computed:qs,beforeCreate:Hs,created:Hs,beforeMount:Hs,mounted:Hs,beforeUpdate:Hs,updated:Hs,beforeDestroy:Hs,beforeUnmount:Hs,destroyed:Hs,unmounted:Hs,activated:Hs,deactivated:Hs,errorCaptured:Hs,serverPrefetch:Hs,components:qs,directives:qs,watch:function(e,t){if(!e)return t;if(!t)return e;const n=c(Object.create(null),e);for(const s in t)n[s]=Hs(e[s],t[s]);return n},provide:Us,inject:function(e,t){return qs(js(e),js(t))}};function Us(e,t){return t?e?function(){return c(g(e)?e.call(this,this):e,g(t)?t.call(this,this):t)}:t:e}function js(e){if(p(e)){const t={};for(let n=0;n<e.length;n++)t[e[n]]=e[n];return t}return e}function Hs(e,t){return e?[...new Set([].concat(e,t))]:t}function qs(e,t){return e?c(Object.create(null),e,t):t}function Ws(e,t){return e?p(e)&&p(t)?[...new Set([...e,...t])]:c(Object.create(null),Ls(e),Ls(null!=t?t:{})):t}function Ks(){return{app:null,config:{isNativeTag:r,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let zs=0;function Gs(e,t){return function(n,s=null){g(n)||(n=c({},n)),null==s||b(s)||(s=null);const o=Ks(),r=new WeakSet;let i=!1;const l=o.app={_uid:zs++,_component:n,_props:s,_container:null,_context:o,_instance:null,version:Nr,get config(){return o.config},set config(e){},use:(e,...t)=>(r.has(e)||(e&&g(e.install)?(r.add(e),e.install(l,...t)):g(e)&&(r.add(e),e(l,...t))),l),mixin:e=>(o.mixins.includes(e)||o.mixins.push(e),l),component:(e,t)=>t?(o.components[e]=t,l):o.components[e],directive:(e,t)=>t?(o.directives[e]=t,l):o.directives[e],mount(r,c,a){if(!i){const u=Zo(n,s);return u.appContext=o,!0===a?a="svg":!1===a&&(a=void 0),c&&t?t(u,r):e(u,r,a),i=!0,l._container=r,r.__vue_app__=l,Cr(u.component)||u.component.proxy}},unmount(){i&&(e(null,l._container),delete l._container.__vue_app__)},provide:(e,t)=>(o.provides[e]=t,l),runWithContext(e){const t=Js;Js=l;try{return e()}finally{Js=t}}};return l}}let Js=null;function Xs(e,t){if(ar){let n=ar.provides;const s=ar.parent&&ar.parent.provides;s===n&&(n=ar.provides=Object.create(s)),n[e]=t}else;}function Qs(e,t,n=!1){const s=ar||hn;if(s||Js){const o=s?null==s.parent?s.vnode.appContext&&s.vnode.appContext.provides:s.parent.provides:Js._context.provides;if(o&&e in o)return o[e];if(arguments.length>1)return n&&g(t)?t.call(s&&s.proxy):t}}function Zs(e,t,s,o){const[r,i]=e.propsOptions;let l,c=!1;if(t)for(let n in t){if(w(n))continue;const a=t[n];let u;r&&d(r,u=I(n))?i&&i.includes(u)?(l||(l={}))[u]=a:s[u]=a:pn(e.emitsOptions,n)||n in o&&a===o[n]||(o[n]=a,c=!0)}if(i){const t=Ct(s),o=l||n;for(let n=0;n<i.length;n++){const l=i[n];s[l]=Ys(r,t,l,o[l],e,!d(o,l))}}return c}function Ys(e,t,n,s,o,r){const i=e[n];if(null!=i){const e=d(i,"default");if(e&&void 0===s){const e=i.default;if(i.type!==Function&&!i.skipFactory&&g(e)){const{propsDefaults:r}=o;if(n in r)s=r[n];else{const i=hr(o);s=r[n]=e.call(null,t),i()}}else s=e}i[0]&&(r&&!e?s=!1:!i[1]||""!==s&&s!==O(n)||(s=!0))}return s}function eo(e,t,o=!1){const r=t.propsCache,i=r.get(e);if(i)return i;const l=e.props,a={},u=[];let h=!1;if(!g(e)){const n=e=>{h=!0;const[n,s]=eo(e,t,!0);c(a,n),s&&u.push(...s)};!o&&t.mixins.length&&t.mixins.forEach(n),e.extends&&n(e.extends),e.mixins&&e.mixins.forEach(n)}if(!l&&!h)return b(e)&&r.set(e,s),s;if(p(l))for(let s=0;s<l.length;s++){const e=I(l[s]);to(e)&&(a[e]=n)}else if(l)for(const n in l){const e=I(n);if(to(e)){const t=l[n],s=a[e]=p(t)||g(t)?{type:t}:c({},t);if(s){const t=oo(Boolean,s.type),n=oo(String,s.type);s[0]=t>-1,s[1]=n<0||t<n,(t>-1||d(s,"default"))&&u.push(e)}}}const f=[a,u];return b(e)&&r.set(e,f),f}function to(e){return"$"!==e[0]&&!w(e)}function no(e){if(null===e)return"null";if("function"==typeof e)return e.name||"";if("object"==typeof e){return e.constructor&&e.constructor.name||""}return""}function so(e,t){return no(e)===no(t)}function oo(e,t){return p(t)?t.findIndex((t=>so(t,e))):g(t)&&so(t,e)?0:-1}const ro=e=>"_"===e[0]||"$stable"===e,io=e=>p(e)?e.map(nr):[nr(e)],lo=(e,t,n)=>{if(t._n)return t;const s=gn(((...e)=>io(t(...e))),n);return s._c=!1,s},co=(e,t,n)=>{const s=e._ctx;for(const o in e){if(ro(o))continue;const n=e[o];if(g(n))t[o]=lo(0,n,s);else if(null!=n){const e=io(n);t[o]=()=>e}}},ao=(e,t)=>{const n=io(t);e.slots.default=()=>n},uo=(e,t)=>{if(32&e.vnode.shapeFlag){const n=t._;n?(e.slots=Ct(t),$(t,"_",n)):co(t,e.slots={})}else e.slots={},t&&ao(e,t);$(e.slots,Go,1)},po=(e,t,s)=>{const{vnode:o,slots:r}=e;let i=!0,l=n;if(32&o.shapeFlag){const e=t._;e?s&&1===e?i=!1:(c(r,t),s||1!==e||delete r._):(i=!t.$stable,co(t,r)),l=t}else t&&(ao(e,t),l={default:1});if(i)for(const n in r)ro(n)||null!=l[n]||delete r[n]};function ho(e,t,s,o,r=!1){if(p(e))return void e.forEach(((e,n)=>ho(e,t&&(p(t)?t[n]:t),s,o,r)));if(ss(o)&&!r)return;const i=4&o.shapeFlag?Cr(o.component)||o.component.proxy:o.el,l=r?null:i,{i:c,r:u}=e,h=t&&t.r,f=c.refs===n?c.refs={}:c.refs,m=c.setupState;if(null!=h&&h!==u&&(v(h)?(f[h]=null,d(m,h)&&(m[h]=null)):It(h)&&(h.value=null)),g(u))jt(u,c,12,[l,f]);else{const t=v(u),n=It(u);if(t||n){const o=()=>{if(e.f){const n=t?d(m,u)?m[u]:f[u]:u.value;r?p(n)&&a(n,i):p(n)?n.includes(i)||n.push(i):t?(f[u]=[i],d(m,u)&&(m[u]=f[u])):(u.value=[i],e.k&&(f[e.k]=u.value))}else t?(f[u]=l,d(m,u)&&(m[u]=l)):n&&(u.value=l,e.k&&(f[e.k]=l))};l?(o.id=-1,yo(o,s)):o()}}}let fo=!1;const mo=e=>(e=>e.namespaceURI.includes("svg")&&"foreignObject"!==e.tagName)(e)?"svg":(e=>e.namespaceURI.includes("MathML"))(e)?"mathml":void 0,go=e=>8===e.nodeType;function vo(e){const{mt:t,p:n,o:{patchProp:s,createText:o,nextSibling:r,parentNode:l,remove:c,insert:a,createComment:u}}=e,d=(n,s,i,c,u,b=!1)=>{const _=go(n)&&"["===n.data,S=()=>m(n,s,i,c,u,_),{type:x,ref:C,shapeFlag:k,patchFlag:T}=s;let w=n.nodeType;s.el=n,-2===T&&(b=!1,s.dynamicChildren=null);let E=null;switch(x){case Mo:3!==w?""===s.children?(a(s.el=o(""),l(n),n),E=n):E=S():(n.data!==s.children&&(fo=!0,n.data=s.children),E=r(n));break;case Po:y(n)?(E=r(n),v(s.el=n.content.firstChild,n,i)):E=8!==w||_?S():r(n);break;case $o:if(_&&(w=(n=r(n)).nodeType),1===w||3===w){E=n;const e=!s.children.length;for(let t=0;t<s.staticCount;t++)e&&(s.children+=1===E.nodeType?E.outerHTML:E.data),t===s.staticCount-1&&(s.anchor=E),E=r(E);return _?r(E):E}S();break;case Fo:E=_?f(n,s,i,c,u,b):S();break;default:if(1&k)E=1===w&&s.type.toLowerCase()===n.tagName.toLowerCase()||y(n)?p(n,s,i,c,u,b):S();else if(6&k){s.slotScopeIds=u;const e=l(n);if(E=_?g(n):go(n)&&"teleport start"===n.data?g(n,n.data,"teleport end"):r(n),t(s,e,null,i,c,mo(e),b),ss(s)){let t;_?(t=Zo(Fo),t.anchor=E?E.previousSibling:e.lastChild):t=3===n.nodeType?tr(""):Zo("div"),t.el=n,s.component.subTree=t}}else 64&k?E=8!==w?S():s.type.hydrate(n,s,i,c,u,b,e,h):128&k&&(E=s.type.hydrate(n,s,i,c,mo(l(n)),u,b,e,d))}return null!=C&&ho(C,null,c,s),E},p=(e,t,n,o,r,l)=>{l=l||!!t.dynamicChildren;const{type:a,props:u,patchFlag:d,shapeFlag:p,dirs:f,transition:m}=t,g="input"===a||"option"===a;if(g||-1!==d){f&&Hn(t,null,n,"created");let a,b=!1;if(y(e)){b=ko(o,m)&&n&&n.vnode.props&&n.vnode.props.appear;const s=e.content.firstChild;b&&m.beforeEnter(s),v(s,e,n),t.el=e=s}if(16&p&&(!u||!u.innerHTML&&!u.textContent)){let s=h(e.firstChild,t,e,n,o,r,l);for(;s;){fo=!0;const e=s;s=s.nextSibling,c(e)}}else 8&p&&e.textContent!==t.children&&(fo=!0,e.textContent=t.children);if(u)if(g||!l||48&d)for(const t in u)(g&&(t.endsWith("value")||"indeterminate"===t)||i(t)&&!w(t)||"."===t[0])&&s(e,t,null,u[t],void 0,void 0,n);else u.onClick&&s(e,"onClick",null,u.onClick,void 0,void 0,n);(a=u&&u.onVnodeBeforeMount)&&ir(a,n,t),f&&Hn(t,null,n,"beforeMount"),((a=u&&u.onVnodeMounted)||f||b)&&On((()=>{a&&ir(a,n,t),b&&m.enter(e),f&&Hn(t,null,n,"mounted")}),o)}return e.nextSibling},h=(e,t,s,o,r,i,l)=>{l=l||!!t.dynamicChildren;const c=t.children,a=c.length;for(let u=0;u<a;u++){const t=l?c[u]:c[u]=nr(c[u]);if(e)e=d(e,t,o,r,i,l);else{if(t.type===Mo&&!t.children)continue;fo=!0,n(null,t,s,null,o,r,mo(s),i)}}return e},f=(e,t,n,s,o,i)=>{const{slotScopeIds:c}=t;c&&(o=o?o.concat(c):c);const d=l(e),p=h(r(e),t,d,n,s,o,i);return p&&go(p)&&"]"===p.data?r(t.anchor=p):(fo=!0,a(t.anchor=u("]"),d,p),p)},m=(e,t,s,o,i,a)=>{if(fo=!0,t.el=null,a){const t=g(e);for(;;){const n=r(e);if(!n||n===t)break;c(n)}}const u=r(e),d=l(e);return c(e),n(null,t,d,u,s,o,mo(d),i),u},g=(e,t="[",n="]")=>{let s=0;for(;e;)if((e=r(e))&&go(e)&&(e.data===t&&s++,e.data===n)){if(0===s)return r(e);s--}return e},v=(e,t,n)=>{const s=t.parentNode;s&&s.replaceChild(e,t);let o=n;for(;o;)o.vnode.el===t&&(o.vnode.el=o.subTree.el=e),o=o.parent},y=e=>1===e.nodeType&&"template"===e.tagName.toLowerCase();return[(e,t)=>{if(!t.hasChildNodes())return n(null,e,t),rn(),void(t._vnode=e);fo=!1,d(t.firstChild,e,null,null,null),rn(),t._vnode=e,fo&&console.error("Hydration completed but contains mismatches.")},d]}const yo=On;function bo(e){return So(e)}function _o(e){return So(e,vo)}function So(e,t){U().__VUE__=!0;const{insert:r,remove:i,patchProp:l,createElement:c,createText:a,createComment:u,setText:p,setElementText:h,parentNode:f,nextSibling:m,setScopeId:g=o,insertStaticContent:v}=e,y=(e,t,n,s=null,o=null,r=null,i=void 0,l=null,c=!!t.dynamicChildren)=>{if(e===t)return;e&&!zo(e,t)&&(s=Q(e),K(e,o,r,!0),e=null),-2===t.patchFlag&&(c=!1,t.dynamicChildren=null);const{type:a,ref:u,shapeFlag:d}=t;switch(a){case Mo:b(e,t,n,s);break;case Po:S(e,t,n,s);break;case $o:null==e&&x(t,n,s,i);break;case Fo:L(e,t,n,s,o,r,i,l,c);break;default:1&d?C(e,t,n,s,o,r,i,l,c):6&d?F(e,t,n,s,o,r,i,l,c):(64&d||128&d)&&a.process(e,t,n,s,o,r,i,l,c,ee)}null!=u&&o&&ho(u,e&&e.ref,r,t||e,!t)},b=(e,t,n,s)=>{if(null==e)r(t.el=a(t.children),n,s);else{const n=t.el=e.el;t.children!==e.children&&p(n,t.children)}},S=(e,t,n,s)=>{null==e?r(t.el=u(t.children||""),n,s):t.el=e.el},x=(e,t,n,s)=>{[e.el,e.anchor]=v(e.children,t,n,s,e.el,e.anchor)},C=(e,t,n,s,o,r,i,l,c)=>{"svg"===t.type?i="svg":"math"===t.type&&(i="mathml"),null==e?k(t,n,s,o,r,i,l,c):N(e,t,o,r,i,l,c)},k=(e,t,n,s,o,i,a,u)=>{let d,p;const{props:f,shapeFlag:m,transition:g,dirs:v}=e;if(d=e.el=c(e.type,i,f&&f.is,f),8&m?h(d,e.children):16&m&&E(e.children,d,null,s,o,xo(e,i),a,u),v&&Hn(e,null,s,"created"),T(d,e,e.scopeId,a,s),f){for(const t in f)"value"===t||w(t)||l(d,t,null,f[t],i,e.children,s,o,X);"value"in f&&l(d,"value",null,f.value,i),(p=f.onVnodeBeforeMount)&&ir(p,s,e)}v&&Hn(e,null,s,"beforeMount");const y=ko(o,g);y&&g.beforeEnter(d),r(d,t,n),((p=f&&f.onVnodeMounted)||y||v)&&yo((()=>{p&&ir(p,s,e),y&&g.enter(d),v&&Hn(e,null,s,"mounted")}),o)},T=(e,t,n,s,o)=>{if(n&&g(e,n),s)for(let r=0;r<s.length;r++)g(e,s[r]);if(o){if(t===o.subTree){const t=o.vnode;T(e,t,t.scopeId,t.slotScopeIds,o.parent)}}},E=(e,t,n,s,o,r,i,l,c=0)=>{for(let a=c;a<e.length;a++){const c=e[a]=l?sr(e[a]):nr(e[a]);y(null,c,t,n,s,o,r,i,l)}},N=(e,t,s,o,r,i,c)=>{const a=t.el=e.el;let{patchFlag:u,dynamicChildren:d,dirs:p}=t;u|=16&e.patchFlag;const f=e.props||n,m=t.props||n;let g;if(s&&Co(s,!1),(g=m.onVnodeBeforeUpdate)&&ir(g,s,t,e),p&&Hn(t,e,s,"beforeUpdate"),s&&Co(s,!0),d?A(e.dynamicChildren,d,a,s,o,xo(t,r),i):c||j(e,t,a,null,s,o,xo(t,r),i,!1),u>0){if(16&u)R(a,t,f,m,s,o,r);else if(2&u&&f.class!==m.class&&l(a,"class",null,m.class,r),4&u&&l(a,"style",f.style,m.style,r),8&u){const n=t.dynamicProps;for(let t=0;t<n.length;t++){const i=n[t],c=f[i],u=m[i];u===c&&"value"!==i||l(a,i,c,u,r,e.children,s,o,X)}}1&u&&e.children!==t.children&&h(a,t.children)}else c||null!=d||R(a,t,f,m,s,o,r);((g=m.onVnodeUpdated)||p)&&yo((()=>{g&&ir(g,s,t,e),p&&Hn(t,e,s,"updated")}),o)},A=(e,t,n,s,o,r,i)=>{for(let l=0;l<t.length;l++){const c=e[l],a=t[l],u=c.el&&(c.type===Fo||!zo(c,a)||70&c.shapeFlag)?f(c.el):n;y(c,a,u,null,s,o,r,i,!0)}},R=(e,t,s,o,r,i,c)=>{if(s!==o){if(s!==n)for(const n in s)w(n)||n in o||l(e,n,s[n],null,c,t.children,r,i,X);for(const n in o){if(w(n))continue;const a=o[n],u=s[n];a!==u&&"value"!==n&&l(e,n,u,a,c,t.children,r,i,X)}"value"in o&&l(e,"value",s.value,o.value,c)}},L=(e,t,n,s,o,i,l,c,u)=>{const d=t.el=e?e.el:a(""),p=t.anchor=e?e.anchor:a("");let{patchFlag:h,dynamicChildren:f,slotScopeIds:m}=t;m&&(c=c?c.concat(m):m),null==e?(r(d,n,s),r(p,n,s),E(t.children||[],n,p,o,i,l,c,u)):h>0&&64&h&&f&&e.dynamicChildren?(A(e.dynamicChildren,f,n,o,i,l,c),(null!=t.key||o&&t===o.subTree)&&To(e,t,!0)):j(e,t,n,p,o,i,l,c,u)},F=(e,t,n,s,o,r,i,l,c)=>{t.slotScopeIds=l,null==e?512&t.shapeFlag?o.ctx.activate(t,n,s,i,c):M(t,n,s,o,r,i,c):B(e,t,c)},M=(e,t,s,o,r,i,l)=>{const c=e.component=function(e,t,s){const o=e.type,r=(t?t.appContext:e.appContext)||lr,i={uid:cr++,vnode:e,type:o,parent:t,appContext:r,root:null,next:null,subTree:null,effect:null,update:null,scope:new le(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(r.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:eo(o,r),emitsOptions:dn(o,r),emit:null,emitted:null,propsDefaults:n,inheritAttrs:o.inheritAttrs,ctx:n,data:n,props:n,attrs:n,slots:n,refs:n,setupState:n,setupContext:null,attrsProxy:null,slotsProxy:null,suspense:s,suspenseId:s?s.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};i.ctx={_:i},i.root=t?t.root:i,i.emit=un.bind(null,i),e.ce&&e.ce(i);return i}(e,o,r);if(rs(e)&&(c.ctx.renderer=ee),function(e,t=!1){t&&pr(t);const{props:n,children:s}=e.vnode,o=mr(e);(function(e,t,n,s=!1){const o={},r={};$(r,Go,1),e.propsDefaults=Object.create(null),Zs(e,t,o,r);for(const i in e.propsOptions[0])i in o||(o[i]=void 0);e.props=n?s?o:gt(o):e.type.props?o:r,e.attrs=r})(e,n,o,t),uo(e,s);const r=o?function(e,t){const n=e.type;e.accessCache=Object.create(null),e.proxy=kt(new Proxy(e.ctx,Is));const{setup:s}=n;if(s){const n=e.setupContext=s.length>1?xr(e):null,o=hr(e);ye();const r=jt(s,e,0,[e.props,n]);if(be(),o(),_(r)){if(r.then(fr,fr),t)return r.then((n=>{br(e,n,t)})).catch((t=>{qt(t,e,0)}));e.asyncDep=r}else br(e,r,t)}else Sr(e,t)}(e,t):void 0;t&&pr(!1)}(c),c.asyncDep){if(r&&r.registerDep(c,V),!e.el){const e=c.subTree=Zo(Po);S(null,e,t,s)}}else V(c,e,t,s,r,i,l)},B=(e,t,n)=>{const s=t.component=e.component;if(function(e,t,n){const{props:s,children:o,component:r}=e,{props:i,children:l,patchFlag:c}=t,a=r.emitsOptions;if(t.dirs||t.transition)return!0;if(!(n&&c>=0))return!(!o&&!l||l&&l.$stable)||s!==i&&(s?!i||_n(s,i,a):!!i);if(1024&c)return!0;if(16&c)return s?_n(s,i,a):!!i;if(8&c){const e=t.dynamicProps;for(let t=0;t<e.length;t++){const n=e[t];if(i[n]!==s[n]&&!pn(a,n))return!0}}return!1}(e,t,n)){if(s.asyncDep&&!s.asyncResolved)return void D(s,t,n);s.next=t,function(e){const t=zt.indexOf(e);t>Gt&&zt.splice(t,1)}(s.update),s.effect.dirty=!0,s.update()}else t.el=e.el,s.vnode=t},V=(e,t,n,s,r,i,l)=>{const c=()=>{if(e.isMounted){let{next:t,bu:n,u:s,parent:o,vnode:a}=e;{const n=wo(e);if(n)return t&&(t.el=a.el,D(e,t,l)),void n.asyncDep.then((()=>{e.isUnmounted||c()}))}let u,d=t;Co(e,!1),t?(t.el=a.el,D(e,t,l)):t=a,n&&P(n),(u=t.props&&t.props.onVnodeBeforeUpdate)&&ir(u,o,t,a),Co(e,!0);const p=vn(e),h=e.subTree;e.subTree=p,y(h,p,f(h.el),Q(h),e,r,i),t.el=p.el,null===d&&Sn(e,p.el),s&&yo(s,r),(u=t.props&&t.props.onVnodeUpdated)&&yo((()=>ir(u,o,t,a)),r)}else{let o;const{el:l,props:c}=t,{bm:a,m:u,parent:d}=e,p=ss(t);if(Co(e,!1),a&&P(a),!p&&(o=c&&c.onVnodeBeforeMount)&&ir(o,d,t),Co(e,!0),l&&ne){const n=()=>{e.subTree=vn(e),ne(l,e.subTree,e,r,null)};p?t.type.__asyncLoader().then((()=>!e.isUnmounted&&n())):n()}else{const o=e.subTree=vn(e);y(null,o,n,s,e,r,i),t.el=o.el}if(u&&yo(u,r),!p&&(o=c&&c.onVnodeMounted)){const e=t;yo((()=>ir(o,d,e)),r)}(256&t.shapeFlag||d&&ss(d.vnode)&&256&d.vnode.shapeFlag)&&e.a&&yo(e.a,r),e.isMounted=!0,t=n=s=null}},a=e.effect=new ue(c,o,(()=>tn(u)),e.scope),u=e.update=()=>{a.dirty&&a.run()};u.id=e.uid,Co(e,!0),u()},D=(e,t,n)=>{t.component=e;const s=e.vnode.props;e.vnode=t,e.next=null,function(e,t,n,s){const{props:o,attrs:r,vnode:{patchFlag:i}}=e,l=Ct(o),[c]=e.propsOptions;let a=!1;if(!(s||i>0)||16&i){let s;Zs(e,t,o,r)&&(a=!0);for(const r in l)t&&(d(t,r)||(s=O(r))!==r&&d(t,s))||(c?!n||void 0===n[r]&&void 0===n[s]||(o[r]=Ys(c,l,r,void 0,e,!0)):delete o[r]);if(r!==l)for(const e in r)t&&d(t,e)||(delete r[e],a=!0)}else if(8&i){const n=e.vnode.dynamicProps;for(let s=0;s<n.length;s++){let i=n[s];if(pn(e.emitsOptions,i))continue;const u=t[i];if(c)if(d(r,i))u!==r[i]&&(r[i]=u,a=!0);else{const t=I(i);o[t]=Ys(c,l,t,u,e,!1)}else u!==r[i]&&(r[i]=u,a=!0)}}a&&Ie(e,"set","$attrs")}(e,t.props,s,n),po(e,t.children,n),ye(),on(e),be()},j=(e,t,n,s,o,r,i,l,c=!1)=>{const a=e&&e.children,u=e?e.shapeFlag:0,d=t.children,{patchFlag:p,shapeFlag:f}=t;if(p>0){if(128&p)return void q(a,d,n,s,o,r,i,l,c);if(256&p)return void H(a,d,n,s,o,r,i,l,c)}8&f?(16&u&&X(a,o,r),d!==a&&h(n,d)):16&u?16&f?q(a,d,n,s,o,r,i,l,c):X(a,o,r,!0):(8&u&&h(n,""),16&f&&E(d,n,s,o,r,i,l,c))},H=(e,t,n,o,r,i,l,c,a)=>{const u=(e=e||s).length,d=(t=t||s).length,p=Math.min(u,d);let h;for(h=0;h<p;h++){const s=t[h]=a?sr(t[h]):nr(t[h]);y(e[h],s,n,null,r,i,l,c,a)}u>d?X(e,r,i,!0,!1,p):E(t,n,o,r,i,l,c,a,p)},q=(e,t,n,o,r,i,l,c,a)=>{let u=0;const d=t.length;let p=e.length-1,h=d-1;for(;u<=p&&u<=h;){const s=e[u],o=t[u]=a?sr(t[u]):nr(t[u]);if(!zo(s,o))break;y(s,o,n,null,r,i,l,c,a),u++}for(;u<=p&&u<=h;){const s=e[p],o=t[h]=a?sr(t[h]):nr(t[h]);if(!zo(s,o))break;y(s,o,n,null,r,i,l,c,a),p--,h--}if(u>p){if(u<=h){const e=h+1,s=e<d?t[e].el:o;for(;u<=h;)y(null,t[u]=a?sr(t[u]):nr(t[u]),n,s,r,i,l,c,a),u++}}else if(u>h)for(;u<=p;)K(e[u],r,i,!0),u++;else{const f=u,m=u,g=new Map;for(u=m;u<=h;u++){const e=t[u]=a?sr(t[u]):nr(t[u]);null!=e.key&&g.set(e.key,u)}let v,b=0;const _=h-m+1;let S=!1,x=0;const C=new Array(_);for(u=0;u<_;u++)C[u]=0;for(u=f;u<=p;u++){const s=e[u];if(b>=_){K(s,r,i,!0);continue}let o;if(null!=s.key)o=g.get(s.key);else for(v=m;v<=h;v++)if(0===C[v-m]&&zo(s,t[v])){o=v;break}void 0===o?K(s,r,i,!0):(C[o-m]=u+1,o>=x?x=o:S=!0,y(s,t[o],n,null,r,i,l,c,a),b++)}const k=S?function(e){const t=e.slice(),n=[0];let s,o,r,i,l;const c=e.length;for(s=0;s<c;s++){const c=e[s];if(0!==c){if(o=n[n.length-1],e[o]<c){t[s]=o,n.push(s);continue}for(r=0,i=n.length-1;r<i;)l=r+i>>1,e[n[l]]<c?r=l+1:i=l;c<e[n[r]]&&(r>0&&(t[s]=n[r-1]),n[r]=s)}}r=n.length,i=n[r-1];for(;r-- >0;)n[r]=i,i=t[i];return n}(C):s;for(v=k.length-1,u=_-1;u>=0;u--){const e=m+u,s=t[e],p=e+1<d?t[e+1].el:o;0===C[u]?y(null,s,n,p,r,i,l,c,a):S&&(v<0||u!==k[v]?W(s,n,p,2):v--)}}},W=(e,t,n,s,o=null)=>{const{el:i,type:l,transition:c,children:a,shapeFlag:u}=e;if(6&u)return void W(e.component.subTree,t,n,s);if(128&u)return void e.suspense.move(t,n,s);if(64&u)return void l.move(e,t,n,ee);if(l===Fo){r(i,t,n);for(let e=0;e<a.length;e++)W(a[e],t,n,s);return void r(e.anchor,t,n)}if(l===$o)return void(({el:e,anchor:t},n,s)=>{let o;for(;e&&e!==t;)o=m(e),r(e,n,s),e=o;r(t,n,s)})(e,t,n);if(2!==s&&1&u&&c)if(0===s)c.beforeEnter(i),r(i,t,n),yo((()=>c.enter(i)),o);else{const{leave:e,delayLeave:s,afterLeave:o}=c,l=()=>r(i,t,n),a=()=>{e(i,(()=>{l(),o&&o()}))};s?s(i,l,a):a()}else r(i,t,n)},K=(e,t,n,s=!1,o=!1)=>{const{type:r,props:i,ref:l,children:c,dynamicChildren:a,shapeFlag:u,patchFlag:d,dirs:p}=e;if(null!=l&&ho(l,null,n,e,!0),256&u)return void t.ctx.deactivate(e);const h=1&u&&p,f=!ss(e);let m;if(f&&(m=i&&i.onVnodeBeforeUnmount)&&ir(m,t,e),6&u)J(e.component,n,s);else{if(128&u)return void e.suspense.unmount(n,s);h&&Hn(e,null,t,"beforeUnmount"),64&u?e.type.remove(e,t,n,o,ee,s):a&&(r!==Fo||d>0&&64&d)?X(a,t,n,!1,!0):(r===Fo&&384&d||!o&&16&u)&&X(c,t,n),s&&z(e)}(f&&(m=i&&i.onVnodeUnmounted)||h)&&yo((()=>{m&&ir(m,t,e),h&&Hn(e,null,t,"unmounted")}),n)},z=e=>{const{type:t,el:n,anchor:s,transition:o}=e;if(t===Fo)return void G(n,s);if(t===$o)return void(({el:e,anchor:t})=>{let n;for(;e&&e!==t;)n=m(e),i(e),e=n;i(t)})(e);const r=()=>{i(n),o&&!o.persisted&&o.afterLeave&&o.afterLeave()};if(1&e.shapeFlag&&o&&!o.persisted){const{leave:t,delayLeave:s}=o,i=()=>t(n,r);s?s(e.el,r,i):i()}else r()},G=(e,t)=>{let n;for(;e!==t;)n=m(e),i(e),e=n;i(t)},J=(e,t,n)=>{const{bum:s,scope:o,update:r,subTree:i,um:l}=e;s&&P(s),o.stop(),r&&(r.active=!1,K(i,e,t,n)),l&&yo(l,t),yo((()=>{e.isUnmounted=!0}),t),t&&t.pendingBranch&&!t.isUnmounted&&e.asyncDep&&!e.asyncResolved&&e.suspenseId===t.pendingId&&(t.deps--,0===t.deps&&t.resolve())},X=(e,t,n,s=!1,o=!1,r=0)=>{for(let i=r;i<e.length;i++)K(e[i],t,n,s,o)},Q=e=>6&e.shapeFlag?Q(e.component.subTree):128&e.shapeFlag?e.suspense.next():m(e.anchor||e.el);let Z=!1;const Y=(e,t,n)=>{null==e?t._vnode&&K(t._vnode,null,null,!0):y(t._vnode||null,e,t,null,null,null,n),Z||(Z=!0,on(),rn(),Z=!1),t._vnode=e},ee={p:y,um:K,m:W,r:z,mt:M,mc:E,pc:j,pbc:A,n:Q,o:e};let te,ne;return t&&([te,ne]=t(ee)),{render:Y,hydrate:te,createApp:Gs(Y,te)}}function xo({type:e,props:t},n){return"svg"===n&&"foreignObject"===e||"mathml"===n&&"annotation-xml"===e&&t&&t.encoding&&t.encoding.includes("html")?void 0:n}function Co({effect:e,update:t},n){e.allowRecurse=t.allowRecurse=n}function ko(e,t){return(!e||e&&!e.pendingBranch)&&t&&!t.persisted}function To(e,t,n=!1){const s=e.children,o=t.children;if(p(s)&&p(o))for(let r=0;r<s.length;r++){const e=s[r];let t=o[r];1&t.shapeFlag&&!t.dynamicChildren&&((t.patchFlag<=0||32===t.patchFlag)&&(t=o[r]=sr(o[r]),t.el=e.el),n||To(e,t)),t.type===Mo&&(t.el=e.el)}}function wo(e){const t=e.subTree.component;if(t)return t.asyncDep&&!t.asyncResolved?t:wo(t)}const Eo=e=>e&&(e.disabled||""===e.disabled),No=e=>"undefined"!=typeof SVGElement&&e instanceof SVGElement,Ao=e=>"function"==typeof MathMLElement&&e instanceof MathMLElement,Io=(e,t)=>{const n=e&&e.to;if(v(n)){if(t){return t(n)}return null}return n};function Ro(e,t,n,{o:{insert:s},m:o},r=2){0===r&&s(e.targetAnchor,t,n);const{el:i,anchor:l,shapeFlag:c,children:a,props:u}=e,d=2===r;if(d&&s(i,t,n),(!d||Eo(u))&&16&c)for(let p=0;p<a.length;p++)o(a[p],t,n,2);d&&s(l,t,n)}const Oo={name:"Teleport",__isTeleport:!0,process(e,t,n,s,o,r,i,l,c,a){const{mc:u,pc:d,pbc:p,o:{insert:h,querySelector:f,createText:m}}=a,g=Eo(t.props);let{shapeFlag:v,children:y,dynamicChildren:b}=t;if(null==e){const e=t.el=m(""),a=t.anchor=m("");h(e,n,s),h(a,n,s);const d=t.target=Io(t.props,f),p=t.targetAnchor=m("");d&&(h(p,d),"svg"===i||No(d)?i="svg":("mathml"===i||Ao(d))&&(i="mathml"));const b=(e,t)=>{16&v&&u(y,e,t,o,r,i,l,c)};g?b(n,a):d&&b(d,p)}else{t.el=e.el;const s=t.anchor=e.anchor,u=t.target=e.target,h=t.targetAnchor=e.targetAnchor,m=Eo(e.props),v=m?n:u,y=m?s:h;if("svg"===i||No(u)?i="svg":("mathml"===i||Ao(u))&&(i="mathml"),b?(p(e.dynamicChildren,b,v,o,r,i,l),To(e,t,!0)):c||d(e,t,v,y,o,r,i,l,!1),g)m?t.props&&e.props&&t.props.to!==e.props.to&&(t.props.to=e.props.to):Ro(t,n,s,a,1);else if((t.props&&t.props.to)!==(e.props&&e.props.to)){const e=t.target=Io(t.props,f);e&&Ro(t,e,null,a,0)}else m&&Ro(t,u,h,a,1)}Lo(t)},remove(e,t,n,s,{um:o,o:{remove:r}},i){const{shapeFlag:l,children:c,anchor:a,targetAnchor:u,target:d,props:p}=e;if(d&&r(u),i&&r(a),16&l){const e=i||!Eo(p);for(let s=0;s<c.length;s++){const r=c[s];o(r,t,n,e,!!r.dynamicChildren)}}},move:Ro,hydrate:function(e,t,n,s,o,r,{o:{nextSibling:i,parentNode:l,querySelector:c}},a){const u=t.target=Io(t.props,c);if(u){const c=u._lpa||u.firstChild;if(16&t.shapeFlag)if(Eo(t.props))t.anchor=a(i(e),t,l(e),n,s,o,r),t.targetAnchor=c;else{t.anchor=i(e);let l=c;for(;l;)if(l=i(l),l&&8===l.nodeType&&"teleport anchor"===l.data){t.targetAnchor=l,u._lpa=t.targetAnchor&&i(t.targetAnchor);break}a(c,t,u,n,s,o,r)}Lo(t)}return t.anchor&&i(t.anchor)}};function Lo(e){const t=e.ctx;if(t&&t.ut){let n=e.children[0].el;for(;n&&n!==e.targetAnchor;)1===n.nodeType&&n.setAttribute("data-v-owner",t.uid),n=n.nextSibling;t.ut()}}const Fo=Symbol.for("v-fgt"),Mo=Symbol.for("v-txt"),Po=Symbol.for("v-cmt"),$o=Symbol.for("v-stc"),Bo=[];let Vo=null;function Do(e=!1){Bo.push(Vo=e?null:[])}function Uo(){Bo.pop(),Vo=Bo[Bo.length-1]||null}let jo=1;function Ho(e){jo+=e}function qo(e){return e.dynamicChildren=jo>0?Vo||s:null,Uo(),jo>0&&Vo&&Vo.push(e),e}function Wo(e,t,n,s,o){return qo(Zo(e,t,n,s,o,!0))}function Ko(e){return!!e&&!0===e.__v_isVNode}function zo(e,t){return e.type===t.type&&e.key===t.key}const Go="__vInternal",Jo=({key:e})=>null!=e?e:null,Xo=({ref:e,ref_key:t,ref_for:n})=>("number"==typeof e&&(e=""+e),null!=e?v(e)||It(e)||g(e)?{i:hn,r:e,k:t,f:!!n}:e:null);function Qo(e,t=null,n=null,s=0,o=null,r=(e===Fo?0:1),i=!1,l=!1){const c={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&Jo(t),ref:t&&Xo(t),scopeId:fn,slotScopeIds:null,children:n,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:r,patchFlag:s,dynamicProps:o,dynamicChildren:null,appContext:null,ctx:hn};return l?(or(c,n),128&r&&e.normalize(c)):n&&(c.shapeFlag|=v(n)?8:16),jo>0&&!i&&Vo&&(c.patchFlag>0||6&r)&&32!==c.patchFlag&&Vo.push(c),c}const Zo=function(e,t=null,n=null,s=0,o=null,r=!1){e&&e!==Cn||(e=Po);if(Ko(e)){const s=er(e,t,!0);return n&&or(s,n),jo>0&&!r&&Vo&&(6&s.shapeFlag?Vo[Vo.indexOf(e)]=s:Vo.push(s)),s.patchFlag|=-2,s}i=e,g(i)&&"__vccOpts"in i&&(e=e.__vccOpts);var i;if(t){t=Yo(t);let{class:e,style:n}=t;e&&!v(e)&&(t.class=G(e)),b(n)&&(xt(n)&&!p(n)&&(n=c({},n)),t.style=H(n))}const l=v(e)?1:wn(e)?128:(e=>e.__isTeleport)(e)?64:b(e)?4:g(e)?2:0;return Qo(e,t,n,s,o,l,r,!0)};function Yo(e){return e?xt(e)||Go in e?c({},e):e:null}function er(e,t,n=!1){const{props:s,ref:o,patchFlag:r,children:i}=e,l=t?rr(s||{},t):s;return{__v_isVNode:!0,__v_skip:!0,type:e.type,props:l,key:l&&Jo(l),ref:t&&t.ref?n&&o?p(o)?o.concat(Xo(t)):[o,Xo(t)]:Xo(t):o,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:i,target:e.target,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==Fo?-1===r?16:16|r:r,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:e.transition,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&er(e.ssContent),ssFallback:e.ssFallback&&er(e.ssFallback),el:e.el,anchor:e.anchor,ctx:e.ctx,ce:e.ce}}function tr(e=" ",t=0){return Zo(Mo,null,e,t)}function nr(e){return null==e||"boolean"==typeof e?Zo(Po):p(e)?Zo(Fo,null,e.slice()):"object"==typeof e?sr(e):Zo(Mo,null,String(e))}function sr(e){return null===e.el&&-1!==e.patchFlag||e.memo?e:er(e)}function or(e,t){let n=0;const{shapeFlag:s}=e;if(null==t)t=null;else if(p(t))n=16;else if("object"==typeof t){if(65&s){const n=t.default;return void(n&&(n._c&&(n._d=!1),or(e,n()),n._c&&(n._d=!0)))}{n=32;const s=t._;s||Go in t?3===s&&hn&&(1===hn.slots._?t._=1:(t._=2,e.patchFlag|=1024)):t._ctx=hn}}else g(t)?(t={default:t,_ctx:hn},n=32):(t=String(t),64&s?(n=16,t=[tr(t)]):n=8);e.children=t,e.shapeFlag|=n}function rr(...e){const t={};for(let n=0;n<e.length;n++){const s=e[n];for(const e in s)if("class"===e)t.class!==s.class&&(t.class=G([t.class,s.class]));else if("style"===e)t.style=H([t.style,s.style]);else if(i(e)){const n=t[e],o=s[e];!o||n===o||p(n)&&n.includes(o)||(t[e]=n?[].concat(n,o):o)}else""!==e&&(t[e]=s[e])}return t}function ir(e,t,n,s=null){Ht(e,t,7,[n,s])}const lr=Ks();let cr=0;let ar=null;const ur=()=>ar||hn;let dr,pr;dr=e=>{ar=e},pr=e=>{yr=e};const hr=e=>{const t=ar;return dr(e),e.scope.on(),()=>{e.scope.off(),dr(t)}},fr=()=>{ar&&ar.scope.off(),dr(null)};function mr(e){return 4&e.vnode.shapeFlag}let gr,vr,yr=!1;function br(e,t,n){g(t)?e.render=t:b(t)&&(e.setupState=Pt(t)),Sr(e,n)}function _r(e){gr=e,vr=e=>{e.render._rc&&(e.withProxy=new Proxy(e.ctx,Rs))}}function Sr(e,t,n){const s=e.type;if(!e.render){if(!t&&gr&&!s.render){const t=s.template||Bs(e).template;if(t){const{isCustomElement:n,compilerOptions:o}=e.appContext.config,{delimiters:r,compilerOptions:i}=s,l=c(c({isCustomElement:n,delimiters:r},o),i);s.render=gr(t,l)}}e.render=s.render||o,vr&&vr(e)}{const t=hr(e);ye();try{Ms(e)}finally{be(),t()}}}function xr(e){const t=t=>{e.exposed=t||{}};return{get attrs(){return function(e){return e.attrsProxy||(e.attrsProxy=new Proxy(e.attrs,{get:(t,n)=>(Ae(e,0,"$attrs"),t[n])}))}(e)},slots:e.slots,emit:e.emit,expose:t}}function Cr(e){if(e.exposed)return e.exposeProxy||(e.exposeProxy=new Proxy(Pt(kt(e.exposed)),{get:(t,n)=>n in t?t[n]:n in Ns?Ns[n](e):void 0,has:(e,t)=>t in e||t in Ns}))}function kr(e,t=!0){return g(e)?e.displayName||e.name:e.name||t&&e.__name}const Tr=(e,t)=>{const n=function(e,t,n=!1){let s,r;const i=g(e);return i?(s=e,r=o):(s=e.get,r=e.set),new Et(s,r,i||!r,n)}(e,0,yr);return n};function wr(e,t,n){const s=arguments.length;return 2===s?b(t)&&!p(t)?Ko(t)?Zo(e,null,[t]):Zo(e,t):Zo(e,null,t):(s>3?n=Array.prototype.slice.call(arguments,2):3===s&&Ko(n)&&(n=[n]),Zo(e,t,n))}function Er(e,t){const n=e.memo;if(n.length!=t.length)return!1;for(let s=0;s<n.length;s++)if(M(n[s],t[s]))return!1;return jo>0&&Vo&&Vo.push(e),!0}const Nr="3.4.21",Ar=o,Ir=o,Rr="undefined"!=typeof document?document:null,Or=Rr&&Rr.createElement("template"),Lr={insert:(e,t,n)=>{t.insertBefore(e,n||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,n,s)=>{const o="svg"===t?Rr.createElementNS("http://www.w3.org/2000/svg",e):"mathml"===t?Rr.createElementNS("http://www.w3.org/1998/Math/MathML",e):Rr.createElement(e,n?{is:n}:void 0);return"select"===e&&s&&null!=s.multiple&&o.setAttribute("multiple",s.multiple),o},createText:e=>Rr.createTextNode(e),createComment:e=>Rr.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>Rr.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},insertStaticContent(e,t,n,s,o,r){const i=n?n.previousSibling:t.lastChild;if(o&&(o===r||o.nextSibling))for(;t.insertBefore(o.cloneNode(!0),n),o!==r&&(o=o.nextSibling););else{Or.innerHTML="svg"===s?`<svg>${e}</svg>`:"mathml"===s?`<math>${e}</math>`:e;const o=Or.content;if("svg"===s||"mathml"===s){const e=o.firstChild;for(;e.firstChild;)o.appendChild(e.firstChild);o.removeChild(e)}t.insertBefore(o,n)}return[i?i.nextSibling:t.firstChild,n?n.previousSibling:t.lastChild]}},Fr="transition",Mr="animation",Pr=Symbol("_vtc"),$r=(e,{slots:t})=>wr(Jn,jr(e),t);$r.displayName="Transition";const Br={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},Vr=$r.props=c({},Gn,Br),Dr=(e,t=[])=>{p(e)?e.forEach((e=>e(...t))):e&&e(...t)},Ur=e=>!!e&&(p(e)?e.some((e=>e.length>1)):e.length>1);function jr(e){const t={};for(const c in e)c in Br||(t[c]=e[c]);if(!1===e.css)return t;const{name:n="v",type:s,duration:o,enterFromClass:r=`${n}-enter-from`,enterActiveClass:i=`${n}-enter-active`,enterToClass:l=`${n}-enter-to`,appearFromClass:a=r,appearActiveClass:u=i,appearToClass:d=l,leaveFromClass:p=`${n}-leave-from`,leaveActiveClass:h=`${n}-leave-active`,leaveToClass:f=`${n}-leave-to`}=e,m=function(e){if(null==e)return null;if(b(e))return[Hr(e.enter),Hr(e.leave)];{const t=Hr(e);return[t,t]}}(o),g=m&&m[0],v=m&&m[1],{onBeforeEnter:y,onEnter:_,onEnterCancelled:S,onLeave:x,onLeaveCancelled:C,onBeforeAppear:k=y,onAppear:T=_,onAppearCancelled:w=S}=t,E=(e,t,n)=>{Wr(e,t?d:l),Wr(e,t?u:i),n&&n()},N=(e,t)=>{e._isLeaving=!1,Wr(e,p),Wr(e,f),Wr(e,h),t&&t()},A=e=>(t,n)=>{const o=e?T:_,i=()=>E(t,e,n);Dr(o,[t,i]),Kr((()=>{Wr(t,e?a:r),qr(t,e?d:l),Ur(o)||Gr(t,s,g,i)}))};return c(t,{onBeforeEnter(e){Dr(y,[e]),qr(e,r),qr(e,i)},onBeforeAppear(e){Dr(k,[e]),qr(e,a),qr(e,u)},onEnter:A(!1),onAppear:A(!0),onLeave(e,t){e._isLeaving=!0;const n=()=>N(e,t);qr(e,p),Zr(),qr(e,h),Kr((()=>{e._isLeaving&&(Wr(e,p),qr(e,f),Ur(x)||Gr(e,s,v,n))})),Dr(x,[e,n])},onEnterCancelled(e){E(e,!1),Dr(S,[e])},onAppearCancelled(e){E(e,!0),Dr(w,[e])},onLeaveCancelled(e){N(e),Dr(C,[e])}})}function Hr(e){return V(e)}function qr(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.add(t))),(e[Pr]||(e[Pr]=new Set)).add(t)}function Wr(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.remove(t)));const n=e[Pr];n&&(n.delete(t),n.size||(e[Pr]=void 0))}function Kr(e){requestAnimationFrame((()=>{requestAnimationFrame(e)}))}let zr=0;function Gr(e,t,n,s){const o=e._endId=++zr,r=()=>{o===e._endId&&s()};if(n)return setTimeout(r,n);const{type:i,timeout:l,propCount:c}=Jr(e,t);if(!i)return s();const a=i+"end";let u=0;const d=()=>{e.removeEventListener(a,p),r()},p=t=>{t.target===e&&++u>=c&&d()};setTimeout((()=>{u<c&&d()}),l+1),e.addEventListener(a,p)}function Jr(e,t){const n=window.getComputedStyle(e),s=e=>(n[e]||"").split(", "),o=s(`${Fr}Delay`),r=s(`${Fr}Duration`),i=Xr(o,r),l=s(`${Mr}Delay`),c=s(`${Mr}Duration`),a=Xr(l,c);let u=null,d=0,p=0;t===Fr?i>0&&(u=Fr,d=i,p=r.length):t===Mr?a>0&&(u=Mr,d=a,p=c.length):(d=Math.max(i,a),u=d>0?i>a?Fr:Mr:null,p=u?u===Fr?r.length:c.length:0);return{type:u,timeout:d,propCount:p,hasTransform:u===Fr&&/\b(transform|all)(,|$)/.test(s(`${Fr}Property`).toString())}}function Xr(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max(...t.map(((t,n)=>Qr(t)+Qr(e[n]))))}function Qr(e){return"auto"===e?0:1e3*Number(e.slice(0,-1).replace(",","."))}function Zr(){return document.body.offsetHeight}const Yr=Symbol("_vod"),ei=Symbol("_vsh"),ti={beforeMount(e,{value:t},{transition:n}){e[Yr]="none"===e.style.display?"":e.style.display,n&&t?n.beforeEnter(e):ni(e,t)},mounted(e,{value:t},{transition:n}){n&&t&&n.enter(e)},updated(e,{value:t,oldValue:n},{transition:s}){!t!=!n&&(s?t?(s.beforeEnter(e),ni(e,!0),s.enter(e)):s.leave(e,(()=>{ni(e,!1)})):ni(e,t))},beforeUnmount(e,{value:t}){ni(e,t)}};function ni(e,t){e.style.display=t?e[Yr]:"none",e[ei]=!t}const si=Symbol("");function oi(e,t){if(128&e.shapeFlag){const n=e.suspense;e=n.activeBranch,n.pendingBranch&&!n.isHydrating&&n.effects.push((()=>{oi(n.activeBranch,t)}))}for(;e.component;)e=e.component.subTree;if(1&e.shapeFlag&&e.el)ri(e.el,t);else if(e.type===Fo)e.children.forEach((e=>oi(e,t)));else if(e.type===$o){let{el:n,anchor:s}=e;for(;n&&(ri(n,t),n!==s);)n=n.nextSibling}}function ri(e,t){if(1===e.nodeType){const n=e.style;let s="";for(const e in t)n.setProperty(`--${e}`,t[e]),s+=`--${e}: ${t[e]};`;n[si]=s}}const ii=/(^|;)\s*display\s*:/;const li=/\s*!important$/;function ci(e,t,n){if(p(n))n.forEach((n=>ci(e,t,n)));else if(null==n&&(n=""),t.startsWith("--"))e.setProperty(t,n);else{const s=function(e,t){const n=ui[t];if(n)return n;let s=I(t);if("filter"!==s&&s in e)return ui[t]=s;s=L(s);for(let o=0;o<ai.length;o++){const n=ai[o]+s;if(n in e)return ui[t]=n}return t}(e,t);li.test(n)?e.setProperty(O(s),n.replace(li,""),"important"):e[s]=n}}const ai=["Webkit","Moz","ms"],ui={};const di="http://www.w3.org/1999/xlink";function pi(e,t,n,s){e.addEventListener(t,n,s)}const hi=Symbol("_vei");function fi(e,t,n,s,o=null){const r=e[hi]||(e[hi]={}),i=r[t];if(s&&i)i.value=s;else{const[n,l]=function(e){let t;if(mi.test(e)){let n;for(t={};n=e.match(mi);)e=e.slice(0,e.length-n[0].length),t[n[0].toLowerCase()]=!0}const n=":"===e[2]?e.slice(3):O(e.slice(2));return[n,t]}(t);if(s){const i=r[t]=function(e,t){const n=e=>{if(e._vts){if(e._vts<=n.attached)return}else e._vts=Date.now();Ht(function(e,t){if(p(t)){const n=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{n.call(e),e._stopped=!0},t.map((e=>t=>!t._stopped&&e&&e(t)))}return t}(e,n.value),t,5,[e])};return n.value=e,n.attached=yi(),n}(s,o);pi(e,n,i,l)}else i&&(!function(e,t,n,s){e.removeEventListener(t,n,s)}(e,n,i,l),r[t]=void 0)}}const mi=/(?:Once|Passive|Capture)$/;let gi=0;const vi=Promise.resolve(),yi=()=>gi||(vi.then((()=>gi=0)),gi=Date.now());const bi=e=>111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)>96&&e.charCodeAt(2)<123;
/*! #__NO_SIDE_EFFECTS__ */
function _i(e,t){const n=ns(e);class s extends xi{constructor(e){super(n,e,t)}}return s.def=n,s}
/*! #__NO_SIDE_EFFECTS__ */const Si="undefined"!=typeof HTMLElement?HTMLElement:class{};class xi extends Si{constructor(e,t={},n){super(),this._def=e,this._props=t,this._instance=null,this._connected=!1,this._resolved=!1,this._numberProps=null,this._ob=null,this.shadowRoot&&n?n(this._createVNode(),this.shadowRoot):(this.attachShadow({mode:"open"}),this._def.__asyncLoader||this._resolveProps(this._def))}connectedCallback(){this._connected=!0,this._instance||(this._resolved?this._update():this._resolveDef())}disconnectedCallback(){this._connected=!1,this._ob&&(this._ob.disconnect(),this._ob=null),en((()=>{this._connected||(el(null,this.shadowRoot),this._instance=null)}))}_resolveDef(){this._resolved=!0;for(let n=0;n<this.attributes.length;n++)this._setAttr(this.attributes[n].name);this._ob=new MutationObserver((e=>{for(const t of e)this._setAttr(t.attributeName)})),this._ob.observe(this,{attributes:!0});const e=(e,t=!1)=>{const{props:n,styles:s}=e;let o;if(n&&!p(n))for(const r in n){const e=n[r];(e===Number||e&&e.type===Number)&&(r in this._props&&(this._props[r]=V(this._props[r])),(o||(o=Object.create(null)))[I(r)]=!0)}this._numberProps=o,t&&this._resolveProps(e),this._applyStyles(s),this._update()},t=this._def.__asyncLoader;t?t().then((t=>e(t,!0))):e(this._def)}_resolveProps(e){const{props:t}=e,n=p(t)?t:Object.keys(t||{});for(const s of Object.keys(this))"_"!==s[0]&&n.includes(s)&&this._setProp(s,this[s],!0,!1);for(const s of n.map(I))Object.defineProperty(this,s,{get(){return this._getProp(s)},set(e){this._setProp(s,e)}})}_setAttr(e){let t=this.getAttribute(e);const n=I(e);this._numberProps&&this._numberProps[n]&&(t=V(t)),this._setProp(n,t,!1)}_getProp(e){return this._props[e]}_setProp(e,t,n=!0,s=!0){t!==this._props[e]&&(this._props[e]=t,s&&this._instance&&this._update(),n&&(!0===t?this.setAttribute(O(e),""):"string"==typeof t||"number"==typeof t?this.setAttribute(O(e),t+""):t||this.removeAttribute(O(e))))}_update(){el(this._createVNode(),this.shadowRoot)}_createVNode(){const e=Zo(this._def,c({},this._props));return this._instance||(e.ce=e=>{this._instance=e,e.isCE=!0;const t=(e,t)=>{this.dispatchEvent(new CustomEvent(e,{detail:t}))};e.emit=(e,...n)=>{t(e,n),O(e)!==e&&t(O(e),n)};let n=this;for(;n=n&&(n.parentNode||n.host);)if(n instanceof xi){e.parent=n._instance,e.provides=n._instance.provides;break}}),e}_applyStyles(e){e&&e.forEach((e=>{const t=document.createElement("style");t.textContent=e,this.shadowRoot.appendChild(t)}))}}const Ci=new WeakMap,ki=new WeakMap,Ti=Symbol("_moveCb"),wi=Symbol("_enterCb"),Ei={name:"TransitionGroup",props:c({},Vr,{tag:String,moveClass:String}),setup(e,{slots:t}){const n=ur(),s=Kn();let o,r;return bs((()=>{if(!o.length)return;const t=e.moveClass||`${e.name||"v"}-move`;if(!function(e,t,n){const s=e.cloneNode(),o=e[Pr];o&&o.forEach((e=>{e.split(/\s+/).forEach((e=>e&&s.classList.remove(e)))}));n.split(/\s+/).forEach((e=>e&&s.classList.add(e))),s.style.display="none";const r=1===t.nodeType?t:t.parentNode;r.appendChild(s);const{hasTransform:i}=Jr(s);return r.removeChild(s),i}(o[0].el,n.vnode.el,t))return;o.forEach(Ai),o.forEach(Ii);const s=o.filter(Ri);Zr(),s.forEach((e=>{const n=e.el,s=n.style;qr(n,t),s.transform=s.webkitTransform=s.transitionDuration="";const o=n[Ti]=e=>{e&&e.target!==n||e&&!/transform$/.test(e.propertyName)||(n.removeEventListener("transitionend",o),n[Ti]=null,Wr(n,t))};n.addEventListener("transitionend",o)}))})),()=>{const i=Ct(e),l=jr(i);let c=i.tag||Fo;o=r,r=t.default?ts(t.default()):[];for(let e=0;e<r.length;e++){const t=r[e];null!=t.key&&es(t,Qn(t,l,s,n))}if(o)for(let e=0;e<o.length;e++){const t=o[e];es(t,Qn(t,l,s,n)),Ci.set(t,t.el.getBoundingClientRect())}return Zo(c,null,r)}}},Ni=Ei;function Ai(e){const t=e.el;t[Ti]&&t[Ti](),t[wi]&&t[wi]()}function Ii(e){ki.set(e,e.el.getBoundingClientRect())}function Ri(e){const t=Ci.get(e),n=ki.get(e),s=t.left-n.left,o=t.top-n.top;if(s||o){const t=e.el.style;return t.transform=t.webkitTransform=`translate(${s}px,${o}px)`,t.transitionDuration="0s",e}}const Oi=e=>{const t=e.props["onUpdate:modelValue"]||!1;return p(t)?e=>P(t,e):t};function Li(e){e.target.composing=!0}function Fi(e){const t=e.target;t.composing&&(t.composing=!1,t.dispatchEvent(new Event("input")))}const Mi=Symbol("_assign"),Pi={created(e,{modifiers:{lazy:t,trim:n,number:s}},o){e[Mi]=Oi(o);const r=s||o.props&&"number"===o.props.type;pi(e,t?"change":"input",(t=>{if(t.target.composing)return;let s=e.value;n&&(s=s.trim()),r&&(s=B(s)),e[Mi](s)})),n&&pi(e,"change",(()=>{e.value=e.value.trim()})),t||(pi(e,"compositionstart",Li),pi(e,"compositionend",Fi),pi(e,"change",Fi))},mounted(e,{value:t}){e.value=null==t?"":t},beforeUpdate(e,{value:t,modifiers:{lazy:n,trim:s,number:o}},r){if(e[Mi]=Oi(r),e.composing)return;const i=null==t?"":t;if((o||"number"===e.type?B(e.value):e.value)!==i){if(document.activeElement===e&&"range"!==e.type){if(n)return;if(s&&e.value.trim()===i)return}e.value=i}}},$i={deep:!0,created(e,t,n){e[Mi]=Oi(n),pi(e,"change",(()=>{const t=e._modelValue,n=ji(e),s=e.checked,o=e[Mi];if(p(t)){const e=ne(t,n),r=-1!==e;if(s&&!r)o(t.concat(n));else if(!s&&r){const n=[...t];n.splice(e,1),o(n)}}else if(f(t)){const e=new Set(t);s?e.add(n):e.delete(n),o(e)}else o(Hi(e,s))}))},mounted:Bi,beforeUpdate(e,t,n){e[Mi]=Oi(n),Bi(e,t,n)}};function Bi(e,{value:t,oldValue:n},s){e._modelValue=t,p(t)?e.checked=ne(t,s.props.value)>-1:f(t)?e.checked=t.has(s.props.value):t!==n&&(e.checked=te(t,Hi(e,!0)))}const Vi={created(e,{value:t},n){e.checked=te(t,n.props.value),e[Mi]=Oi(n),pi(e,"change",(()=>{e[Mi](ji(e))}))},beforeUpdate(e,{value:t,oldValue:n},s){e[Mi]=Oi(s),t!==n&&(e.checked=te(t,s.props.value))}},Di={deep:!0,created(e,{value:t,modifiers:{number:n}},s){const o=f(t);pi(e,"change",(()=>{const t=Array.prototype.filter.call(e.options,(e=>e.selected)).map((e=>n?B(ji(e)):ji(e)));e[Mi](e.multiple?o?new Set(t):t:t[0]),e._assigning=!0,en((()=>{e._assigning=!1}))})),e[Mi]=Oi(s)},mounted(e,{value:t,modifiers:{number:n}}){Ui(e,t,n)},beforeUpdate(e,t,n){e[Mi]=Oi(n)},updated(e,{value:t,modifiers:{number:n}}){e._assigning||Ui(e,t,n)}};function Ui(e,t,n){const s=e.multiple,o=p(t);if(!s||o||f(t)){for(let r=0,i=e.options.length;r<i;r++){const i=e.options[r],l=ji(i);if(s)if(o){const e=typeof l;i.selected="string"===e||"number"===e?t.includes(n?B(l):l):ne(t,l)>-1}else i.selected=t.has(l);else if(te(ji(i),t))return void(e.selectedIndex!==r&&(e.selectedIndex=r))}s||-1===e.selectedIndex||(e.selectedIndex=-1)}}function ji(e){return"_value"in e?e._value:e.value}function Hi(e,t){const n=t?"_trueValue":"_falseValue";return n in e?e[n]:t}const qi={created(e,t,n){Wi(e,t,n,null,"created")},mounted(e,t,n){Wi(e,t,n,null,"mounted")},beforeUpdate(e,t,n,s){Wi(e,t,n,s,"beforeUpdate")},updated(e,t,n,s){Wi(e,t,n,s,"updated")}};function Wi(e,t,n,s,o){const r=function(e,t){switch(e){case"SELECT":return Di;case"TEXTAREA":return Pi;default:switch(t){case"checkbox":return $i;case"radio":return Vi;default:return Pi}}}(e.tagName,n.props&&n.props.type)[o];r&&r(e,t,n,s)}const Ki=["ctrl","shift","alt","meta"],zi={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&0!==e.button,middle:e=>"button"in e&&1!==e.button,right:e=>"button"in e&&2!==e.button,exact:(e,t)=>Ki.some((n=>e[`${n}Key`]&&!t.includes(n)))},Gi={esc:"escape",space:" ",up:"arrow-up",left:"arrow-left",right:"arrow-right",down:"arrow-down",delete:"backspace"},Ji=c({patchProp:(e,t,n,s,o,r,c,a,u)=>{const d="svg"===o;"class"===t?function(e,t,n){const s=e[Pr];s&&(t=(t?[t,...s]:[...s]).join(" ")),null==t?e.removeAttribute("class"):n?e.setAttribute("class",t):e.className=t}(e,s,d):"style"===t?function(e,t,n){const s=e.style,o=v(n);let r=!1;if(n&&!o){if(t)if(v(t))for(const e of t.split(";")){const t=e.slice(0,e.indexOf(":")).trim();null==n[t]&&ci(s,t,"")}else for(const e in t)null==n[e]&&ci(s,e,"");for(const e in n)"display"===e&&(r=!0),ci(s,e,n[e])}else if(o){if(t!==n){const e=s[si];e&&(n+=";"+e),s.cssText=n,r=ii.test(n)}}else t&&e.removeAttribute("style");Yr in e&&(e[Yr]=r?s.display:"",e[ei]&&(s.display="none"))}(e,n,s):i(t)?l(t)||fi(e,t,0,s,c):("."===t[0]?(t=t.slice(1),1):"^"===t[0]?(t=t.slice(1),0):function(e,t,n,s){if(s)return"innerHTML"===t||"textContent"===t||!!(t in e&&bi(t)&&g(n));if("spellcheck"===t||"draggable"===t||"translate"===t)return!1;if("form"===t)return!1;if("list"===t&&"INPUT"===e.tagName)return!1;if("type"===t&&"TEXTAREA"===e.tagName)return!1;if("width"===t||"height"===t){const t=e.tagName;if("IMG"===t||"VIDEO"===t||"CANVAS"===t||"SOURCE"===t)return!1}if(bi(t)&&v(n))return!1;return t in e}(e,t,s,d))?function(e,t,n,s,o,r,i){if("innerHTML"===t||"textContent"===t)return s&&i(s,o,r),void(e[t]=null==n?"":n);const l=e.tagName;if("value"===t&&"PROGRESS"!==l&&!l.includes("-")){const s=null==n?"":n;return("OPTION"===l?e.getAttribute("value")||"":e.value)===s&&"_value"in e||(e.value=s),null==n&&e.removeAttribute(t),void(e._value=n)}let c=!1;if(""===n||null==n){const s=typeof e[t];"boolean"===s?n=ee(n):null==n&&"string"===s?(n="",c=!0):"number"===s&&(n=0,c=!0)}try{e[t]=n}catch(a){}c&&e.removeAttribute(t)}(e,t,s,r,c,a,u):("true-value"===t?e._trueValue=s:"false-value"===t&&(e._falseValue=s),function(e,t,n,s,o){if(s&&t.startsWith("xlink:"))null==n?e.removeAttributeNS(di,t.slice(6,t.length)):e.setAttributeNS(di,t,n);else{const s=Y(t);null==n||s&&!ee(n)?e.removeAttribute(t):e.setAttribute(t,s?"":n)}}(e,t,s,d))}},Lr);let Xi,Qi=!1;function Zi(){return Xi||(Xi=bo(Ji))}function Yi(){return Xi=Qi?Xi:_o(Ji),Qi=!0,Xi}const el=(...e)=>{Zi().render(...e)},tl=(...e)=>{Yi().hydrate(...e)};function nl(e){return e instanceof SVGElement?"svg":"function"==typeof MathMLElement&&e instanceof MathMLElement?"mathml":void 0}function sl(e){if(v(e)){return document.querySelector(e)}return e}const ol=o,rl=Symbol(""),il=Symbol(""),ll=Symbol(""),cl=Symbol(""),al=Symbol(""),ul=Symbol(""),dl=Symbol(""),pl=Symbol(""),hl=Symbol(""),fl=Symbol(""),ml=Symbol(""),gl=Symbol(""),vl=Symbol(""),yl=Symbol(""),bl=Symbol(""),_l=Symbol(""),Sl=Symbol(""),xl=Symbol(""),Cl=Symbol(""),kl=Symbol(""),Tl=Symbol(""),wl=Symbol(""),El=Symbol(""),Nl=Symbol(""),Al=Symbol(""),Il=Symbol(""),Rl=Symbol(""),Ol=Symbol(""),Ll=Symbol(""),Fl=Symbol(""),Ml=Symbol(""),Pl=Symbol(""),$l=Symbol(""),Bl=Symbol(""),Vl=Symbol(""),Dl=Symbol(""),Ul=Symbol(""),jl=Symbol(""),Hl=Symbol(""),ql={[rl]:"Fragment",[il]:"Teleport",[ll]:"Suspense",[cl]:"KeepAlive",[al]:"BaseTransition",[ul]:"openBlock",[dl]:"createBlock",[pl]:"createElementBlock",[hl]:"createVNode",[fl]:"createElementVNode",[ml]:"createCommentVNode",[gl]:"createTextVNode",[vl]:"createStaticVNode",[yl]:"resolveComponent",[bl]:"resolveDynamicComponent",[_l]:"resolveDirective",[Sl]:"resolveFilter",[xl]:"withDirectives",[Cl]:"renderList",[kl]:"renderSlot",[Tl]:"createSlots",[wl]:"toDisplayString",[El]:"mergeProps",[Nl]:"normalizeClass",[Al]:"normalizeStyle",[Il]:"normalizeProps",[Rl]:"guardReactiveProps",[Ol]:"toHandlers",[Ll]:"camelize",[Fl]:"capitalize",[Ml]:"toHandlerKey",[Pl]:"setBlockTracking",[$l]:"pushScopeId",[Bl]:"popScopeId",[Vl]:"withCtx",[Dl]:"unref",[Ul]:"isRef",[jl]:"withMemo",[Hl]:"isMemoSame"};const Wl={start:{line:1,column:1,offset:0},end:{line:1,column:1,offset:0},source:""};function Kl(e,t,n,s,o,r,i,l=!1,c=!1,a=!1,u=Wl){return e&&(l?(e.helper(ul),e.helper(nc(e.inSSR,a))):e.helper(tc(e.inSSR,a)),i&&e.helper(xl)),{type:13,tag:t,props:n,children:s,patchFlag:o,dynamicProps:r,directives:i,isBlock:l,disableTracking:c,isComponent:a,loc:u}}function zl(e,t=Wl){return{type:17,loc:t,elements:e}}function Gl(e,t=Wl){return{type:15,loc:t,properties:e}}function Jl(e,t){return{type:16,loc:Wl,key:v(e)?Xl(e,!0):e,value:t}}function Xl(e,t=!1,n=Wl,s=0){return{type:4,loc:n,content:e,isStatic:t,constType:t?3:s}}function Ql(e,t=Wl){return{type:8,loc:t,children:e}}function Zl(e,t=[],n=Wl){return{type:14,loc:n,callee:e,arguments:t}}function Yl(e,t=void 0,n=!1,s=!1,o=Wl){return{type:18,params:e,returns:t,newline:n,isSlot:s,loc:o}}function ec(e,t,n,s=!0){return{type:19,test:e,consequent:t,alternate:n,newline:s,loc:Wl}}function tc(e,t){return e||t?hl:fl}function nc(e,t){return e||t?dl:pl}function sc(e,{helper:t,removeHelper:n,inSSR:s}){e.isBlock||(e.isBlock=!0,n(tc(s,e.isComponent)),t(ul),t(nc(s,e.isComponent)))}const oc=new Uint8Array([123,123]),rc=new Uint8Array([125,125]);function ic(e){return e>=97&&e<=122||e>=65&&e<=90}function lc(e){return 32===e||10===e||9===e||12===e||13===e}function cc(e){return 47===e||62===e||lc(e)}function ac(e){const t=new Uint8Array(e.length);for(let n=0;n<e.length;n++)t[n]=e.charCodeAt(n);return t}const uc={Cdata:new Uint8Array([67,68,65,84,65,91]),CdataEnd:new Uint8Array([93,93,62]),CommentEnd:new Uint8Array([45,45,62]),ScriptEnd:new Uint8Array([60,47,115,99,114,105,112,116]),StyleEnd:new Uint8Array([60,47,115,116,121,108,101]),TitleEnd:new Uint8Array([60,47,116,105,116,108,101]),TextareaEnd:new Uint8Array([60,47,116,101,120,116,97,114,101,97])};function dc(e){throw e}function pc(e){}function hc(e,t,n,s){const o=new SyntaxError(String(`https://vuejs.org/error-reference/#compiler-${e}`));return o.code=e,o.loc=t,o}const fc=e=>4===e.type&&e.isStatic;function mc(e){switch(e){case"Teleport":case"teleport":return il;case"Suspense":case"suspense":return ll;case"KeepAlive":case"keep-alive":return cl;case"BaseTransition":case"base-transition":return al}}const gc=/^\d|[^\$\w]/,vc=e=>!gc.test(e),yc=/[A-Za-z_$\xA0-\uFFFF]/,bc=/[\.\?\w$\xA0-\uFFFF]/,_c=/\s+[.[]\s*|\s*[.[]\s+/g,Sc=e=>{e=e.trim().replace(_c,(e=>e.trim()));let t=0,n=[],s=0,o=0,r=null;for(let i=0;i<e.length;i++){const l=e.charAt(i);switch(t){case 0:if("["===l)n.push(t),t=1,s++;else if("("===l)n.push(t),t=2,o++;else if(!(0===i?yc:bc).test(l))return!1;break;case 1:"'"===l||'"'===l||"`"===l?(n.push(t),t=3,r=l):"["===l?s++:"]"===l&&(--s||(t=n.pop()));break;case 2:if("'"===l||'"'===l||"`"===l)n.push(t),t=3,r=l;else if("("===l)o++;else if(")"===l){if(i===e.length-1)return!1;--o||(t=n.pop())}break;case 3:l===r&&(t=n.pop(),r=null)}}return!s&&!o};function xc(e,t,n=!1){for(let s=0;s<e.props.length;s++){const o=e.props[s];if(7===o.type&&(n||o.exp)&&(v(t)?o.name===t:t.test(o.name)))return o}}function Cc(e,t,n=!1,s=!1){for(let o=0;o<e.props.length;o++){const r=e.props[o];if(6===r.type){if(n)continue;if(r.name===t&&(r.value||s))return r}else if("bind"===r.name&&(r.exp||s)&&kc(r.arg,t))return r}}function kc(e,t){return!(!e||!fc(e)||e.content!==t)}function Tc(e){return 5===e.type||2===e.type}function wc(e){return 7===e.type&&"slot"===e.name}function Ec(e){return 1===e.type&&3===e.tagType}function Nc(e){return 1===e.type&&2===e.tagType}const Ac=new Set([Il,Rl]);function Ic(e,t=[]){if(e&&!v(e)&&14===e.type){const n=e.callee;if(!v(n)&&Ac.has(n))return Ic(e.arguments[0],t.concat(e))}return[e,t]}function Rc(e,t,n){let s,o,r=13===e.type?e.props:e.arguments[2],i=[];if(r&&!v(r)&&14===r.type){const e=Ic(r);r=e[0],i=e[1],o=i[i.length-1]}if(null==r||v(r))s=Gl([t]);else if(14===r.type){const e=r.arguments[0];v(e)||15!==e.type?r.callee===Ol?s=Zl(n.helper(El),[Gl([t]),r]):r.arguments.unshift(Gl([t])):Oc(t,e)||e.properties.unshift(t),!s&&(s=r)}else 15===r.type?(Oc(t,r)||r.properties.unshift(t),s=r):(s=Zl(n.helper(El),[Gl([t]),r]),o&&o.callee===Rl&&(o=i[i.length-2]));13===e.type?o?o.arguments[0]=s:e.props=s:o?o.arguments[0]=s:e.arguments[2]=s}function Oc(e,t){let n=!1;if(4===e.key.type){const s=e.key.content;n=t.properties.some((e=>4===e.key.type&&e.key.content===s))}return n}function Lc(e,t){return`_${t}_${e.replace(/[^\w]/g,((t,n)=>"-"===t?"_":e.charCodeAt(n).toString()))}`}const Fc=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,Mc={parseMode:"base",ns:0,delimiters:["{{","}}"],getNamespace:()=>0,isVoidTag:r,isPreTag:r,isCustomElement:r,onError:dc,onWarn:pc,comments:!1,prefixIdentifiers:!1};let Pc=Mc,$c=null,Bc="",Vc=null,Dc=null,Uc="",jc=-1,Hc=-1,qc=0,Wc=!1,Kc=null;const zc=[],Gc=new class{constructor(e,t){this.stack=e,this.cbs=t,this.state=1,this.buffer="",this.sectionStart=0,this.index=0,this.entityStart=0,this.baseState=1,this.inRCDATA=!1,this.inXML=!1,this.inVPre=!1,this.newlines=[],this.mode=0,this.delimiterOpen=oc,this.delimiterClose=rc,this.delimiterIndex=-1,this.currentSequence=void 0,this.sequenceIndex=0}get inSFCRoot(){return 2===this.mode&&0===this.stack.length}reset(){this.state=1,this.mode=0,this.buffer="",this.sectionStart=0,this.index=0,this.baseState=1,this.inRCDATA=!1,this.currentSequence=void 0,this.newlines.length=0,this.delimiterOpen=oc,this.delimiterClose=rc}getPos(e){let t=1,n=e+1;for(let s=this.newlines.length-1;s>=0;s--){const o=this.newlines[s];if(e>o){t=s+2,n=e-o;break}}return{column:n,line:t,offset:e}}peek(){return this.buffer.charCodeAt(this.index+1)}stateText(e){60===e?(this.index>this.sectionStart&&this.cbs.ontext(this.sectionStart,this.index),this.state=5,this.sectionStart=this.index):this.inVPre||e!==this.delimiterOpen[0]||(this.state=2,this.delimiterIndex=0,this.stateInterpolationOpen(e))}stateInterpolationOpen(e){if(e===this.delimiterOpen[this.delimiterIndex])if(this.delimiterIndex===this.delimiterOpen.length-1){const e=this.index+1-this.delimiterOpen.length;e>this.sectionStart&&this.cbs.ontext(this.sectionStart,e),this.state=3,this.sectionStart=e}else this.delimiterIndex++;else this.inRCDATA?(this.state=32,this.stateInRCDATA(e)):(this.state=1,this.stateText(e))}stateInterpolation(e){e===this.delimiterClose[0]&&(this.state=4,this.delimiterIndex=0,this.stateInterpolationClose(e))}stateInterpolationClose(e){e===this.delimiterClose[this.delimiterIndex]?this.delimiterIndex===this.delimiterClose.length-1?(this.cbs.oninterpolation(this.sectionStart,this.index+1),this.state=this.inRCDATA?32:1,this.sectionStart=this.index+1):this.delimiterIndex++:(this.state=3,this.stateInterpolation(e))}stateSpecialStartSequence(e){const t=this.sequenceIndex===this.currentSequence.length;if(t?cc(e):(32|e)===this.currentSequence[this.sequenceIndex]){if(!t)return void this.sequenceIndex++}else this.inRCDATA=!1;this.sequenceIndex=0,this.state=6,this.stateInTagName(e)}stateInRCDATA(e){if(this.sequenceIndex===this.currentSequence.length){if(62===e||lc(e)){const t=this.index-this.currentSequence.length;if(this.sectionStart<t){const e=this.index;this.index=t,this.cbs.ontext(this.sectionStart,t),this.index=e}return this.sectionStart=t+2,this.stateInClosingTagName(e),void(this.inRCDATA=!1)}this.sequenceIndex=0}(32|e)===this.currentSequence[this.sequenceIndex]?this.sequenceIndex+=1:0===this.sequenceIndex?this.currentSequence===uc.TitleEnd||this.currentSequence===uc.TextareaEnd&&!this.inSFCRoot?e===this.delimiterOpen[0]&&(this.state=2,this.delimiterIndex=0,this.stateInterpolationOpen(e)):this.fastForwardTo(60)&&(this.sequenceIndex=1):this.sequenceIndex=Number(60===e)}stateCDATASequence(e){e===uc.Cdata[this.sequenceIndex]?++this.sequenceIndex===uc.Cdata.length&&(this.state=28,this.currentSequence=uc.CdataEnd,this.sequenceIndex=0,this.sectionStart=this.index+1):(this.sequenceIndex=0,this.state=23,this.stateInDeclaration(e))}fastForwardTo(e){for(;++this.index<this.buffer.length;){const t=this.buffer.charCodeAt(this.index);if(10===t&&this.newlines.push(this.index),t===e)return!0}return this.index=this.buffer.length-1,!1}stateInCommentLike(e){e===this.currentSequence[this.sequenceIndex]?++this.sequenceIndex===this.currentSequence.length&&(this.currentSequence===uc.CdataEnd?this.cbs.oncdata(this.sectionStart,this.index-2):this.cbs.oncomment(this.sectionStart,this.index-2),this.sequenceIndex=0,this.sectionStart=this.index+1,this.state=1):0===this.sequenceIndex?this.fastForwardTo(this.currentSequence[0])&&(this.sequenceIndex=1):e!==this.currentSequence[this.sequenceIndex-1]&&(this.sequenceIndex=0)}startSpecial(e,t){this.enterRCDATA(e,t),this.state=31}enterRCDATA(e,t){this.inRCDATA=!0,this.currentSequence=e,this.sequenceIndex=t}stateBeforeTagName(e){33===e?(this.state=22,this.sectionStart=this.index+1):63===e?(this.state=24,this.sectionStart=this.index+1):ic(e)?(this.sectionStart=this.index,this.state=0===this.mode?6:this.inSFCRoot?34:this.inXML?6:116===e?30:115===e?29:6):47===e?this.state=8:(this.state=1,this.stateText(e))}stateInTagName(e){cc(e)&&this.handleTagName(e)}stateInSFCRootTagName(e){if(cc(e)){const t=this.buffer.slice(this.sectionStart,this.index);"template"!==t&&this.enterRCDATA(ac("</"+t),0),this.handleTagName(e)}}handleTagName(e){this.cbs.onopentagname(this.sectionStart,this.index),this.sectionStart=-1,this.state=11,this.stateBeforeAttrName(e)}stateBeforeClosingTagName(e){lc(e)||(62===e?(this.state=1,this.sectionStart=this.index+1):(this.state=ic(e)?9:27,this.sectionStart=this.index))}stateInClosingTagName(e){(62===e||lc(e))&&(this.cbs.onclosetag(this.sectionStart,this.index),this.sectionStart=-1,this.state=10,this.stateAfterClosingTagName(e))}stateAfterClosingTagName(e){62===e&&(this.state=1,this.sectionStart=this.index+1)}stateBeforeAttrName(e){62===e?(this.cbs.onopentagend(this.index),this.state=this.inRCDATA?32:1,this.sectionStart=this.index+1):47===e?this.state=7:60===e&&47===this.peek()?(this.cbs.onopentagend(this.index),this.state=5,this.sectionStart=this.index):lc(e)||this.handleAttrStart(e)}handleAttrStart(e){118===e&&45===this.peek()?(this.state=13,this.sectionStart=this.index):46===e||58===e||64===e||35===e?(this.cbs.ondirname(this.index,this.index+1),this.state=14,this.sectionStart=this.index+1):(this.state=12,this.sectionStart=this.index)}stateInSelfClosingTag(e){62===e?(this.cbs.onselfclosingtag(this.index),this.state=1,this.sectionStart=this.index+1,this.inRCDATA=!1):lc(e)||(this.state=11,this.stateBeforeAttrName(e))}stateInAttrName(e){(61===e||cc(e))&&(this.cbs.onattribname(this.sectionStart,this.index),this.handleAttrNameEnd(e))}stateInDirName(e){61===e||cc(e)?(this.cbs.ondirname(this.sectionStart,this.index),this.handleAttrNameEnd(e)):58===e?(this.cbs.ondirname(this.sectionStart,this.index),this.state=14,this.sectionStart=this.index+1):46===e&&(this.cbs.ondirname(this.sectionStart,this.index),this.state=16,this.sectionStart=this.index+1)}stateInDirArg(e){61===e||cc(e)?(this.cbs.ondirarg(this.sectionStart,this.index),this.handleAttrNameEnd(e)):91===e?this.state=15:46===e&&(this.cbs.ondirarg(this.sectionStart,this.index),this.state=16,this.sectionStart=this.index+1)}stateInDynamicDirArg(e){93===e?this.state=14:(61===e||cc(e))&&(this.cbs.ondirarg(this.sectionStart,this.index+1),this.handleAttrNameEnd(e))}stateInDirModifier(e){61===e||cc(e)?(this.cbs.ondirmodifier(this.sectionStart,this.index),this.handleAttrNameEnd(e)):46===e&&(this.cbs.ondirmodifier(this.sectionStart,this.index),this.sectionStart=this.index+1)}handleAttrNameEnd(e){this.sectionStart=this.index,this.state=17,this.cbs.onattribnameend(this.index),this.stateAfterAttrName(e)}stateAfterAttrName(e){61===e?this.state=18:47===e||62===e?(this.cbs.onattribend(0,this.sectionStart),this.sectionStart=-1,this.state=11,this.stateBeforeAttrName(e)):lc(e)||(this.cbs.onattribend(0,this.sectionStart),this.handleAttrStart(e))}stateBeforeAttrValue(e){34===e?(this.state=19,this.sectionStart=this.index+1):39===e?(this.state=20,this.sectionStart=this.index+1):lc(e)||(this.sectionStart=this.index,this.state=21,this.stateInAttrValueNoQuotes(e))}handleInAttrValue(e,t){(e===t||this.fastForwardTo(t))&&(this.cbs.onattribdata(this.sectionStart,this.index),this.sectionStart=-1,this.cbs.onattribend(34===t?3:2,this.index+1),this.state=11)}stateInAttrValueDoubleQuotes(e){this.handleInAttrValue(e,34)}stateInAttrValueSingleQuotes(e){this.handleInAttrValue(e,39)}stateInAttrValueNoQuotes(e){lc(e)||62===e?(this.cbs.onattribdata(this.sectionStart,this.index),this.sectionStart=-1,this.cbs.onattribend(1,this.index),this.state=11,this.stateBeforeAttrName(e)):39!==e&&60!==e&&61!==e&&96!==e||this.cbs.onerr(18,this.index)}stateBeforeDeclaration(e){91===e?(this.state=26,this.sequenceIndex=0):this.state=45===e?25:23}stateInDeclaration(e){(62===e||this.fastForwardTo(62))&&(this.state=1,this.sectionStart=this.index+1)}stateInProcessingInstruction(e){(62===e||this.fastForwardTo(62))&&(this.cbs.onprocessinginstruction(this.sectionStart,this.index),this.state=1,this.sectionStart=this.index+1)}stateBeforeComment(e){45===e?(this.state=28,this.currentSequence=uc.CommentEnd,this.sequenceIndex=2,this.sectionStart=this.index+1):this.state=23}stateInSpecialComment(e){(62===e||this.fastForwardTo(62))&&(this.cbs.oncomment(this.sectionStart,this.index),this.state=1,this.sectionStart=this.index+1)}stateBeforeSpecialS(e){e===uc.ScriptEnd[3]?this.startSpecial(uc.ScriptEnd,4):e===uc.StyleEnd[3]?this.startSpecial(uc.StyleEnd,4):(this.state=6,this.stateInTagName(e))}stateBeforeSpecialT(e){e===uc.TitleEnd[3]?this.startSpecial(uc.TitleEnd,4):e===uc.TextareaEnd[3]?this.startSpecial(uc.TextareaEnd,4):(this.state=6,this.stateInTagName(e))}startEntity(){}stateInEntity(){}parse(e){for(this.buffer=e;this.index<this.buffer.length;){const e=this.buffer.charCodeAt(this.index);switch(10===e&&this.newlines.push(this.index),this.state){case 1:this.stateText(e);break;case 2:this.stateInterpolationOpen(e);break;case 3:this.stateInterpolation(e);break;case 4:this.stateInterpolationClose(e);break;case 31:this.stateSpecialStartSequence(e);break;case 32:this.stateInRCDATA(e);break;case 26:this.stateCDATASequence(e);break;case 19:this.stateInAttrValueDoubleQuotes(e);break;case 12:this.stateInAttrName(e);break;case 13:this.stateInDirName(e);break;case 14:this.stateInDirArg(e);break;case 15:this.stateInDynamicDirArg(e);break;case 16:this.stateInDirModifier(e);break;case 28:this.stateInCommentLike(e);break;case 27:this.stateInSpecialComment(e);break;case 11:this.stateBeforeAttrName(e);break;case 6:this.stateInTagName(e);break;case 34:this.stateInSFCRootTagName(e);break;case 9:this.stateInClosingTagName(e);break;case 5:this.stateBeforeTagName(e);break;case 17:this.stateAfterAttrName(e);break;case 20:this.stateInAttrValueSingleQuotes(e);break;case 18:this.stateBeforeAttrValue(e);break;case 8:this.stateBeforeClosingTagName(e);break;case 10:this.stateAfterClosingTagName(e);break;case 29:this.stateBeforeSpecialS(e);break;case 30:this.stateBeforeSpecialT(e);break;case 21:this.stateInAttrValueNoQuotes(e);break;case 7:this.stateInSelfClosingTag(e);break;case 23:this.stateInDeclaration(e);break;case 22:this.stateBeforeDeclaration(e);break;case 25:this.stateBeforeComment(e);break;case 24:this.stateInProcessingInstruction(e);break;case 33:this.stateInEntity()}this.index++}this.cleanup(),this.finish()}cleanup(){this.sectionStart!==this.index&&(1===this.state||32===this.state&&0===this.sequenceIndex?(this.cbs.ontext(this.sectionStart,this.index),this.sectionStart=this.index):19!==this.state&&20!==this.state&&21!==this.state||(this.cbs.onattribdata(this.sectionStart,this.index),this.sectionStart=this.index))}finish(){this.handleTrailingData(),this.cbs.onend()}handleTrailingData(){const e=this.buffer.length;this.sectionStart>=e||(28===this.state?this.currentSequence===uc.CdataEnd?this.cbs.oncdata(this.sectionStart,e):this.cbs.oncomment(this.sectionStart,e):6===this.state||11===this.state||18===this.state||17===this.state||12===this.state||13===this.state||14===this.state||15===this.state||16===this.state||20===this.state||19===this.state||21===this.state||9===this.state||this.cbs.ontext(this.sectionStart,e))}emitCodePoint(e,t){}}(zc,{onerr:ha,ontext(e,t){Yc(Qc(e,t),e,t)},ontextentity(e,t,n){Yc(e,t,n)},oninterpolation(e,t){if(Wc)return Yc(Qc(e,t),e,t);let n=e+Gc.delimiterOpen.length,s=t-Gc.delimiterClose.length;for(;lc(Bc.charCodeAt(n));)n++;for(;lc(Bc.charCodeAt(s-1));)s--;let o=Qc(n,s);o.includes("&")&&(o=Pc.decodeEntities(o,!1)),ca({type:5,content:pa(o,!1,aa(n,s)),loc:aa(e,t)})},onopentagname(e,t){const n=Qc(e,t);Vc={type:1,tag:n,ns:Pc.getNamespace(n,zc[0],Pc.ns),tagType:0,props:[],children:[],loc:aa(e-1,t),codegenNode:void 0}},onopentagend(e){Zc(e)},onclosetag(e,t){const n=Qc(e,t);if(!Pc.isVoidTag(n)){let s=!1;for(let e=0;e<zc.length;e++){if(zc[e].tag.toLowerCase()===n.toLowerCase()){s=!0;for(let n=0;n<=e;n++){ea(zc.shift(),t,n<e)}break}}s||ta(e,60)}},onselfclosingtag(e){var t;const n=Vc.tag;Vc.isSelfClosing=!0,Zc(e),(null==(t=zc[0])?void 0:t.tag)===n&&ea(zc.shift(),e)},onattribname(e,t){Dc={type:6,name:Qc(e,t),nameLoc:aa(e,t),value:void 0,loc:aa(e)}},ondirname(e,t){const n=Qc(e,t),s="."===n||":"===n?"bind":"@"===n?"on":"#"===n?"slot":n.slice(2);if(Wc||""===s)Dc={type:6,name:n,nameLoc:aa(e,t),value:void 0,loc:aa(e)};else if(Dc={type:7,name:s,rawName:n,exp:void 0,arg:void 0,modifiers:"."===n?["prop"]:[],loc:aa(e)},"pre"===s){Wc=Gc.inVPre=!0,Kc=Vc;const e=Vc.props;for(let t=0;t<e.length;t++)7===e[t].type&&(e[t]=da(e[t]))}},ondirarg(e,t){if(e===t)return;const n=Qc(e,t);if(Wc)Dc.name+=n,ua(Dc.nameLoc,t);else{const s="["!==n[0];Dc.arg=pa(s?n:n.slice(1,-1),s,aa(e,t),s?3:0)}},ondirmodifier(e,t){const n=Qc(e,t);if(Wc)Dc.name+="."+n,ua(Dc.nameLoc,t);else if("slot"===Dc.name){const e=Dc.arg;e&&(e.content+="."+n,ua(e.loc,t))}else Dc.modifiers.push(n)},onattribdata(e,t){Uc+=Qc(e,t),jc<0&&(jc=e),Hc=t},onattribentity(e,t,n){Uc+=e,jc<0&&(jc=t),Hc=n},onattribnameend(e){const t=Qc(Dc.loc.start.offset,e);7===Dc.type&&(Dc.rawName=t),Vc.props.some((e=>(7===e.type?e.rawName:e.name)===t))},onattribend(e,t){if(Vc&&Dc){if(ua(Dc.loc,t),0!==e)if(Uc.includes("&")&&(Uc=Pc.decodeEntities(Uc,!0)),6===Dc.type)"class"===Dc.name&&(Uc=la(Uc).trim()),Dc.value={type:2,content:Uc,loc:1===e?aa(jc,Hc):aa(jc-1,Hc+1)},Gc.inSFCRoot&&"template"===Vc.tag&&"lang"===Dc.name&&Uc&&"html"!==Uc&&Gc.enterRCDATA(ac("</template"),0);else{let e=0;Dc.exp=pa(Uc,!1,aa(jc,Hc),0,e),"for"===Dc.name&&(Dc.forParseResult=function(e){const t=e.loc,n=e.content,s=n.match(Fc);if(!s)return;const[,o,r]=s,i=(e,n,s=!1)=>{const o=t.start.offset+n;return pa(e,!1,aa(o,o+e.length),0,s?1:0)},l={source:i(r.trim(),n.indexOf(r,o.length)),value:void 0,key:void 0,index:void 0,finalized:!1};let c=o.trim().replace(Xc,"").trim();const a=o.indexOf(c),u=c.match(Jc);if(u){c=c.replace(Jc,"").trim();const e=u[1].trim();let t;if(e&&(t=n.indexOf(e,a+c.length),l.key=i(e,t,!0)),u[2]){const s=u[2].trim();s&&(l.index=i(s,n.indexOf(s,l.key?t+e.length:a+c.length),!0))}}c&&(l.value=i(c,a,!0));return l}(Dc.exp))}7===Dc.type&&"pre"===Dc.name||Vc.props.push(Dc)}Uc="",jc=Hc=-1},oncomment(e,t){Pc.comments&&ca({type:3,content:Qc(e,t),loc:aa(e-4,t+3)})},onend(){const e=Bc.length;for(let t=0;t<zc.length;t++)ea(zc[t],e-1)},oncdata(e,t){0!==zc[0].ns&&Yc(Qc(e,t),e,t)},onprocessinginstruction(e){0===(zc[0]?zc[0].ns:Pc.ns)&&ha(21,e-1)}}),Jc=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,Xc=/^\(|\)$/g;function Qc(e,t){return Bc.slice(e,t)}function Zc(e){Gc.inSFCRoot&&(Vc.innerLoc=aa(e+1,e+1)),ca(Vc);const{tag:t,ns:n}=Vc;0===n&&Pc.isPreTag(t)&&qc++,Pc.isVoidTag(t)?ea(Vc,e):(zc.unshift(Vc),1!==n&&2!==n||(Gc.inXML=!0)),Vc=null}function Yc(e,t,n){var s;{const t=null==(s=zc[0])?void 0:s.tag;"script"!==t&&"style"!==t&&e.includes("&")&&(e=Pc.decodeEntities(e,!1))}const o=zc[0]||$c,r=o.children[o.children.length-1];2===(null==r?void 0:r.type)?(r.content+=e,ua(r.loc,n)):o.children.push({type:2,content:e,loc:aa(t,n)})}function ea(e,t,n=!1){ua(e.loc,n?ta(t,60):t+1),Gc.inSFCRoot&&(e.innerLoc.end=c({},e.children.length?e.children[e.children.length-1].loc.end:e.innerLoc.start),e.innerLoc.source=Qc(e.innerLoc.start.offset,e.innerLoc.end.offset));const{tag:s,ns:o}=e;Wc||("slot"===s?e.tagType=2:!function({tag:e,props:t}){if("template"===e)for(let n=0;n<t.length;n++)if(7===t[n].type&&na.has(t[n].name))return!0;return!1}(e)?function({tag:e,props:t}){var n;if(Pc.isCustomElement(e))return!1;if("component"===e||(s=e.charCodeAt(0),s>64&&s<91)||mc(e)||(null==(n=Pc.isBuiltInComponent)?void 0:n.call(Pc,e))||Pc.isNativeTag&&!Pc.isNativeTag(e))return!0;var s;for(let o=0;o<t.length;o++){const e=t[o];if(6===e.type&&"is"===e.name&&e.value&&e.value.content.startsWith("vue:"))return!0}return!1}(e)&&(e.tagType=1):e.tagType=3),Gc.inRCDATA||(e.children=oa(e.children,e.tag)),0===o&&Pc.isPreTag(s)&&qc--,Kc===e&&(Wc=Gc.inVPre=!1,Kc=null),Gc.inXML&&0===(zc[0]?zc[0].ns:Pc.ns)&&(Gc.inXML=!1)}function ta(e,t){let n=e;for(;Bc.charCodeAt(n)!==t&&n>=0;)n--;return n}const na=new Set(["if","else","else-if","for","slot"]);const sa=/\r\n/g;function oa(e,t){var n,s;const o="preserve"!==Pc.whitespace;let r=!1;for(let i=0;i<e.length;i++){const t=e[i];if(2===t.type)if(qc)t.content=t.content.replace(sa,"\n");else if(ra(t.content)){const l=null==(n=e[i-1])?void 0:n.type,c=null==(s=e[i+1])?void 0:s.type;!l||!c||o&&(3===l&&(3===c||1===c)||1===l&&(3===c||1===c&&ia(t.content)))?(r=!0,e[i]=null):t.content=" "}else o&&(t.content=la(t.content))}if(qc&&t&&Pc.isPreTag(t)){const t=e[0];t&&2===t.type&&(t.content=t.content.replace(/^\r?\n/,""))}return r?e.filter(Boolean):e}function ra(e){for(let t=0;t<e.length;t++)if(!lc(e.charCodeAt(t)))return!1;return!0}function ia(e){for(let t=0;t<e.length;t++){const n=e.charCodeAt(t);if(10===n||13===n)return!0}return!1}function la(e){let t="",n=!1;for(let s=0;s<e.length;s++)lc(e.charCodeAt(s))?n||(t+=" ",n=!0):(t+=e[s],n=!1);return t}function ca(e){(zc[0]||$c).children.push(e)}function aa(e,t){return{start:Gc.getPos(e),end:null==t?t:Gc.getPos(t),source:null==t?t:Qc(e,t)}}function ua(e,t){e.end=Gc.getPos(t),e.source=Qc(e.start.offset,t)}function da(e){const t={type:6,name:e.rawName,nameLoc:aa(e.loc.start.offset,e.loc.start.offset+e.rawName.length),value:void 0,loc:e.loc};if(e.exp){const n=e.exp.loc;n.end.offset<e.loc.end.offset&&(n.start.offset--,n.start.column--,n.end.offset++,n.end.column++),t.value={type:2,content:e.exp.content,loc:n}}return t}function pa(e,t=!1,n,s=0,o=0){return Xl(e,t,n,s)}function ha(e,t,n){Pc.onError(hc(e,aa(t,t)))}function fa(e,t){if(Gc.reset(),Vc=null,Dc=null,Uc="",jc=-1,Hc=-1,zc.length=0,Bc=e,Pc=c({},Mc),t){let e;for(e in t)null!=t[e]&&(Pc[e]=t[e])}Gc.mode="html"===Pc.parseMode?1:"sfc"===Pc.parseMode?2:0,Gc.inXML=1===Pc.ns||2===Pc.ns;const n=null==t?void 0:t.delimiters;n&&(Gc.delimiterOpen=ac(n[0]),Gc.delimiterClose=ac(n[1]));const s=$c=function(e,t=""){return{type:0,source:t,children:e,helpers:new Set,components:[],directives:[],hoists:[],imports:[],cached:0,temps:0,codegenNode:void 0,loc:Wl}}([],e);return Gc.parse(Bc),s.loc=aa(0,e.length),s.children=oa(s.children),$c=null,s}function ma(e,t){va(e,t,ga(e,e.children[0]))}function ga(e,t){const{children:n}=e;return 1===n.length&&1===t.type&&!Nc(t)}function va(e,t,n=!1){const{children:s}=e,o=s.length;let r=0;for(let i=0;i<s.length;i++){const e=s[i];if(1===e.type&&0===e.tagType){const s=n?0:ya(e,t);if(s>0){if(s>=2){e.codegenNode.patchFlag="-1",e.codegenNode=t.hoist(e.codegenNode),r++;continue}}else{const n=e.codegenNode;if(13===n.type){const s=Ca(n);if((!s||512===s||1===s)&&Sa(e,t)>=2){const s=xa(e);s&&(n.props=t.hoist(s))}n.dynamicProps&&(n.dynamicProps=t.hoist(n.dynamicProps))}}}if(1===e.type){const n=1===e.tagType;n&&t.scopes.vSlot++,va(e,t),n&&t.scopes.vSlot--}else if(11===e.type)va(e,t,1===e.children.length);else if(9===e.type)for(let n=0;n<e.branches.length;n++)va(e.branches[n],t,1===e.branches[n].children.length)}if(r&&t.transformHoist&&t.transformHoist(s,t,e),r&&r===o&&1===e.type&&0===e.tagType&&e.codegenNode&&13===e.codegenNode.type&&p(e.codegenNode.children)){const n=t.hoist(zl(e.codegenNode.children));t.hmr&&(n.content=`[...${n.content}]`),e.codegenNode.children=n}}function ya(e,t){const{constantCache:n}=t;switch(e.type){case 1:if(0!==e.tagType)return 0;const s=n.get(e);if(void 0!==s)return s;const o=e.codegenNode;if(13!==o.type)return 0;if(o.isBlock&&"svg"!==e.tag&&"foreignObject"!==e.tag)return 0;if(Ca(o))return n.set(e,0),0;{let s=3;const r=Sa(e,t);if(0===r)return n.set(e,0),0;r<s&&(s=r);for(let o=0;o<e.children.length;o++){const r=ya(e.children[o],t);if(0===r)return n.set(e,0),0;r<s&&(s=r)}if(s>1)for(let o=0;o<e.props.length;o++){const r=e.props[o];if(7===r.type&&"bind"===r.name&&r.exp){const o=ya(r.exp,t);if(0===o)return n.set(e,0),0;o<s&&(s=o)}}if(o.isBlock){for(let t=0;t<e.props.length;t++){if(7===e.props[t].type)return n.set(e,0),0}t.removeHelper(ul),t.removeHelper(nc(t.inSSR,o.isComponent)),o.isBlock=!1,t.helper(tc(t.inSSR,o.isComponent))}return n.set(e,s),s}case 2:case 3:return 3;case 9:case 11:case 10:default:return 0;case 5:case 12:return ya(e.content,t);case 4:return e.constType;case 8:let r=3;for(let n=0;n<e.children.length;n++){const s=e.children[n];if(v(s)||y(s))continue;const o=ya(s,t);if(0===o)return 0;o<r&&(r=o)}return r}}const ba=new Set([Nl,Al,Il,Rl]);function _a(e,t){if(14===e.type&&!v(e.callee)&&ba.has(e.callee)){const n=e.arguments[0];if(4===n.type)return ya(n,t);if(14===n.type)return _a(n,t)}return 0}function Sa(e,t){let n=3;const s=xa(e);if(s&&15===s.type){const{properties:e}=s;for(let s=0;s<e.length;s++){const{key:o,value:r}=e[s],i=ya(o,t);if(0===i)return i;let l;if(i<n&&(n=i),l=4===r.type?ya(r,t):14===r.type?_a(r,t):0,0===l)return l;l<n&&(n=l)}}return n}function xa(e){const t=e.codegenNode;if(13===t.type)return t.props}function Ca(e){const t=e.patchFlag;return t?parseInt(t,10):void 0}function ka(e,{filename:t="",prefixIdentifiers:s=!1,hoistStatic:r=!1,hmr:i=!1,cacheHandlers:l=!1,nodeTransforms:c=[],directiveTransforms:a={},transformHoist:u=null,isBuiltInComponent:d=o,isCustomElement:p=o,expressionPlugins:h=[],scopeId:f=null,slotted:m=!0,ssr:g=!1,inSSR:y=!1,ssrCssVars:b="",bindingMetadata:_=n,inline:S=!1,isTS:x=!1,onError:C=dc,onWarn:k=pc,compatConfig:T}){const w=t.replace(/\?.*$/,"").match(/([^/\\]+)\.\w+$/),E={filename:t,selfName:w&&L(I(w[1])),prefixIdentifiers:s,hoistStatic:r,hmr:i,cacheHandlers:l,nodeTransforms:c,directiveTransforms:a,transformHoist:u,isBuiltInComponent:d,isCustomElement:p,expressionPlugins:h,scopeId:f,slotted:m,ssr:g,inSSR:y,ssrCssVars:b,bindingMetadata:_,inline:S,isTS:x,onError:C,onWarn:k,compatConfig:T,root:e,helpers:new Map,components:new Set,directives:new Set,hoists:[],imports:[],constantCache:new WeakMap,temps:0,cached:0,identifiers:Object.create(null),scopes:{vFor:0,vSlot:0,vPre:0,vOnce:0},parent:null,currentNode:e,childIndex:0,inVOnce:!1,helper(e){const t=E.helpers.get(e)||0;return E.helpers.set(e,t+1),e},removeHelper(e){const t=E.helpers.get(e);if(t){const n=t-1;n?E.helpers.set(e,n):E.helpers.delete(e)}},helperString:e=>`_${ql[E.helper(e)]}`,replaceNode(e){E.parent.children[E.childIndex]=E.currentNode=e},removeNode(e){const t=e?E.parent.children.indexOf(e):E.currentNode?E.childIndex:-1;e&&e!==E.currentNode?E.childIndex>t&&(E.childIndex--,E.onNodeRemoved()):(E.currentNode=null,E.onNodeRemoved()),E.parent.children.splice(t,1)},onNodeRemoved:o,addIdentifiers(e){},removeIdentifiers(e){},hoist(e){v(e)&&(e=Xl(e)),E.hoists.push(e);const t=Xl(`_hoisted_${E.hoists.length}`,!1,e.loc,2);return t.hoisted=e,t},cache:(e,t=!1)=>function(e,t,n=!1){return{type:20,index:e,value:t,isVNode:n,loc:Wl}}(E.cached++,e,t)};return E}function Ta(e,t){const n=ka(e,t);wa(e,n),t.hoistStatic&&ma(e,n),t.ssr||function(e,t){const{helper:n}=t,{children:s}=e;if(1===s.length){const n=s[0];if(ga(e,n)&&n.codegenNode){const s=n.codegenNode;13===s.type&&sc(s,t),e.codegenNode=s}else e.codegenNode=n}else if(s.length>1){let s=64;e.codegenNode=Kl(t,n(rl),void 0,e.children,s+"",void 0,void 0,!0,void 0,!1)}}(e,n),e.helpers=new Set([...n.helpers.keys()]),e.components=[...n.components],e.directives=[...n.directives],e.imports=n.imports,e.hoists=n.hoists,e.temps=n.temps,e.cached=n.cached,e.transformed=!0}function wa(e,t){t.currentNode=e;const{nodeTransforms:n}=t,s=[];for(let r=0;r<n.length;r++){const o=n[r](e,t);if(o&&(p(o)?s.push(...o):s.push(o)),!t.currentNode)return;e=t.currentNode}switch(e.type){case 3:t.ssr||t.helper(ml);break;case 5:t.ssr||t.helper(wl);break;case 9:for(let n=0;n<e.branches.length;n++)wa(e.branches[n],t);break;case 10:case 11:case 1:case 0:!function(e,t){let n=0;const s=()=>{n--};for(;n<e.children.length;n++){const o=e.children[n];v(o)||(t.parent=e,t.childIndex=n,t.onNodeRemoved=s,wa(o,t))}}(e,t)}t.currentNode=e;let o=s.length;for(;o--;)s[o]()}function Ea(e,t){const n=v(e)?t=>t===e:t=>e.test(t);return(e,s)=>{if(1===e.type){const{props:o}=e;if(3===e.tagType&&o.some(wc))return;const r=[];for(let i=0;i<o.length;i++){const l=o[i];if(7===l.type&&n(l.name)){o.splice(i,1),i--;const n=t(e,l,s);n&&r.push(n)}}return r}}}const Na="/*#__PURE__*/",Aa=e=>`${ql[e]}: _${ql[e]}`;function Ia(e,t={}){const n=function(e,{mode:t="function",prefixIdentifiers:n="module"===t,sourceMap:s=!1,filename:o="template.vue.html",scopeId:r=null,optimizeImports:i=!1,runtimeGlobalName:l="Vue",runtimeModuleName:c="vue",ssrRuntimeModuleName:a="vue/server-renderer",ssr:u=!1,isTS:d=!1,inSSR:p=!1}){const h={mode:t,prefixIdentifiers:n,sourceMap:s,filename:o,scopeId:r,optimizeImports:i,runtimeGlobalName:l,runtimeModuleName:c,ssrRuntimeModuleName:a,ssr:u,isTS:d,inSSR:p,source:e.source,code:"",column:1,line:1,offset:0,indentLevel:0,pure:!1,map:void 0,helper:e=>`_${ql[e]}`,push(e,t=-2,n){h.code+=e},indent(){f(++h.indentLevel)},deindent(e=!1){e?--h.indentLevel:f(--h.indentLevel)},newline(){f(h.indentLevel)}};function f(e){h.push("\n"+"  ".repeat(e),0)}return h}(e,t);t.onContextCreated&&t.onContextCreated(n);const{mode:s,push:o,prefixIdentifiers:r,indent:i,deindent:l,newline:c,ssr:a}=n,u=Array.from(e.helpers),d=u.length>0,p=!r&&"module"!==s;!function(e,t){const{push:n,newline:s,runtimeGlobalName:o}=t,r=o,i=Array.from(e.helpers);if(i.length>0&&(n(`const _Vue = ${r}\n`,-1),e.hoists.length)){n(`const { ${[hl,fl,ml,gl,vl].filter((e=>i.includes(e))).map(Aa).join(", ")} } = _Vue\n`,-1)}(function(e,t){if(!e.length)return;t.pure=!0;const{push:n,newline:s}=t;s();for(let o=0;o<e.length;o++){const r=e[o];r&&(n(`const _hoisted_${o+1} = `),Fa(r,t),s())}t.pure=!1})(e.hoists,t),s(),n("return ")}(e,n);if(o(`function ${a?"ssrRender":"render"}(${(a?["_ctx","_push","_parent","_attrs"]:["_ctx","_cache"]).join(", ")}) {`),i(),p&&(o("with (_ctx) {"),i(),d&&(o(`const { ${u.map(Aa).join(", ")} } = _Vue\n`,-1),c())),e.components.length&&(Ra(e.components,"component",n),(e.directives.length||e.temps>0)&&c()),e.directives.length&&(Ra(e.directives,"directive",n),e.temps>0&&c()),e.temps>0){o("let ");for(let t=0;t<e.temps;t++)o(`${t>0?", ":""}_temp${t}`)}return(e.components.length||e.directives.length||e.temps)&&(o("\n",0),c()),a||o("return "),e.codegenNode?Fa(e.codegenNode,n):o("null"),p&&(l(),o("}")),l(),o("}"),{ast:e,code:n.code,preamble:"",map:n.map?n.map.toJSON():void 0}}function Ra(e,t,{helper:n,push:s,newline:o,isTS:r}){const i=n("component"===t?yl:_l);for(let l=0;l<e.length;l++){let n=e[l];const c=n.endsWith("__self");c&&(n=n.slice(0,-6)),s(`const ${Lc(n,t)} = ${i}(${JSON.stringify(n)}${c?", true":""})${r?"!":""}`),l<e.length-1&&o()}}function Oa(e,t){const n=e.length>3||!1;t.push("["),n&&t.indent(),La(e,t,n),n&&t.deindent(),t.push("]")}function La(e,t,n=!1,s=!0){const{push:o,newline:r}=t;for(let i=0;i<e.length;i++){const l=e[i];v(l)?o(l,-3):p(l)?Oa(l,t):Fa(l,t),i<e.length-1&&(n?(s&&o(","),r()):s&&o(", "))}}function Fa(e,t){if(v(e))t.push(e,-3);else if(y(e))t.push(t.helper(e));else switch(e.type){case 1:case 9:case 11:case 12:Fa(e.codegenNode,t);break;case 2:!function(e,t){t.push(JSON.stringify(e.content),-3,e)}(e,t);break;case 4:Ma(e,t);break;case 5:!function(e,t){const{push:n,helper:s,pure:o}=t;o&&n(Na);n(`${s(wl)}(`),Fa(e.content,t),n(")")}(e,t);break;case 8:Pa(e,t);break;case 3:!function(e,t){const{push:n,helper:s,pure:o}=t;o&&n(Na);n(`${s(ml)}(${JSON.stringify(e.content)})`,-3,e)}(e,t);break;case 13:!function(e,t){const{push:n,helper:s,pure:o}=t,{tag:r,props:i,children:l,patchFlag:c,dynamicProps:a,directives:u,isBlock:d,disableTracking:p,isComponent:h}=e;u&&n(s(xl)+"(");d&&n(`(${s(ul)}(${p?"true":""}), `);o&&n(Na);const f=d?nc(t.inSSR,h):tc(t.inSSR,h);n(s(f)+"(",-2,e),La(function(e){let t=e.length;for(;t--&&null==e[t];);return e.slice(0,t+1).map((e=>e||"null"))}([r,i,l,c,a]),t),n(")"),d&&n(")");u&&(n(", "),Fa(u,t),n(")"))}(e,t);break;case 14:!function(e,t){const{push:n,helper:s,pure:o}=t,r=v(e.callee)?e.callee:s(e.callee);o&&n(Na);n(r+"(",-2,e),La(e.arguments,t),n(")")}(e,t);break;case 15:!function(e,t){const{push:n,indent:s,deindent:o,newline:r}=t,{properties:i}=e;if(!i.length)return void n("{}",-2,e);const l=i.length>1||!1;n(l?"{":"{ "),l&&s();for(let c=0;c<i.length;c++){const{key:e,value:s}=i[c];$a(e,t),n(": "),Fa(s,t),c<i.length-1&&(n(","),r())}l&&o(),n(l?"}":" }")}(e,t);break;case 17:!function(e,t){Oa(e.elements,t)}(e,t);break;case 18:!function(e,t){const{push:n,indent:s,deindent:o}=t,{params:r,returns:i,body:l,newline:c,isSlot:a}=e;a&&n(`_${ql[Vl]}(`);n("(",-2,e),p(r)?La(r,t):r&&Fa(r,t);n(") => "),(c||l)&&(n("{"),s());i?(c&&n("return "),p(i)?Oa(i,t):Fa(i,t)):l&&Fa(l,t);(c||l)&&(o(),n("}"));a&&n(")")}(e,t);break;case 19:!function(e,t){const{test:n,consequent:s,alternate:o,newline:r}=e,{push:i,indent:l,deindent:c,newline:a}=t;if(4===n.type){const e=!vc(n.content);e&&i("("),Ma(n,t),e&&i(")")}else i("("),Fa(n,t),i(")");r&&l(),t.indentLevel++,r||i(" "),i("? "),Fa(s,t),t.indentLevel--,r&&a(),r||i(" "),i(": ");const u=19===o.type;u||t.indentLevel++;Fa(o,t),u||t.indentLevel--;r&&c(!0)}(e,t);break;case 20:!function(e,t){const{push:n,helper:s,indent:o,deindent:r,newline:i}=t;n(`_cache[${e.index}] || (`),e.isVNode&&(o(),n(`${s(Pl)}(-1),`),i());n(`_cache[${e.index}] = `),Fa(e.value,t),e.isVNode&&(n(","),i(),n(`${s(Pl)}(1),`),i(),n(`_cache[${e.index}]`),r());n(")")}(e,t);break;case 21:La(e.body,t,!0,!1)}}function Ma(e,t){const{content:n,isStatic:s}=e;t.push(s?JSON.stringify(n):n,-3,e)}function Pa(e,t){for(let n=0;n<e.children.length;n++){const s=e.children[n];v(s)?t.push(s,-3):Fa(s,t)}}function $a(e,t){const{push:n}=t;if(8===e.type)n("["),Pa(e,t),n("]");else if(e.isStatic){n(vc(e.content)?e.content:JSON.stringify(e.content),-2,e)}else n(`[${e.content}]`,-3,e)}const Ba=Ea(/^(if|else|else-if)$/,((e,t,n)=>function(e,t,n,s){if(!("else"===t.name||t.exp&&t.exp.content.trim())){const s=t.exp?t.exp.loc:e.loc;n.onError(hc(28,t.loc)),t.exp=Xl("true",!1,s)}if("if"===t.name){const o=Va(e,t),r={type:9,loc:e.loc,branches:[o]};if(n.replaceNode(r),s)return s(r,o,!0)}else{const o=n.parent.children;let r=o.indexOf(e);for(;r-- >=-1;){const i=o[r];if(i&&3===i.type)n.removeNode(i);else{if(!i||2!==i.type||i.content.trim().length){if(i&&9===i.type){"else-if"===t.name&&void 0===i.branches[i.branches.length-1].condition&&n.onError(hc(30,e.loc)),n.removeNode();const o=Va(e,t);i.branches.push(o);const r=s&&s(i,o,!1);wa(o,n),r&&r(),n.currentNode=null}else n.onError(hc(30,e.loc));break}n.removeNode(i)}}}}(e,t,n,((e,t,s)=>{const o=n.parent.children;let r=o.indexOf(e),i=0;for(;r-- >=0;){const e=o[r];e&&9===e.type&&(i+=e.branches.length)}return()=>{if(s)e.codegenNode=Da(t,i,n);else{const s=function(e){for(;;)if(19===e.type){if(19!==e.alternate.type)return e;e=e.alternate}else 20===e.type&&(e=e.value)}(e.codegenNode);s.alternate=Da(t,i+e.branches.length-1,n)}}}))));function Va(e,t){const n=3===e.tagType;return{type:10,loc:e.loc,condition:"else"===t.name?void 0:t.exp,children:n&&!xc(e,"for")?e.children:[e],userKey:Cc(e,"key"),isTemplateIf:n}}function Da(e,t,n){return e.condition?ec(e.condition,Ua(e,t,n),Zl(n.helper(ml),['""',"true"])):Ua(e,t,n)}function Ua(e,t,n){const{helper:s}=n,o=Jl("key",Xl(`${t}`,!1,Wl,2)),{children:r}=e,i=r[0];if(1!==r.length||1!==i.type){if(1===r.length&&11===i.type){const e=i.codegenNode;return Rc(e,o,n),e}{let t=64;return Kl(n,s(rl),Gl([o]),r,t+"",void 0,void 0,!0,!1,!1,e.loc)}}{const e=i.codegenNode,t=14===(l=e).type&&l.callee===jl?l.arguments[1].returns:l;return 13===t.type&&sc(t,n),Rc(t,o,n),e}var l}const ja=Ea("for",((e,t,n)=>{const{helper:s,removeHelper:o}=n;return function(e,t,n,s){if(!t.exp)return void n.onError(hc(31,t.loc));const o=t.forParseResult;if(!o)return void n.onError(hc(32,t.loc));Ha(o);const{scopes:r}=n,{source:i,value:l,key:c,index:a}=o,u={type:11,loc:t.loc,source:i,valueAlias:l,keyAlias:c,objectIndexAlias:a,parseResult:o,children:Ec(e)?e.children:[e]};n.replaceNode(u),r.vFor++;const d=s&&s(u);return()=>{r.vFor--,d&&d()}}(e,t,n,(t=>{const r=Zl(s(Cl),[t.source]),i=Ec(e),l=xc(e,"memo"),c=Cc(e,"key"),a=c&&(6===c.type?Xl(c.value.content,!0):c.exp),u=c?Jl("key",a):null,d=4===t.source.type&&t.source.constType>0,p=d?64:c?128:256;return t.codegenNode=Kl(n,s(rl),void 0,r,p+"",void 0,void 0,!0,!d,!1,e.loc),()=>{let c;const{children:p}=t,h=1!==p.length||1!==p[0].type,f=Nc(e)?e:i&&1===e.children.length&&Nc(e.children[0])?e.children[0]:null;if(f?(c=f.codegenNode,i&&u&&Rc(c,u,n)):h?c=Kl(n,s(rl),u?Gl([u]):void 0,e.children,"64",void 0,void 0,!0,void 0,!1):(c=p[0].codegenNode,i&&u&&Rc(c,u,n),c.isBlock!==!d&&(c.isBlock?(o(ul),o(nc(n.inSSR,c.isComponent))):o(tc(n.inSSR,c.isComponent))),c.isBlock=!d,c.isBlock?(s(ul),s(nc(n.inSSR,c.isComponent))):s(tc(n.inSSR,c.isComponent))),l){const e=Yl(qa(t.parseResult,[Xl("_cached")]));e.body={type:21,body:[Ql(["const _memo = (",l.exp,")"]),Ql(["if (_cached",...a?[" && _cached.key === ",a]:[],` && ${n.helperString(Hl)}(_cached, _memo)) return _cached`]),Ql(["const _item = ",c]),Xl("_item.memo = _memo"),Xl("return _item")],loc:Wl},r.arguments.push(e,Xl("_cache"),Xl(String(n.cached++)))}else r.arguments.push(Yl(qa(t.parseResult),c,!0))}}))}));function Ha(e,t){e.finalized||(e.finalized=!0)}function qa({value:e,key:t,index:n},s=[]){return function(e){let t=e.length;for(;t--&&!e[t];);return e.slice(0,t+1).map(((e,t)=>e||Xl("_".repeat(t+1),!1)))}([e,t,n,...s])}const Wa=Xl("undefined",!1),Ka=(e,t)=>{if(1===e.type&&(1===e.tagType||3===e.tagType)){const n=xc(e,"slot");if(n)return t.scopes.vSlot++,()=>{t.scopes.vSlot--}}},za=(e,t,n,s)=>Yl(e,n,!1,!0,n.length?n[0].loc:s);function Ga(e,t,n=za){t.helper(Vl);const{children:s,loc:o}=e,r=[],i=[];let l=t.scopes.vSlot>0||t.scopes.vFor>0;const c=xc(e,"slot",!0);if(c){const{arg:e,exp:t}=c;e&&!fc(e)&&(l=!0),r.push(Jl(e||Xl("default",!0),n(t,void 0,s,o)))}let a=!1,u=!1;const d=[],p=new Set;let h=0;for(let g=0;g<s.length;g++){const e=s[g];let o;if(!Ec(e)||!(o=xc(e,"slot",!0))){3!==e.type&&d.push(e);continue}if(c){t.onError(hc(37,o.loc));break}a=!0;const{children:f,loc:m}=e,{arg:v=Xl("default",!0),exp:y,loc:b}=o;let _;fc(v)?_=v?v.content:"default":l=!0;const S=xc(e,"for"),x=n(y,S,f,m);let C,k;if(C=xc(e,"if"))l=!0,i.push(ec(C.exp,Ja(v,x,h++),Wa));else if(k=xc(e,/^else(-if)?$/,!0)){let e,n=g;for(;n--&&(e=s[n],3===e.type););if(e&&Ec(e)&&xc(e,"if")){s.splice(g,1),g--;let e=i[i.length-1];for(;19===e.alternate.type;)e=e.alternate;e.alternate=k.exp?ec(k.exp,Ja(v,x,h++),Wa):Ja(v,x,h++)}else t.onError(hc(30,k.loc))}else if(S){l=!0;const e=S.forParseResult;e?(Ha(e),i.push(Zl(t.helper(Cl),[e.source,Yl(qa(e),Ja(v,x),!0)]))):t.onError(hc(32,S.loc))}else{if(_){if(p.has(_)){t.onError(hc(38,b));continue}p.add(_),"default"===_&&(u=!0)}r.push(Jl(v,x))}}if(!c){const e=(e,t)=>Jl("default",n(e,void 0,t,o));a?d.length&&d.some((e=>Qa(e)))&&(u?t.onError(hc(39,d[0].loc)):r.push(e(void 0,d))):r.push(e(void 0,s))}const f=l?2:Xa(e.children)?3:1;let m=Gl(r.concat(Jl("_",Xl(f+"",!1))),o);return i.length&&(m=Zl(t.helper(Tl),[m,zl(i)])),{slots:m,hasDynamicSlots:l}}function Ja(e,t,n){const s=[Jl("name",e),Jl("fn",t)];return null!=n&&s.push(Jl("key",Xl(String(n),!0))),Gl(s)}function Xa(e){for(let t=0;t<e.length;t++){const n=e[t];switch(n.type){case 1:if(2===n.tagType||Xa(n.children))return!0;break;case 9:if(Xa(n.branches))return!0;break;case 10:case 11:if(Xa(n.children))return!0}}return!1}function Qa(e){return 2!==e.type&&12!==e.type||(2===e.type?!!e.content.trim():Qa(e.content))}const Za=new WeakMap,Ya=(e,t)=>function(){if(1!==(e=t.currentNode).type||0!==e.tagType&&1!==e.tagType)return;const{tag:n,props:s}=e,o=1===e.tagType;let r=o?function(e,t,n=!1){let{tag:s}=e;const o=su(s),r=Cc(e,"is");if(r)if(o){const e=6===r.type?r.value&&Xl(r.value.content,!0):r.exp;if(e)return Zl(t.helper(bl),[e])}else 6===r.type&&r.value.content.startsWith("vue:")&&(s=r.value.content.slice(4));const i=mc(s)||t.isBuiltInComponent(s);if(i)return n||t.helper(i),i;return t.helper(yl),t.components.add(s),Lc(s,"component")}(e,t):`"${n}"`;const i=b(r)&&r.callee===bl;let l,c,a,u,d,p,h=0,f=i||r===il||r===ll||!o&&("svg"===n||"foreignObject"===n);if(s.length>0){const n=eu(e,t,void 0,o,i);l=n.props,h=n.patchFlag,d=n.dynamicPropNames;const s=n.directives;p=s&&s.length?zl(s.map((e=>function(e,t){const n=[],s=Za.get(e);s?n.push(t.helperString(s)):(t.helper(_l),t.directives.add(e.name),n.push(Lc(e.name,"directive")));const{loc:o}=e;e.exp&&n.push(e.exp);e.arg&&(e.exp||n.push("void 0"),n.push(e.arg));if(Object.keys(e.modifiers).length){e.arg||(e.exp||n.push("void 0"),n.push("void 0"));const t=Xl("true",!1,o);n.push(Gl(e.modifiers.map((e=>Jl(e,t))),o))}return zl(n,e.loc)}(e,t)))):void 0,n.shouldUseBlock&&(f=!0)}if(e.children.length>0){r===cl&&(f=!0,h|=1024);if(o&&r!==il&&r!==cl){const{slots:n,hasDynamicSlots:s}=Ga(e,t);c=n,s&&(h|=1024)}else if(1===e.children.length&&r!==il){const n=e.children[0],s=n.type,o=5===s||8===s;o&&0===ya(n,t)&&(h|=1),c=o||2===s?n:e.children}else c=e.children}0!==h&&(a=String(h),d&&d.length&&(u=function(e){let t="[";for(let n=0,s=e.length;n<s;n++)t+=JSON.stringify(e[n]),n<s-1&&(t+=", ");return t+"]"}(d))),e.codegenNode=Kl(t,r,l,c,a,u,p,!!f,!1,o,e.loc)};function eu(e,t,n=e.props,s,o,r=!1){const{tag:l,loc:c,children:a}=e;let u=[];const d=[],p=[],h=a.length>0;let f=!1,m=0,g=!1,v=!1,b=!1,_=!1,S=!1,x=!1;const C=[],k=e=>{u.length&&(d.push(Gl(tu(u),c)),u=[]),e&&d.push(e)},T=({key:e,value:n})=>{if(fc(e)){const r=e.content,l=i(r);if(!l||s&&!o||"onclick"===r.toLowerCase()||"onUpdate:modelValue"===r||w(r)||(_=!0),l&&w(r)&&(x=!0),l&&14===n.type&&(n=n.arguments[0]),20===n.type||(4===n.type||8===n.type)&&ya(n,t)>0)return;"ref"===r?g=!0:"class"===r?v=!0:"style"===r?b=!0:"key"===r||C.includes(r)||C.push(r),!s||"class"!==r&&"style"!==r||C.includes(r)||C.push(r)}else S=!0};for(let i=0;i<n.length;i++){const o=n[i];if(6===o.type){const{loc:e,name:n,nameLoc:s,value:r}=o;let i=!0;if("ref"===n&&(g=!0,t.scopes.vFor>0&&u.push(Jl(Xl("ref_for",!0),Xl("true")))),"is"===n&&(su(l)||r&&r.content.startsWith("vue:")))continue;u.push(Jl(Xl(n,!0,s),Xl(r?r.content:"",i,r?r.loc:e)))}else{const{name:n,arg:i,exp:a,loc:g,modifiers:v}=o,b="bind"===n,_="on"===n;if("slot"===n){s||t.onError(hc(40,g));continue}if("once"===n||"memo"===n)continue;if("is"===n||b&&kc(i,"is")&&su(l))continue;if(_&&r)continue;if((b&&kc(i,"key")||_&&h&&kc(i,"vue:before-update"))&&(f=!0),b&&kc(i,"ref")&&t.scopes.vFor>0&&u.push(Jl(Xl("ref_for",!0),Xl("true"))),!i&&(b||_)){S=!0,a?b?(k(),d.push(a)):k({type:14,loc:g,callee:t.helper(Ol),arguments:s?[a]:[a,"true"]}):t.onError(hc(b?34:35,g));continue}b&&v.includes("prop")&&(m|=32);const x=t.directiveTransforms[n];if(x){const{props:n,needRuntime:s}=x(o,e,t);!r&&n.forEach(T),_&&i&&!fc(i)?k(Gl(n,c)):u.push(...n),s&&(p.push(o),y(s)&&Za.set(o,s))}else E(n)||(p.push(o),h&&(f=!0))}}let N;if(d.length?(k(),N=d.length>1?Zl(t.helper(El),d,c):d[0]):u.length&&(N=Gl(tu(u),c)),S?m|=16:(v&&!s&&(m|=2),b&&!s&&(m|=4),C.length&&(m|=8),_&&(m|=32)),f||0!==m&&32!==m||!(g||x||p.length>0)||(m|=512),!t.inSSR&&N)switch(N.type){case 15:let e=-1,n=-1,s=!1;for(let t=0;t<N.properties.length;t++){const o=N.properties[t].key;fc(o)?"class"===o.content?e=t:"style"===o.content&&(n=t):o.isHandlerKey||(s=!0)}const o=N.properties[e],r=N.properties[n];s?N=Zl(t.helper(Il),[N]):(o&&!fc(o.value)&&(o.value=Zl(t.helper(Nl),[o.value])),r&&(b||4===r.value.type&&"["===r.value.content.trim()[0]||17===r.value.type)&&(r.value=Zl(t.helper(Al),[r.value])));break;case 14:break;default:N=Zl(t.helper(Il),[Zl(t.helper(Rl),[N])])}return{props:N,directives:p,patchFlag:m,dynamicPropNames:C,shouldUseBlock:f}}function tu(e){const t=new Map,n=[];for(let s=0;s<e.length;s++){const o=e[s];if(8===o.key.type||!o.key.isStatic){n.push(o);continue}const r=o.key.content,l=t.get(r);l?("style"===r||"class"===r||i(r))&&nu(l,o):(t.set(r,o),n.push(o))}return n}function nu(e,t){17===e.value.type?e.value.elements.push(t.value):e.value=zl([e.value,t.value],e.loc)}function su(e){return"component"===e||"Component"===e}const ou=(e,t)=>{if(Nc(e)){const{children:n,loc:s}=e,{slotName:o,slotProps:r}=function(e,t){let n,s='"default"';const o=[];for(let r=0;r<e.props.length;r++){const t=e.props[r];if(6===t.type)t.value&&("name"===t.name?s=JSON.stringify(t.value.content):(t.name=I(t.name),o.push(t)));else if("bind"===t.name&&kc(t.arg,"name")){if(t.exp)s=t.exp;else if(t.arg&&4===t.arg.type){const e=I(t.arg.content);s=t.exp=Xl(e,!1,t.arg.loc)}}else"bind"===t.name&&t.arg&&fc(t.arg)&&(t.arg.content=I(t.arg.content)),o.push(t)}if(o.length>0){const{props:s,directives:r}=eu(e,t,o,!1,!1);n=s,r.length&&t.onError(hc(36,r[0].loc))}return{slotName:s,slotProps:n}}(e,t),i=[t.prefixIdentifiers?"_ctx.$slots":"$slots",o,"{}","undefined","true"];let l=2;r&&(i[2]=r,l=3),n.length&&(i[3]=Yl([],n,!1,!1,s),l=4),t.scopeId&&!t.slotted&&(l=5),i.splice(l),e.codegenNode=Zl(t.helper(kl),i,s)}};const ru=/^\s*([\w$_]+|(async\s*)?\([^)]*?\))\s*(:[^=]+)?=>|^\s*(async\s+)?function(?:\s+[\w$]+)?\s*\(/,iu=(e,t,n,s)=>{const{loc:o,modifiers:r,arg:i}=e;let l;if(4===i.type)if(i.isStatic){let e=i.content;e.startsWith("vue:")&&(e=`vnode-${e.slice(4)}`);l=Xl(0!==t.tagType||e.startsWith("vnode")||!/[A-Z]/.test(e)?F(I(e)):`on:${e}`,!0,i.loc)}else l=Ql([`${n.helperString(Ml)}(`,i,")"]);else l=i,l.children.unshift(`${n.helperString(Ml)}(`),l.children.push(")");let c=e.exp;c&&!c.content.trim()&&(c=void 0);let a=n.cacheHandlers&&!c&&!n.inVOnce;if(c){const e=Sc(c.content),t=!(e||ru.test(c.content)),n=c.content.includes(";");(t||a&&e)&&(c=Ql([`${t?"$event":"(...args)"} => ${n?"{":"("}`,c,n?"}":")"]))}let u={props:[Jl(l,c||Xl("() => {}",!1,o))]};return s&&(u=s(u)),a&&(u.props[0].value=n.cache(u.props[0].value)),u.props.forEach((e=>e.key.isHandlerKey=!0)),u},lu=(e,t,n)=>{const{modifiers:s,loc:o}=e,r=e.arg;let{exp:i}=e;if(i&&4===i.type&&!i.content.trim()&&(i=void 0),!i){if(4!==r.type||!r.isStatic)return n.onError(hc(52,r.loc)),{props:[Jl(r,Xl("",!0,o))]};const t=I(r.content);i=e.exp=Xl(t,!1,r.loc)}return 4!==r.type?(r.children.unshift("("),r.children.push(') || ""')):r.isStatic||(r.content=`${r.content} || ""`),s.includes("camel")&&(4===r.type?r.content=r.isStatic?I(r.content):`${n.helperString(Ll)}(${r.content})`:(r.children.unshift(`${n.helperString(Ll)}(`),r.children.push(")"))),n.inSSR||(s.includes("prop")&&cu(r,"."),s.includes("attr")&&cu(r,"^")),{props:[Jl(r,i)]}},cu=(e,t)=>{4===e.type?e.content=e.isStatic?t+e.content:`\`${t}\${${e.content}}\``:(e.children.unshift(`'${t}' + (`),e.children.push(")"))},au=(e,t)=>{if(0===e.type||1===e.type||11===e.type||10===e.type)return()=>{const n=e.children;let s,o=!1;for(let e=0;e<n.length;e++){const t=n[e];if(Tc(t)){o=!0;for(let o=e+1;o<n.length;o++){const r=n[o];if(!Tc(r)){s=void 0;break}s||(s=n[e]=Ql([t],t.loc)),s.children.push(" + ",r),n.splice(o,1),o--}}}if(o&&(1!==n.length||0!==e.type&&(1!==e.type||0!==e.tagType||e.props.find((e=>7===e.type&&!t.directiveTransforms[e.name])))))for(let e=0;e<n.length;e++){const s=n[e];if(Tc(s)||8===s.type){const o=[];2===s.type&&" "===s.content||o.push(s),t.ssr||0!==ya(s,t)||o.push("1"),n[e]={type:12,content:s,loc:s.loc,codegenNode:Zl(t.helper(gl),o)}}}}},uu=new WeakSet,du=(e,t)=>{if(1===e.type&&xc(e,"once",!0)){if(uu.has(e)||t.inVOnce||t.inSSR)return;return uu.add(e),t.inVOnce=!0,t.helper(Pl),()=>{t.inVOnce=!1;const e=t.currentNode;e.codegenNode&&(e.codegenNode=t.cache(e.codegenNode,!0))}}},pu=(e,t,n)=>{const{exp:s,arg:o}=e;if(!s)return n.onError(hc(41,e.loc)),hu();const r=s.loc.source,i=4===s.type?s.content:r,l=n.bindingMetadata[r];if("props"===l||"props-aliased"===l)return hu();if(!i.trim()||!Sc(i))return n.onError(hc(42,s.loc)),hu();const c=o||Xl("modelValue",!0),a=o?fc(o)?`onUpdate:${I(o.content)}`:Ql(['"onUpdate:" + ',o]):"onUpdate:modelValue";let u;u=Ql([`${n.isTS?"($event: any)":"$event"} => ((`,s,") = $event)"]);const d=[Jl(c,e.exp),Jl(a,u)];if(e.modifiers.length&&1===t.tagType){const t=e.modifiers.map((e=>(vc(e)?e:JSON.stringify(e))+": true")).join(", "),n=o?fc(o)?`${o.content}Modifiers`:Ql([o,' + "Modifiers"']):"modelModifiers";d.push(Jl(n,Xl(`{ ${t} }`,!1,e.loc,2)))}return hu(d)};function hu(e=[]){return{props:e}}const fu=new WeakSet,mu=(e,t)=>{if(1===e.type){const n=xc(e,"memo");if(!n||fu.has(e))return;return fu.add(e),()=>{const s=e.codegenNode||t.currentNode.codegenNode;s&&13===s.type&&(1!==e.tagType&&sc(s,t),e.codegenNode=Zl(t.helper(jl),[n.exp,Yl(void 0,s),"_cache",String(t.cached++)]))}}};function gu(e,t={}){const n=t.onError||dc,s="module"===t.mode;!0===t.prefixIdentifiers?n(hc(47)):s&&n(hc(48));t.cacheHandlers&&n(hc(49)),t.scopeId&&!s&&n(hc(50));const o=c({},t,{prefixIdentifiers:!1}),r=v(e)?fa(e,o):e,[i,l]=[[du,Ba,mu,ja,ou,Ya,Ka,au],{on:iu,bind:lu,model:pu}];return Ta(r,c({},o,{nodeTransforms:[...i,...t.nodeTransforms||[]],directiveTransforms:c({},l,t.directiveTransforms||{})})),Ia(r,o)}const vu=Symbol(""),yu=Symbol(""),bu=Symbol(""),_u=Symbol(""),Su=Symbol(""),xu=Symbol(""),Cu=Symbol(""),ku=Symbol(""),Tu=Symbol(""),wu=Symbol("");var Eu;let Nu;Eu={[vu]:"vModelRadio",[yu]:"vModelCheckbox",[bu]:"vModelText",[_u]:"vModelSelect",[Su]:"vModelDynamic",[xu]:"withModifiers",[Cu]:"withKeys",[ku]:"vShow",[Tu]:"Transition",[wu]:"TransitionGroup"},Object.getOwnPropertySymbols(Eu).forEach((e=>{ql[e]=Eu[e]}));const Au={parseMode:"html",isVoidTag:Z,isNativeTag:e=>J(e)||X(e)||Q(e),isPreTag:e=>"pre"===e,decodeEntities:function(e,t=!1){return Nu||(Nu=document.createElement("div")),t?(Nu.innerHTML=`<div foo="${e.replace(/"/g,"&quot;")}">`,Nu.children[0].getAttribute("foo")):(Nu.innerHTML=e,Nu.textContent)},isBuiltInComponent:e=>"Transition"===e||"transition"===e?Tu:"TransitionGroup"===e||"transition-group"===e?wu:void 0,getNamespace(e,t,n){let s=t?t.ns:n;if(t&&2===s)if("annotation-xml"===t.tag){if("svg"===e)return 1;t.props.some((e=>6===e.type&&"encoding"===e.name&&null!=e.value&&("text/html"===e.value.content||"application/xhtml+xml"===e.value.content)))&&(s=0)}else/^m(?:[ions]|text)$/.test(t.tag)&&"mglyph"!==e&&"malignmark"!==e&&(s=0);else t&&1===s&&("foreignObject"!==t.tag&&"desc"!==t.tag&&"title"!==t.tag||(s=0));if(0===s){if("svg"===e)return 1;if("math"===e)return 2}return s}},Iu=(e,t)=>{const n=z(e);return Xl(JSON.stringify(n),!1,t,3)};function Ru(e,t){return hc(e,t)}const Ou=t("passive,once,capture"),Lu=t("stop,prevent,self,ctrl,shift,alt,meta,exact,middle"),Fu=t("left,right"),Mu=t("onkeyup,onkeydown,onkeypress",!0),Pu=(e,t)=>fc(e)&&"onclick"===e.content.toLowerCase()?Xl(t,!0):4!==e.type?Ql(["(",e,`) === "onClick" ? "${t}" : (`,e,")"]):e,$u=(e,t)=>{1!==e.type||0!==e.tagType||"script"!==e.tag&&"style"!==e.tag||t.removeNode()},Bu=[e=>{1===e.type&&e.props.forEach(((t,n)=>{6===t.type&&"style"===t.name&&t.value&&(e.props[n]={type:7,name:"bind",arg:Xl("style",!0,t.loc),exp:Iu(t.value.content,t.loc),modifiers:[],loc:t.loc})}))}],Vu={cloak:()=>({props:[]}),html:(e,t,n)=>{const{exp:s,loc:o}=e;return s||n.onError(Ru(53,o)),t.children.length&&(n.onError(Ru(54,o)),t.children.length=0),{props:[Jl(Xl("innerHTML",!0,o),s||Xl("",!0))]}},text:(e,t,n)=>{const{exp:s,loc:o}=e;return s||n.onError(Ru(55,o)),t.children.length&&(n.onError(Ru(56,o)),t.children.length=0),{props:[Jl(Xl("textContent",!0),s?ya(s,n)>0?s:Zl(n.helperString(wl),[s],o):Xl("",!0))]}},model:(e,t,n)=>{const s=pu(e,t,n);if(!s.props.length||1===t.tagType)return s;e.arg&&n.onError(Ru(58,e.arg.loc));const{tag:o}=t,r=n.isCustomElement(o);if("input"===o||"textarea"===o||"select"===o||r){let i=bu,l=!1;if("input"===o||r){const s=Cc(t,"type");if(s){if(7===s.type)i=Su;else if(s.value)switch(s.value.content){case"radio":i=vu;break;case"checkbox":i=yu;break;case"file":l=!0,n.onError(Ru(59,e.loc))}}else(function(e){return e.props.some((e=>!(7!==e.type||"bind"!==e.name||e.arg&&4===e.arg.type&&e.arg.isStatic)))})(t)&&(i=Su)}else"select"===o&&(i=_u);l||(s.needRuntime=n.helper(i))}else n.onError(Ru(57,e.loc));return s.props=s.props.filter((e=>!(4===e.key.type&&"modelValue"===e.key.content))),s},on:(e,t,n)=>iu(e,t,n,(t=>{const{modifiers:s}=e;if(!s.length)return t;let{key:o,value:r}=t.props[0];const{keyModifiers:i,nonKeyModifiers:l,eventOptionModifiers:c}=((e,t,n,s)=>{const o=[],r=[],i=[];for(let l=0;l<t.length;l++){const n=t[l];Ou(n)?i.push(n):Fu(n)?fc(e)?Mu(e.content)?o.push(n):r.push(n):(o.push(n),r.push(n)):Lu(n)?r.push(n):o.push(n)}return{keyModifiers:o,nonKeyModifiers:r,eventOptionModifiers:i}})(o,s);if(l.includes("right")&&(o=Pu(o,"onContextmenu")),l.includes("middle")&&(o=Pu(o,"onMouseup")),l.length&&(r=Zl(n.helper(xu),[r,JSON.stringify(l)])),!i.length||fc(o)&&!Mu(o.content)||(r=Zl(n.helper(Cu),[r,JSON.stringify(i)])),c.length){const e=c.map(L).join("");o=fc(o)?Xl(`${o.content}${e}`,!0):Ql(["(",o,`) + "${e}"`])}return{props:[Jl(o,r)]}})),show:(e,t,n)=>{const{exp:s,loc:o}=e;return s||n.onError(Ru(61,o)),{props:[],needRuntime:n.helper(ku)}}};const Du=new WeakMap;function Uu(e,t){if(!v(e)){if(!e.nodeType)return o;e=e.innerHTML}const s=e,r=function(e){let t=Du.get(null!=e?e:n);return t||(t=Object.create(null),Du.set(null!=e?e:n,t)),t}(t),i=r[s];if(i)return i;if("#"===e[0]){const t=document.querySelector(e);e=t?t.innerHTML:""}const l=c({hoistStatic:!0,onError:void 0,onWarn:o},t);l.isCustomElement||"undefined"==typeof customElements||(l.isCustomElement=e=>!!customElements.get(e));const{code:a}=function(e,t={}){return gu(e,c({},Au,t,{nodeTransforms:[$u,...Bu,...t.nodeTransforms||[]],directiveTransforms:c({},Vu,t.directiveTransforms||{}),transformHoist:null}))}(e,l),u=new Function(a)();return u._rc=!0,r[s]=u}return _r(Uu),e.BaseTransition=Jn,e.BaseTransitionPropsValidators=Gn,e.Comment=Po,e.DeprecationTypes=null,e.EffectScope=le,e.ErrorCodes={SETUP_FUNCTION:0,0:"SETUP_FUNCTION",RENDER_FUNCTION:1,1:"RENDER_FUNCTION",WATCH_GETTER:2,2:"WATCH_GETTER",WATCH_CALLBACK:3,3:"WATCH_CALLBACK",WATCH_CLEANUP:4,4:"WATCH_CLEANUP",NATIVE_EVENT_HANDLER:5,5:"NATIVE_EVENT_HANDLER",COMPONENT_EVENT_HANDLER:6,6:"COMPONENT_EVENT_HANDLER",VNODE_HOOK:7,7:"VNODE_HOOK",DIRECTIVE_HOOK:8,8:"DIRECTIVE_HOOK",TRANSITION_HOOK:9,9:"TRANSITION_HOOK",APP_ERROR_HANDLER:10,10:"APP_ERROR_HANDLER",APP_WARN_HANDLER:11,11:"APP_WARN_HANDLER",FUNCTION_REF:12,12:"FUNCTION_REF",ASYNC_COMPONENT_LOADER:13,13:"ASYNC_COMPONENT_LOADER",SCHEDULER:14,14:"SCHEDULER"},e.ErrorTypeStrings=null,e.Fragment=Fo,e.KeepAlive=is,e.ReactiveEffect=ue,e.Static=$o,e.Suspense=Nn,e.Teleport=Oo,e.Text=Mo,e.TrackOpTypes={GET:"get",HAS:"has",ITERATE:"iterate"},e.Transition=$r,e.TransitionGroup=Ni,e.TriggerOpTypes={SET:"set",ADD:"add",DELETE:"delete",CLEAR:"clear"},e.VueElement=xi,e.assertNumber=function(e,t){},e.callWithAsyncErrorHandling=Ht,e.callWithErrorHandling=jt,e.camelize=I,e.capitalize=L,e.cloneVNode=er,e.compatUtils=null,e.compile=Uu,e.computed=Tr,e.createApp=(...e)=>{const t=Zi().createApp(...e),{mount:n}=t;return t.mount=e=>{const s=sl(e);if(!s)return;const o=t._component;g(o)||o.render||o.template||(o.template=s.innerHTML),s.innerHTML="";const r=n(s,!1,nl(s));return s instanceof Element&&(s.removeAttribute("v-cloak"),s.setAttribute("data-v-app","")),r},t},e.createBlock=Wo,e.createCommentVNode=function(e="",t=!1){return t?(Do(),Wo(Po,null,e)):Zo(Po,null,e)},e.createElementBlock=function(e,t,n,s,o,r){return qo(Qo(e,t,n,s,o,r,!0))},e.createElementVNode=Qo,e.createHydrationRenderer=_o,e.createPropsRestProxy=function(e,t){const n={};for(const s in e)t.includes(s)||Object.defineProperty(n,s,{enumerable:!0,get:()=>e[s]});return n},e.createRenderer=bo,e.createSSRApp=(...e)=>{const t=Yi().createApp(...e),{mount:n}=t;return t.mount=e=>{const t=sl(e);if(t)return n(t,!0,nl(t))},t},e.createSlots=function(e,t){for(let n=0;n<t.length;n++){const s=t[n];if(p(s))for(let t=0;t<s.length;t++)e[s[t].name]=s[t].fn;else s&&(e[s.name]=s.key?(...e)=>{const t=s.fn(...e);return t&&(t.key=s.key),t}:s.fn)}return e},e.createStaticVNode=function(e,t){const n=Zo($o,null,e);return n.staticCount=t,n},e.createTextVNode=tr,e.createVNode=Zo,e.customRef=Bt,e.defineAsyncComponent=function(e){g(e)&&(e={loader:e});const{loader:t,loadingComponent:n,errorComponent:s,delay:o=200,timeout:r,suspensible:i=!0,onError:l}=e;let c,a=null,u=0;const d=()=>{let e;return a||(e=a=t().catch((e=>{if(e=e instanceof Error?e:new Error(String(e)),l)return new Promise(((t,n)=>{l(e,(()=>t((u++,a=null,d()))),(()=>n(e)),u+1)}));throw e})).then((t=>e!==a&&a?a:(t&&(t.__esModule||"Module"===t[Symbol.toStringTag])&&(t=t.default),c=t,t))))};return ns({name:"AsyncComponentWrapper",__asyncLoader:d,get __asyncResolved(){return c},setup(){const e=ar;if(c)return()=>os(c,e);const t=t=>{a=null,qt(t,e,13,!s)};if(i&&e.suspense)return d().then((t=>()=>os(t,e))).catch((e=>(t(e),()=>s?Zo(s,{error:e}):null)));const l=Rt(!1),u=Rt(),p=Rt(!!o);return o&&setTimeout((()=>{p.value=!1}),o),null!=r&&setTimeout((()=>{if(!l.value&&!u.value){const e=new Error(`Async component timed out after ${r}ms.`);t(e),u.value=e}}),r),d().then((()=>{l.value=!0,e.parent&&rs(e.parent.vnode)&&(e.parent.effect.dirty=!0,tn(e.parent.update))})).catch((e=>{t(e),u.value=e})),()=>l.value&&c?os(c,e):u.value&&s?Zo(s,{error:u.value}):n&&!p.value?Zo(n):void 0}})},e.defineComponent=ns,e.defineCustomElement=_i,e.defineEmits=function(){return null},e.defineExpose=function(e){},e.defineModel=function(){},e.defineOptions=function(e){},e.defineProps=function(){return null},e.defineSSRCustomElement=e=>_i(e,tl),e.defineSlots=function(){return null},e.devtools=void 0,e.effect=function(e,t){e.effect instanceof ue&&(e=e.effect.fn);const n=new ue(e,o,(()=>{n.dirty&&n.run()}));t&&(c(n,t),t.scope&&ce(n,t.scope)),t&&t.lazy||n.run();const s=n.run.bind(n);return s.effect=n,s},e.effectScope=function(e){return new le(e)},e.getCurrentInstance=ur,e.getCurrentScope=ae,e.getTransitionRawChildren=ts,e.guardReactiveProps=Yo,e.h=wr,e.handleError=qt,e.hasInjectionContext=function(){return!!(ar||hn||Js)},e.hydrate=tl,e.initCustomFormatter=function(){},e.initDirectivesForSSR=ol,e.inject=Qs,e.isMemoSame=Er,e.isProxy=xt,e.isReactive=bt,e.isReadonly=_t,e.isRef=It,e.isRuntimeOnly=()=>!gr,e.isShallow=St,e.isVNode=Ko,e.markRaw=kt,e.mergeDefaults=function(e,t){const n=Ls(e);for(const s in t){if(s.startsWith("__skip"))continue;let e=n[s];e?p(e)||g(e)?e=n[s]={type:e,default:t[s]}:e.default=t[s]:null===e&&(e=n[s]={default:t[s]}),e&&t[`__skip_${s}`]&&(e.skipFactory=!0)}return n},e.mergeModels=function(e,t){return e&&t?p(e)&&p(t)?e.concat(t):c({},Ls(e),Ls(t)):e||t},e.mergeProps=rr,e.nextTick=en,e.normalizeClass=G,e.normalizeProps=function(e){if(!e)return null;let{class:t,style:n}=e;return t&&!v(t)&&(e.class=G(t)),n&&(e.style=H(n)),e},e.normalizeStyle=H,e.onActivated=cs,e.onBeforeMount=gs,e.onBeforeUnmount=_s,e.onBeforeUpdate=ys,e.onDeactivated=as,e.onErrorCaptured=Ts,e.onMounted=vs,e.onRenderTracked=ks,e.onRenderTriggered=Cs,e.onScopeDispose=function(e){re&&re.cleanups.push(e)},e.onServerPrefetch=xs,e.onUnmounted=Ss,e.onUpdated=bs,e.openBlock=Do,e.popScopeId=function(){fn=null},e.provide=Xs,e.proxyRefs=Pt,e.pushScopeId=function(e){fn=e},e.queuePostFlushCb=sn,e.reactive=mt,e.readonly=vt,e.ref=Rt,e.registerRuntimeCompiler=_r,e.render=el,e.renderList=function(e,t,n,s){let o;const r=n&&n[s];if(p(e)||v(e)){o=new Array(e.length);for(let n=0,s=e.length;n<s;n++)o[n]=t(e[n],n,void 0,r&&r[n])}else if("number"==typeof e){o=new Array(e);for(let n=0;n<e;n++)o[n]=t(n+1,n,void 0,r&&r[n])}else if(b(e))if(e[Symbol.iterator])o=Array.from(e,((e,n)=>t(e,n,void 0,r&&r[n])));else{const n=Object.keys(e);o=new Array(n.length);for(let s=0,i=n.length;s<i;s++){const i=n[s];o[s]=t(e[i],i,s,r&&r[s])}}else o=[];return n&&(n[s]=o),o},e.renderSlot=function(e,t,n={},s,o){if(hn.isCE||hn.parent&&ss(hn.parent)&&hn.parent.isCE)return"default"!==t&&(n.name=t),Zo("slot",n,s&&s());let r=e[t];r&&r._c&&(r._d=!1),Do();const i=r&&ws(r(n)),l=Wo(Fo,{key:n.key||i&&i.key||`_${t}`},i||(s?s():[]),i&&1===e._?64:-2);return!o&&l.scopeId&&(l.slotScopeIds=[l.scopeId+"-s"]),r&&r._c&&(r._d=!0),l},e.resolveComponent=function(e,t){return kn(xn,e,!0,t)||e},e.resolveDirective=function(e){return kn("directives",e)},e.resolveDynamicComponent=function(e){return v(e)?kn(xn,e,!1)||e:e||Cn},e.resolveFilter=null,e.resolveTransitionHooks=Qn,e.setBlockTracking=Ho,e.setDevtoolsHook=Ir,e.setTransitionHooks=es,e.shallowReactive=gt,e.shallowReadonly=function(e){return yt(e,!0,je,ut,ft)},e.shallowRef=function(e){return Ot(e,!0)},e.ssrContextKey=Fn,e.ssrUtils=null,e.stop=function(e){e.effect.stop()},e.toDisplayString=e=>v(e)?e:null==e?"":p(e)||b(e)&&(e.toString===S||!g(e.toString))?JSON.stringify(e,se,2):String(e),e.toHandlerKey=F,e.toHandlers=function(e,t){const n={};for(const s in e)n[t&&/[A-Z]/.test(s)?`on:${s}`:F(s)]=e[s];return n},e.toRaw=Ct,e.toRef=function(e,t,n){return It(e)?e:g(e)?new Dt(e):b(e)&&arguments.length>1?Ut(e,t,n):Rt(e)},e.toRefs=function(e){const t=p(e)?new Array(e.length):{};for(const n in e)t[n]=Ut(e,n);return t},e.toValue=function(e){return g(e)?e():Ft(e)},e.transformVNodeArgs=function(e){},e.triggerRef=function(e){At(e,4)},e.unref=Ft,e.useAttrs=function(){return Os().attrs},e.useCssModule=function(e="$style"){return n},e.useCssVars=function(e){const t=ur();if(!t)return;const n=t.ut=(n=e(t.proxy))=>{Array.from(document.querySelectorAll(`[data-v-owner="${t.uid}"]`)).forEach((e=>ri(e,n)))},s=()=>{const s=e(t.proxy);oi(t.subTree,s),n(s)};Mn(s),vs((()=>{const e=new MutationObserver(s);e.observe(t.subTree.el.parentNode,{childList:!0}),Ss((()=>e.disconnect()))}))},e.useModel=function(e,t,s=n){const o=ur(),r=I(t),i=O(t),l=Bt(((n,l)=>{let c;return Pn((()=>{const n=e[t];M(c,n)&&(c=n,l())})),{get:()=>(n(),s.get?s.get(c):c),set(e){const n=o.vnode.props;n&&(t in n||r in n||i in n)&&(`onUpdate:${t}`in n||`onUpdate:${r}`in n||`onUpdate:${i}`in n)||!M(e,c)||(c=e,l()),o.emit(`update:${t}`,s.set?s.set(e):e)}}})),c="modelValue"===t?"modelModifiers":`${t}Modifiers`;return l[Symbol.iterator]=()=>{let t=0;return{next:()=>t<2?{value:t++?e[c]||{}:l,done:!1}:{done:!0}}},l},e.useSSRContext=()=>{},e.useSlots=function(){return Os().slots},e.useTransitionState=Kn,e.vModelCheckbox=$i,e.vModelDynamic=qi,e.vModelRadio=Vi,e.vModelSelect=Di,e.vModelText=Pi,e.vShow=ti,e.version=Nr,e.warn=Ar,e.watch=Bn,e.watchEffect=function(e,t){return Vn(e,null,t)},e.watchPostEffect=Mn,e.watchSyncEffect=Pn,e.withAsyncContext=function(e){const t=ur();let n=e();return fr(),_(n)&&(n=n.catch((e=>{throw hr(t),e}))),[n,()=>hr(t)]},e.withCtx=gn,e.withDefaults=function(e,t){return null},e.withDirectives=function(e,t){if(null===hn)return e;const s=Cr(hn)||hn.proxy,o=e.dirs||(e.dirs=[]);for(let r=0;r<t.length;r++){let[e,i,l,c=n]=t[r];e&&(g(e)&&(e={mounted:e,updated:e}),e.deep&&jn(i),o.push({dir:e,instance:s,value:i,oldValue:void 0,arg:l,modifiers:c}))}return e},e.withKeys=(e,t)=>{const n=e._withKeys||(e._withKeys={}),s=t.join(".");return n[s]||(n[s]=n=>{if(!("key"in n))return;const s=O(n.key);return t.some((e=>e===s||Gi[e]===s))?e(n):void 0})},e.withMemo=function(e,t,n,s){const o=n[s];if(o&&Er(o,e))return o;const r=t();return r.memo=e.slice(),n[s]=r},e.withModifiers=(e,t)=>{const n=e._withMods||(e._withMods={}),s=t.join(".");return n[s]||(n[s]=(n,...s)=>{for(let e=0;e<t.length;e++){const s=zi[t[e]];if(s&&s(n,t))return}return e(n,...s)})},e.withScopeId=e=>gn,e}({});
"}]}],"settings":{"statistics_enabled":true,"configMode":100}}